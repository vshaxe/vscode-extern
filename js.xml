<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Any.hx">
		<from><icast><d/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Any.hx" private="1" module="Any" final="1">
	<__promote params="T" get="inline" set="null" line="37" static="1">
		<f a="this">
			<d/>
			<c path="__promote.T"/>
		</f>
		<meta>
			<m n=":noCompletion"/>
			<m n=":to"/>
		</meta>
	</__promote>
	<toString get="inline" set="null" line="40" static="1">
		<f a="this">
			<d/>
			<c path="String"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</toString>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="_Any.Any_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Any.hx" private="1" module="Any" final="1">
		<__promote params="T" get="inline" set="null" line="37" static="1">
			<f a="this">
				<d/>
				<c path="__promote.T"/>
			</f>
			<meta>
				<m n=":noCompletion"/>
				<m n=":to"/>
			</meta>
		</__promote>
		<toString get="inline" set="null" line="40" static="1">
			<f a="this">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</toString>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="Array" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<iterator public="1" get="inline" set="null" line="88">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API.

	@see https://haxe.org/manual/std-Array.html
	@see https://haxe.org/manual/lf-array-comprehension.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Class" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/Date.hx" extern="1">
		<now public="1" get="inline" set="null" line="46" static="1">
			<f a=""><c path="Date"/></f>
			<haxe_doc>Returns a Date representing the current local time.</haxe_doc>
		</now>
		<fromTime public="1" get="inline" set="null" line="50" static="1">
			<f a="t">
				<x path="Float"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the timestamp (in milliseconds) `t`.</haxe_doc>
		</fromTime>
		<fromString public="1" get="inline" set="null" line="54" static="1">
			<f a="s">
				<c path="String"/>
				<c path="Date"/>
			</f>
			<haxe_doc>Creates a Date from the formatted string `s`. The following formats are
		accepted by the function:

		- `"YYYY-MM-DD hh:mm:ss"`
		- `"YYYY-MM-DD"`
		- `"hh:mm:ss"`

		The first two formats expressed a date in local time. The third is a time
		relative to the UTC epoch.</haxe_doc>
		</fromString>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the timestamp (in milliseconds) of `this` date.
		On cpp and neko, this function only has a second resolution, so the
		result will always be a multiple of `1000.0`, e.g. `1454698271000.0`.
		To obtain the current timestamp with better precision on cpp and neko,
		see the `Sys.time` API.

		For measuring time differences with millisecond accuracy on
		all platforms, see `haxe.Timer.stamp`.</haxe_doc>
		</getTime>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in the local timezone.</haxe_doc>
		</getHours>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getMinutes>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in the local timezone.</haxe_doc>
		</getSeconds>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in the local timezone.</haxe_doc>
		</getFullYear>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in the local timezone.
		Note that the month number is zero-based.</haxe_doc>
		</getMonth>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in the local timezone.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in the local timezone.</haxe_doc>
		</getDay>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours of `this` Date (0-23 range) in UTC.</haxe_doc>
		</getUTCHours>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCMinutes>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds of `this` Date (0-59 range) in UTC.</haxe_doc>
		</getUTCSeconds>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the full year of `this` Date (4 digits) in UTC.</haxe_doc>
		</getUTCFullYear>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month of `this` Date (0-11 range) in UTC.
		Note that the month number is zero-based.</haxe_doc>
		</getUTCMonth>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of `this` Date (1-31 range) in UTC.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week of `this` Date (0-6 range, where `0` is Sunday)
		in UTC.</haxe_doc>
		</getUTCDay>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time zone difference of `this` Date in the current locale
		to UTC, in minutes.

		Assuming the function is executed on a machine in a UTC+2 timezone,
		`Date.now().getTimezoneOffset()` will return `-120`.</haxe_doc>
		</getTimezoneOffset>
		<toString public="1" get="inline" set="null" line="42">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta><m n=":coreApi"/></meta>
	</class>
	<class path="js.lib.RegExp" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/RegExp.hx" extern="1">
		<global public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "g" flag is used with the regular expression.</haxe_doc>
		</global>
		<ignoreCase public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "i" flag is used with the regular expression.</haxe_doc>
		</ignoreCase>
		<multiline public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>Indicates whether or not the "m" flag is used with the regular expression.</haxe_doc>
		</multiline>
		<source public="1" set="null">
			<c path="String"/>
			<haxe_doc>The source text of the regexp object, it doesn't contain the two forward slashes on both sides and any flags.</haxe_doc>
		</source>
		<lastIndex public="1">
			<x path="Int"/>
			<haxe_doc>The index at which to start the next match.</haxe_doc>
		</lastIndex>
		<exec public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Null"><c path="js.lib.RegExpMatch"/></x>
			</f>
			<haxe_doc>Execute a search for a match in a specified string.
		Returns a result array, or null.</haxe_doc>
		</exec>
		<test public="1" set="method">
			<f a="str">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Execute a search for a match between a regular expression and a specified string.
		Returns true or false.</haxe_doc>
		</test>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Return a string representing the regular expression.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="pattern:?flags">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a regular expression object for matching text with a pattern.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Native JavaScript regular expressions.

	For cross-platform regular expressions, use Haxe `EReg` class or
	[regexp literals](https://haxe.org/manual/std-regex.html).

	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp>]]></haxe_doc>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<class path="_EReg.HaxeRegExp" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/EReg.hx" private="1" module="EReg" extern="1">
		<extends path="js.lib.RegExp"/>
		<m public="1"><c path="js.lib.RegExpMatch"/></m>
		<s public="1"><c path="String"/></s>
		<meta><m n=":native"><e>"RegExp"</e></m></meta>
	</class>
	<abstract path="Enum" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.Syntax" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/Syntax.hx" extern="1">
		<code public="1" set="method" static="1">
			<f a="code:args">
				<c path="String"/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.

		`code` must be a string constant.

		Additional `args` are supported to provide code interpolation, for example:
		```haxe
		Syntax.code("console.log({0}, {1})", "hi", 42);
		```
		will generate
		```haxe
		console.log("hi", 42);
		```

		Emits a compilation error if the count of `args` does not match the count of placeholders in `code`.</haxe_doc>
		</code>
		<plainCode public="1" set="method" static="1">
			<f a="code">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inject `code` directly into generated source.
		The same as `js.Syntax.code` except this one does not provide code interpolation.</haxe_doc>
		</plainCode>
		<construct public="1" params="T" set="method" static="1">
			<f a="cl:args">
				<x path="Class"><c path="construct.T"/></x>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="construct.T"/>
			</f>
			<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
			<overloads><construct public="1" set="method">
	<f a="cl:args">
		<c path="String"/>
		<t path="haxe.extern.Rest"><d/></t>
		<d/>
	</f>
	<haxe_doc>Generate `new cl(...args)` expression.</haxe_doc>
</construct></overloads>
		</construct>
		<instanceof public="1" set="method" static="1">
			<f a="v:cl">
				<d/>
				<x path="Class"><d/></x>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `v instanceof cl` expression.</haxe_doc>
		</instanceof>
		<typeof public="1" set="method" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Generate `typeof o` expression.</haxe_doc>
		</typeof>
		<strictEq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a === b` expression.</haxe_doc>
		</strictEq>
		<strictNeq public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Genearte `a !== b` expression.</haxe_doc>
		</strictNeq>
		<delete public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
			<overloads><delete public="1" set="method">
	<f a="o:f">
		<d/>
		<x path="Int"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>Generate `delete o[f]` expression.</haxe_doc>
</delete></overloads>
		</delete>
		<field public="1" set="method" static="1">
			<f a="o:f">
				<d/>
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Generate `o.f` expression, if `f` is a constant string,
		or `o[f]` if it's any other expression.</haxe_doc>
		</field>
		<haxe_doc>Generate JavaScript syntax not directly supported by Haxe.
	Use only at low-level when specific target-specific code-generation is required.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":noClosure"/>
		</meta>
	</class>
	<class path="js.lib.Date" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Date.hx" extern="1">
		<fromHaxeDate public="1" get="inline" set="null" line="40" static="1">
			<f a="date">
				<t path="_Date.HaxeDate"/>
				<c path="js.lib.Date"/>
			</f>
			<haxe_doc>Cast Haxe's Date to js.lib.Date.</haxe_doc>
		</fromHaxeDate>
		<toHaxeDate public="1" get="inline" set="null" line="47" static="1">
			<f a="date">
				<c path="js.lib.Date"/>
				<t path="_Date.HaxeDate"/>
			</f>
			<haxe_doc>Cast js.lib.Date to Haxe's Date.</haxe_doc>
		</toHaxeDate>
		<now public="1" set="method" static="1">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value corresponding to the current time - the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC, with leap seconds ignored</haxe_doc>
		</now>
		<parse public="1" set="method" static="1">
			<f a="str">
				<c path="String"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Parses a string representation of a date and returns the number of milliseconds since 1 January, 1970, 00:00:00, UTC, with leap seconds ignored.</haxe_doc>
		</parse>
		<UTC public="1" set="method" static="1">
			<f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Returns the number of milliseconds since January 1, 1970, 00:00:00 UTC, with leap seconds ignored.</haxe_doc>
		</UTC>
		<getDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the month (1-31) for the specified date according to local time.</haxe_doc>
		</getDate>
		<getDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) for the specified date according to local time.</haxe_doc>
		</getDay>
		<getFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) of the specified date according to local time.</haxe_doc>
		</getFullYear>
		<getHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hour (0-23) in the specified date according to local time.</haxe_doc>
		</getHours>
		<getMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to local time.</haxe_doc>
		</getMilliseconds>
		<getMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to local time.</haxe_doc>
		</getMinutes>
		<getMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to local time.</haxe_doc>
		</getMonth>
		<getSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to local time.</haxe_doc>
		</getSeconds>
		<getTime public="1" set="method">
			<f a=""><x path="Float"/></f>
			<haxe_doc>Returns the numeric value of the specified date as the number of milliseconds since January 1, 1970, 00:00:00 UTC (negative for prior times).</haxe_doc>
		</getTime>
		<getTimezoneOffset public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the time-zone offset in minutes for the current locale.</haxe_doc>
		</getTimezoneOffset>
		<getUTCDate public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day (date) of the month (1-31) in the specified date according to universal time.</haxe_doc>
		</getUTCDate>
		<getUTCDay public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the day of the week (0-6) in the specified date according to universal time.</haxe_doc>
		</getUTCDay>
		<getUTCFullYear public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the year (4 digits for 4-digit years) in the specified date according to universal time.</haxe_doc>
		</getUTCFullYear>
		<getUTCHours public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the hours (0-23) in the specified date according to universal time.</haxe_doc>
		</getUTCHours>
		<getUTCMilliseconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the milliseconds (0-999) in the specified date according to universal time.</haxe_doc>
		</getUTCMilliseconds>
		<getUTCMinutes public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the minutes (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCMinutes>
		<getUTCMonth public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the month (0-11) in the specified date according to universal time.</haxe_doc>
		</getUTCMonth>
		<getUTCSeconds public="1" set="method">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Returns the seconds (0-59) in the specified date according to universal time.</haxe_doc>
		</getUTCSeconds>
		<setDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to local time.</haxe_doc>
		</setDate>
		<setFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to local time.</haxe_doc>
		</setFullYear>
		<setHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hours for a specified date according to local time.</haxe_doc>
		</setHours>
		<setMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to local time.</haxe_doc>
		</setMilliseconds>
		<setMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to local time.</haxe_doc>
		</setMinutes>
		<setMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to local time.</haxe_doc>
		</setMonth>
		<setSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to local time.</haxe_doc>
		</setSeconds>
		<setTime public="1" set="method">
			<f a="value">
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the Date object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC, allowing for negative numbers for times prior.</haxe_doc>
		</setTime>
		<setUTCDate public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the day of the month for a specified date according to universal time.</haxe_doc>
		</setUTCDate>
		<setUTCFullYear public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the full year (e.g. 4 digits for 4-digit years) for a specified date according to universal time.</haxe_doc>
		</setUTCFullYear>
		<setUTCHours public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the hour for a specified date according to universal time.</haxe_doc>
		</setUTCHours>
		<setUTCMilliseconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the milliseconds for a specified date according to universal time.</haxe_doc>
		</setUTCMilliseconds>
		<setUTCMinutes public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the minutes for a specified date according to universal time.</haxe_doc>
		</setUTCMinutes>
		<setUTCMonth public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the month for a specified date according to universal time.</haxe_doc>
		</setUTCMonth>
		<setUTCSeconds public="1" set="method">
			<f a="value">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Sets the seconds for a specified date according to universal time.</haxe_doc>
		</setUTCSeconds>
		<toDateString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "date" portion of the Date as a human-readable string.</haxe_doc>
		</toDateString>
		<toISOString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string following the ISO 8601 Extended Format.</haxe_doc>
		</toISOString>
		<toJSON public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the Date using toISOString(). Intended for use by JSON.stringify().</haxe_doc>
		</toJSON>
		<toLocaleDateString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleDateString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the date portion of this date based on system settings.</haxe_doc>
</toLocaleDateString></overloads>
		</toLocaleDateString>
		<toLocaleFormat public="1" set="method">
			<f a="format">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts a date to a string, using a format string.</haxe_doc>
		</toLocaleFormat>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
			<overloads><toLocaleString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of this date. Overrides the Object.prototype.toLocaleString() method.</haxe_doc>
</toLocaleString></overloads>
		</toLocaleString>
		<toLocaleTimeString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<d><d/></d>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
			<overloads><toLocaleTimeString public="1" set="method">
	<f a="?locales:?options">
		<c path="Array"><c path="String"/></c>
		<d><d/></d>
		<c path="String"/>
	</f>
	<haxe_doc>Returns a string with a locality sensitive representation of the time portion of this date based on system settings.</haxe_doc>
</toLocaleTimeString></overloads>
		</toLocaleTimeString>
		<toSource public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source for an equivalent Date object; you can use this value to create a new object. Overrides the Object.prototype.toSource() method.</haxe_doc>
		</toSource>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the specified Date object. Overrides the Object.prototype.toString() method.</haxe_doc>
		</toString>
		<toTimeString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the "time" portion of the Date as a human-readable string.</haxe_doc>
		</toTimeString>
		<toUTCString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Converts a date to a string using the UTC timezone.</haxe_doc>
		</toUTCString>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<overloads>
				<new public="1" set="method"><f a="value">
	<x path="Float"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="dateString">
	<c path="String"/>
	<x path="Void"/>
</f></new>
				<new public="1" set="method"><f a="year:month:?day:?hours:?minutes:?seconds:?milliseconds">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
			</overloads>
		</new>
		<haxe_doc>Creates a JavaScript Date instance that represents a single moment in time. Date objects are based on a time value that is the number of milliseconds since 1 January 1970 UTC.</haxe_doc>
		<meta><m n=":native"><e>"Date"</e></m></meta>
	</class>
	<typedef path="Map" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<class path="Math" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/Math.hx" extern="1"><meta>
	<m n=":keep"/>
	<m n=":keepInit"/>
</meta></class>
	<class path="String" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/String.hx" extern="1">
		<fromCharCode public="1" get="inline" set="null" line="43" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<charCodeAt public="1" get="inline" set="null" line="35">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<substr public="1" get="inline" set="null" line="39">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="Std" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/Std.hx">
		<string public="1" set="method" line="47" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":keepInit"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="Vscode" params="" file="src/Vscode.hx" extern="1">
		<version public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc>* The version of the editor.</haxe_doc>
		</version>
		<env public="1" set="null" static="1">
			<c path="VscodeEnv"/>
			<haxe_doc>* Namespace describing the environment the editor runs in.</haxe_doc>
		</env>
		<commands public="1" set="null" static="1">
			<c path="VscodeCommands"/>
			<haxe_doc><![CDATA[* Namespace for dealing with commands. In short, a command is a function with a
	 * unique identifier. The function is sometimes also called _command handler_.
	 *
	 * Commands can be added to the editor using the {@link commands.registerCommand registerCommand}
	 * and {@link commands.registerTextEditorCommand registerTextEditorCommand} functions. Commands
	 * can be executed {@link commands.executeCommand manually} or from a UI gesture. Those are:
	 *
	 * * palette - Use the `commands`-section in `package.json` to make a command show in
	 * the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).
	 * * keybinding - Use the `keybindings`-section in `package.json` to enable
	 * [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_customizing-shortcuts)
	 * for your extension.
	 *
	 * Commands from other extensions and from the editor itself are accessible to an extension. However,
	 * when invoking an editor command not all argument types are supported.
	 *
	 * This is a sample that registers a command handler and adds an entry for that command to the palette. First
	 * register a command handler with the identifier `extension.sayHello`.
	 * ```javascript
	 * commands.registerCommand('extension.sayHello', () => {
	 * 	window.showInformationMessage('Hello World!');
	 * });
	 * ```
	 * Second, bind the command identifier to a title under which it will show in the palette (`package.json`).
	 * ```json
	 * {
	 * 	"contributes": {
	 * 		"commands": [{
	 * 			"command": "extension.sayHello",
	 * 			"title": "Hello World"
	 * 		}]
	 * 	}
	 * }
	 * ```]]></haxe_doc>
		</commands>
		<window public="1" set="null" static="1">
			<c path="VscodeWindow"/>
			<haxe_doc>* Namespace for dealing with the current window of the editor. That is visible
	 * and active editors, as well as, UI elements to show messages, selections, and
	 * asking for user input.</haxe_doc>
		</window>
		<workspace public="1" set="null" static="1">
			<c path="VscodeWorkspace"/>
			<haxe_doc>* Namespace for dealing with the current workspace. A workspace is the collection of one
	 * or more folders that are opened in an editor window (instance).
	 *
	 * It is also possible to open an editor without a workspace. For example, when you open a
	 * new editor window by selecting a file from your platform's File menu, you will not be
	 * inside a workspace. In this mode, some of the editor's capabilities are reduced but you can
	 * still open text files and edit them.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces.
	 *
	 * The workspace offers support for {@link workspace.createFileSystemWatcher listening} to fs
	 * events and for {@link workspace.findFiles finding} files. Both perform well and run _outside_
	 * the editor-process so that they should be always used instead of nodejs-equivalents.</haxe_doc>
		</workspace>
		<languages public="1" set="null" static="1">
			<c path="VscodeLanguages"/>
			<haxe_doc><![CDATA[* Namespace for participating in language-specific editor [features](https://code.visualstudio.com/docs/editor/editingevolved),
	 * like IntelliSense, code actions, diagnostics etc.
	 *
	 * Many programming languages exist and there is huge variety in syntaxes, semantics, and paradigms. Despite that, features
	 * like automatic word-completion, code navigation, or code checking have become popular across different tools for different
	 * programming languages.
	 *
	 * The editor provides an API that makes it simple to provide such common features by having all UI and actions already in place and
	 * by allowing you to participate by providing data only. For instance, to contribute a hover all you have to do is provide a function
	 * that can be called with a {@link TextDocument} and a {@link Position} returning hover info. The rest, like tracking the
	 * mouse, positioning the hover, keeping the hover stable etc. is taken care of by the editor.
	 *
	 * ```javascript
	 * languages.registerHoverProvider('javascript', {
	 * 	provideHover(document, position, token) {
	 * 		return new Hover('I am a hover!');
	 * 	}
	 * });
	 * ```
	 *
	 * Registration is done using a {@link DocumentSelector document selector} which is either a language id, like `javascript` or
	 * a more complex {@link DocumentFilter filter} like `{ language: 'typescript', scheme: 'file' }`. Matching a document against such
	 * a selector will result in a {@link languages.match score} that is used to determine if and how a provider shall be used. When
	 * scores are equal the provider that came last wins. For features that allow full arity, like {@link languages.registerHoverProvider hover},
	 * the score is only checked to be `>0`, for other features, like {@link languages.registerCompletionItemProvider IntelliSense} the
	 * score is used for determining the order in which providers are asked to participate.]]></haxe_doc>
		</languages>
		<scm public="1" set="null" static="1"><c path="VscodeScm"/></scm>
		<debug public="1" set="null" static="1">
			<c path="VscodeDebug"/>
			<haxe_doc>* Namespace for debug functionality.</haxe_doc>
		</debug>
		<extensions public="1" set="null" static="1">
			<c path="VscodeExtensions"/>
			<haxe_doc>* Namespace for dealing with installed extensions. Extensions are represented
	 * by an {@link Extension}-interface which enables reflection on them.
	 *
	 * Extension writers can provide APIs to other extensions by returning their API public
	 * surface from the `activate`-call.
	 *
	 * ```javascript
	 * export function activate(context: vscode.ExtensionContext) {
	 * 	let api = {
	 * 		sum(a, b) {
	 * 			return a + b;
	 * 		},
	 * 		mul(a, b) {
	 * 			return a * b;
	 * 		}
	 * 	};
	 * 	// 'export' public api-surface
	 * 	return api;
	 * }
	 * ```
	 * When depending on the API of another extension add an `extensionDependencies`-entry
	 * to `package.json`, and use the {@link extensions.getExtension getExtension}-function
	 * and the {@link Extension.exports exports}-property, like below:
	 *
	 * ```javascript
	 * let mathExt = extensions.getExtension('genius.math');
	 * let importedApi = mathExt.exports;
	 *
	 * console.log(importedApi.mul(42, 1));
	 * ```</haxe_doc>
		</extensions>
		<tasks public="1" set="null" static="1">
			<c path="VscodeTasks"/>
			<haxe_doc>* Namespace for tasks functionality.</haxe_doc>
		</tasks>
		<comments public="1" set="null" static="1"><c path="VscodeComments"/></comments>
		<authentication public="1" set="null" static="1">
			<c path="VscodeAuthentication"/>
			<haxe_doc>* Namespace for authentication.</haxe_doc>
		</authentication>
		<notebooks public="1" set="null" static="1">
			<c path="VscodeNotebooks"/>
			<haxe_doc>* Namespace for notebooks.
	 *
	 * The notebooks functionality is composed of three loosely coupled components:
	 *
	 * 1. {@link NotebookSerializer} enable the editor to open, show, and save notebooks
	 * 2. {@link NotebookController} own the execution of notebooks, e.g they create output from code cells.
	 * 3. NotebookRenderer present notebook output in the editor. They run in a separate context.</haxe_doc>
		</notebooks>
		<tests public="1" set="null" static="1">
			<c path="VscodeTests"/>
			<haxe_doc>* Namespace for testing functionality. Tests are published by registering
	 * {@link TestController} instances, then adding {@link TestItem TestItems}.
	 * Controllers may also describe how to run tests by creating one or more
	 * {@link TestRunProfile} instances.</haxe_doc>
		</tests>
		<meta><m n=":jsRequire"><e>"vscode"</e></m></meta>
	</class>
	<class path="VscodeEnv" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<appName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The application name of the editor, like 'VS Code'.</haxe_doc>
		</appName>
		<appRoot public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The application root folder from which the editor is running.
	 *
	 * *Note* that the value is the empty string when running in an
	 * environment that has no representation of an application root folder.</haxe_doc>
		</appRoot>
		<appHost public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The hosted location of the application
	 * On desktop this is 'desktop'
	 * In the web this is the specified embedder i.e. 'github.dev', 'codespaces', or 'web' if the embedder
	 * does not provide that information</haxe_doc>
		</appHost>
		<uriScheme public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The custom uri scheme the editor registers to in the operating system.</haxe_doc>
		</uriScheme>
		<language public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Represents the preferred user-language, like `de-CH`, `fr`, or `en-US`.</haxe_doc>
		</language>
		<clipboard public="1" set="null">
			<t path="vscode.Clipboard"/>
			<haxe_doc>* The system clipboard.</haxe_doc>
		</clipboard>
		<machineId public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A unique identifier for the computer.</haxe_doc>
		</machineId>
		<sessionId public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A unique identifier for the current session.
	 * Changes each time the editor is started.</haxe_doc>
		</sessionId>
		<isNewAppInstall public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Indicates that this is a fresh install of the application.
	 * `true` if within the first day of installation otherwise `false`.</haxe_doc>
		</isNewAppInstall>
		<isTelemetryEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Indicates whether the users has telemetry enabled.
	 * Can be observed to determine if the extension should send telemetry.</haxe_doc>
		</isTelemetryEnabled>
		<onDidChangeTelemetryEnabled public="1" set="null">
			<t path="vscode.Event"><x path="Bool"/></t>
			<haxe_doc>* An {@link Event} which fires when the user enabled or disables telemetry.
	 * `true` if the user has enabled telemetry or `false` if the user has disabled telemetry.</haxe_doc>
		</onDidChangeTelemetryEnabled>
		<onDidChangeShell public="1" set="null">
			<t path="vscode.Event"><c path="String"/></t>
			<haxe_doc>* An {@link Event} which fires when the default shell changes. This fires with the new
	 * shell path.</haxe_doc>
		</onDidChangeShell>
		<createTelemetryLogger public="1" set="method">
			<f a="sender:?options">
				<t path="vscode.TelemetrySender"/>
				<x path="Null"><t path="vscode.TelemetryLoggerOptions"/></x>
				<c path="vscode.TelemetryLogger"/>
			</f>
			<haxe_doc>* Creates a new {@link TelemetryLogger telemetry logger}.
	 *
	 * @param sender The telemetry sender that is used by the telemetry logger.
	 * @param options Options for the telemetry logger.
	 * @returns A new telemetry logger</haxe_doc>
		</createTelemetryLogger>
		<remoteName public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of a remote. Defined by extensions, popular samples are `wsl` for the Windows
	 * Subsystem for Linux or `ssh-remote` for remotes using a secure shell.
	 *
	 * *Note* that the value is `undefined` when there is no remote extension host but that the
	 * value is defined in all extension hosts (local and remote) in case a remote extension host
	 * exists. Use {@link Extension.extensionKind} to know if
	 * a specific extension runs remote or not.</haxe_doc>
		</remoteName>
		<shell public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The detected default shell for the extension host, this is overridden by the
	 * `terminal.integrated.defaultProfile` setting for the extension host's platform. Note that in
	 * environments that do not support a shell the value is the empty string.</haxe_doc>
		</shell>
		<uiKind public="1" set="null">
			<x path="vscode.UIKind"/>
			<haxe_doc>* The UI kind property indicates from which UI extensions
	 * are accessed from. For example, extensions could be accessed
	 * from a desktop application or a web browser.</haxe_doc>
		</uiKind>
		<openExternal public="1" set="method">
			<f a="target">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Opens a link externally using the default application. Depending on the
	 * used scheme this can be:
	 * * a browser (`http:`, `https:`)
	 * * a mail client (`mailto:`)
	 * * VSCode itself (`vscode:` from `vscode.env.uriScheme`)
	 *
	 * *Note* that {@linkcode window.showTextDocument showTextDocument} is the right
	 * way to open a text document inside the editor, not this function.
	 *
	 * @param target The uri that should be opened.
	 * @returns A promise indicating if open was successful.</haxe_doc>
		</openExternal>
		<asExternalUri public="1" set="method">
			<f a="target">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><c path="vscode.Uri"/></x>
			</f>
			<haxe_doc><![CDATA[* Resolves a uri to a form that is accessible externally.
	 *
	 * #### `http:` or `https:` scheme
	 *
	 * Resolves an *external* uri, such as a `http:` or `https:` link, from where the extension is running to a
	 * uri to the same resource on the client machine.
	 *
	 * This is a no-op if the extension is running on the client machine.
	 *
	 * If the extension is running remotely, this function automatically establishes a port forwarding tunnel
	 * from the local machine to `target` on the remote and returns a local uri to the tunnel. The lifetime of
	 * the port forwarding tunnel is managed by the editor and the tunnel can be closed by the user.
	 *
	 * *Note* that uris passed through `openExternal` are automatically resolved and you should not call `asExternalUri` on them.
	 *
	 * #### `vscode.env.uriScheme`
	 *
	 * Creates a uri that - if opened in a browser (e.g. via `openExternal`) - will result in a registered {@link UriHandler}
	 * to trigger.
	 *
	 * Extensions should not make any assumptions about the resulting uri and should not alter it in any way.
	 * Rather, extensions can e.g. use this uri in an authentication flow, by adding the uri as callback query
	 * argument to the server to authenticate to.
	 *
	 * *Note* that if the server decides to add additional query parameters to the uri (e.g. a token or secret), it
	 * will appear in the uri that is passed to the {@link UriHandler}.
	 *
	 * **Example** of an authentication flow:
	 * ```typescript
	 * vscode.window.registerUriHandler({
	 *   handleUri(uri: vscode.Uri): vscode.ProviderResult<void> {
	 *     if (uri.path === '/did-authenticate') {
	 *       console.log(uri.toString());
	 *     }
	 *   }
	 * });
	 *
	 * const callableUri = await vscode.env.asExternalUri(vscode.Uri.parse(vscode.env.uriScheme + '://my.extension/did-authenticate'));
	 * await vscode.env.openExternal(callableUri);
	 * ```
	 *
	 * *Note* that extensions should not cache the result of `asExternalUri` as the resolved uri may become invalid due to
	 * a system or user action — for example, in remote cases, a user may close a port forwarding tunnel that was opened by
	 * `asExternalUri`.
	 *
	 * #### Any other scheme
	 *
	 * Any other scheme will be handled as if the provided URI is a workspace URI. In that case, the method will return
	 * a URI which, when handled, will make the editor open the workspace.
	 *
	 * @returns A uri that can be used on the client machine.]]></haxe_doc>
		</asExternalUri>
		<logLevel public="1" set="null">
			<x path="vscode.LogLevel"/>
			<haxe_doc>* The current log level of the editor.</haxe_doc>
		</logLevel>
		<onDidChangeLogLevel public="1" set="null">
			<t path="vscode.Event"><x path="vscode.LogLevel"/></t>
			<haxe_doc>* An {@link Event} which fires when the log level of the editor changes.</haxe_doc>
		</onDidChangeLogLevel>
		<haxe_doc>* Namespace describing the environment the editor runs in.</haxe_doc>
	</class>
	<class path="VscodeCommands" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<registerCommand public="1" set="method">
			<f a="command:callback:?thisArg">
				<c path="String"/>
				<x path="haxe.Function"/>
				<x path="Any"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a command that can be invoked via a keyboard shortcut,
	 * a menu item, an action, or directly.
	 *
	 * Registering a command with an existing command identifier twice
	 * will cause an error.
	 *
	 * @param command A unique identifier for the command.
	 * @param callback A command handler function.
	 * @param thisArg The `this` context used when invoking the handler function.
	 * @returns Disposable which unregisters this command on disposal.</haxe_doc>
		</registerCommand>
		<registerTextEditorCommand public="1" set="method">
			<f a="command:callback:?thisArg">
				<c path="String"/>
				<f a=":">
					<t path="vscode.TextEditor"/>
					<t path="vscode.TextEditorEdit"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a text editor command that can be invoked via a keyboard shortcut,
	 * a menu item, an action, or directly.
	 *
	 * Text editor commands are different from ordinary {@link commands.registerCommand commands} as
	 * they only execute when there is an active editor when the command is called. Also, the
	 * command handler of an editor command has access to the active editor and to an
	 * {@link TextEditorEdit edit}-builder. Note that the edit-builder is only valid while the
	 * callback executes.
	 *
	 * @param command A unique identifier for the command.
	 * @param callback A command handler function with access to an {@link TextEditor editor} and an {@link TextEditorEdit edit}.
	 * @param thisArg The `this` context used when invoking the handler function.
	 * @returns Disposable which unregisters this command on disposal.</haxe_doc>
		</registerTextEditorCommand>
		<executeCommand public="1" params="T" set="method">
			<f a="command:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><x path="Any"/></t>
				<x path="js.lib.Thenable"><c path="executeCommand.T"/></x>
			</f>
			<haxe_doc>* Executes the command denoted by the given command identifier.
	 *
	 * * *Note 1:* When executing an editor command not all types are allowed to
	 * be passed as arguments. Allowed are the primitive types `string`, `boolean`,
	 * `number`, `undefined`, and `null`, as well as {@linkcode Position}, {@linkcode Range}, {@linkcode Uri} and {@linkcode Location}.
	 * * *Note 2:* There are no restrictions when executing commands that have been contributed
	 * by extensions.
	 *
	 * @param command Identifier of the command to execute.
	 * @param rest Parameters passed to the command function.
	 * @returns A thenable that resolves to the returned value of the given command. Returns `undefined` when
	 * the command handler function doesn't return anything.</haxe_doc>
		</executeCommand>
		<getCommands public="1" set="method">
			<f a="?filterInternal">
				<x path="Bool"/>
				<x path="js.lib.Thenable"><c path="Array"><c path="String"/></c></x>
			</f>
			<haxe_doc>* Retrieve the list of all available commands. Commands starting with an underscore are
	 * treated as internal commands.
	 *
	 * @param filterInternal Set `true` to not see internal commands (starting with an underscore)
	 * @returns Thenable that resolves to a list of command ids.</haxe_doc>
		</getCommands>
		<haxe_doc><![CDATA[* Namespace for dealing with commands. In short, a command is a function with a
 * unique identifier. The function is sometimes also called _command handler_.
 *
 * Commands can be added to the editor using the {@link commands.registerCommand registerCommand}
 * and {@link commands.registerTextEditorCommand registerTextEditorCommand} functions. Commands
 * can be executed {@link commands.executeCommand manually} or from a UI gesture. Those are:
 *
 * * palette - Use the `commands`-section in `package.json` to make a command show in
 * the [command palette](https://code.visualstudio.com/docs/getstarted/userinterface#_command-palette).
 * * keybinding - Use the `keybindings`-section in `package.json` to enable
 * [keybindings](https://code.visualstudio.com/docs/getstarted/keybindings#_advanced-customization)
 * for your extension.
 *
 * Commands from other extensions and from the editor itself are accessible to an extension. However,
 * when invoking an editor command not all argument types are supported.
 *
 * This is a sample that registers a command handler and adds an entry for that command to the palette. First
 * register a command handler with the identifier `extension.sayHello`.
 * ```javascript
 * commands.registerCommand('extension.sayHello', () => {
 * 	window.showInformationMessage('Hello World!');
 * });
 * ```
 * Second, bind the command identifier to a title under which it will show in the palette (`package.json`).
 * ```json
 * {
 * 	"contributes": {
 * 		"commands": [{
 * 			"command": "extension.sayHello",
 * 			"title": "Hello World"
 * 		}]
 * 	}
 * }
 * ```]]></haxe_doc>
	</class>
	<class path="VscodeWindow" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<tabGroups public="1" set="null">
			<c path="vscode.TabGroups"/>
			<haxe_doc>* Represents the grid widget within the main editor area</haxe_doc>
		</tabGroups>
		<activeTextEditor public="1">
			<x path="Null"><t path="vscode.TextEditor"/></x>
			<haxe_doc>* The currently active editor or `undefined`. The active editor is the one
	 * that currently has focus or, when none has focus, the one that has changed
	 * input most recently.</haxe_doc>
		</activeTextEditor>
		<visibleTextEditors public="1">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TextEditor"/></x>
			<haxe_doc>* The currently visible editors or an empty array.</haxe_doc>
		</visibleTextEditors>
		<onDidChangeActiveTextEditor public="1" set="null">
			<t path="vscode.Event"><x path="Null"><t path="vscode.TextEditor"/></x></t>
			<haxe_doc>* An {@link Event} which fires when the {@link window.activeTextEditor active editor}
	 * has changed. *Note* that the event also fires when the active editor changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveTextEditor>
		<onDidChangeVisibleTextEditors public="1" set="null">
			<t path="vscode.Event"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.TextEditor"/></x></t>
			<haxe_doc>* An {@link Event} which fires when the array of {@link window.visibleTextEditors visible editors}
	 * has changed.</haxe_doc>
		</onDidChangeVisibleTextEditors>
		<onDidChangeTextEditorSelection public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorSelectionChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the selection in an editor has changed.</haxe_doc>
		</onDidChangeTextEditorSelection>
		<onDidChangeTextEditorVisibleRanges public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorVisibleRangesChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the visible ranges of an editor has changed.</haxe_doc>
		</onDidChangeTextEditorVisibleRanges>
		<onDidChangeTextEditorOptions public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorOptionsChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the options of an editor have changed.</haxe_doc>
		</onDidChangeTextEditorOptions>
		<onDidChangeTextEditorViewColumn public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextEditorViewColumnChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the view column of an editor has changed.</haxe_doc>
		</onDidChangeTextEditorViewColumn>
		<visibleNotebookEditors public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookEditor"/></x>
			<haxe_doc>* The currently visible {@link NotebookEditor notebook editors} or an empty array.</haxe_doc>
		</visibleNotebookEditors>
		<onDidChangeVisibleNotebookEditors public="1" set="null">
			<t path="vscode.Event"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookEditor"/></x></t>
			<haxe_doc>* An {@link Event} which fires when the {@link window.visibleNotebookEditors visible notebook editors}
	 * has changed.</haxe_doc>
		</onDidChangeVisibleNotebookEditors>
		<activeNotebookEditor public="1" set="null">
			<x path="Null"><t path="vscode.NotebookEditor"/></x>
			<haxe_doc>* The currently active {@link NotebookEditor notebook editor} or `undefined`. The active editor is the one
	 * that currently has focus or, when none has focus, the one that has changed
	 * input most recently.</haxe_doc>
		</activeNotebookEditor>
		<onDidChangeActiveNotebookEditor public="1" set="null">
			<t path="vscode.Event"><x path="Null"><t path="vscode.NotebookEditor"/></x></t>
			<haxe_doc>* An {@link Event} which fires when the {@link window.activeNotebookEditor active notebook editor}
	 * has changed. *Note* that the event also fires when the active editor changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveNotebookEditor>
		<onDidChangeNotebookEditorSelection public="1" set="null">
			<t path="vscode.Event"><t path="vscode.NotebookEditorSelectionChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the {@link NotebookEditor.selections notebook editor selections}
	 * have changed.</haxe_doc>
		</onDidChangeNotebookEditorSelection>
		<onDidChangeNotebookEditorVisibleRanges public="1" set="null">
			<t path="vscode.Event"><t path="vscode.NotebookEditorVisibleRangesChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the {@link NotebookEditor.visibleRanges notebook editor visible ranges}
	 * have changed.</haxe_doc>
		</onDidChangeNotebookEditorVisibleRanges>
		<terminals public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Terminal"/></x>
			<haxe_doc>* The currently opened terminals or an empty array.</haxe_doc>
		</terminals>
		<activeTerminal public="1" set="null">
			<x path="Null"><t path="vscode.Terminal"/></x>
			<haxe_doc>* The currently active terminal or `undefined`. The active terminal is the one that
	 * currently has focus or most recently had focus.</haxe_doc>
		</activeTerminal>
		<onDidChangeActiveTerminal public="1" set="null">
			<x path="Null"><t path="vscode.Event"><t path="vscode.Terminal"/></t></x>
			<haxe_doc>* An {@link Event} which fires when the {@link window.activeTerminal active terminal}
	 * has changed. *Note* that the event also fires when the active terminal changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveTerminal>
		<onDidOpenTerminal public="1" set="null">
			<t path="vscode.Event"><t path="vscode.Terminal"/></t>
			<haxe_doc>* An {@link Event} which fires when a terminal has been created, either through the
	 * {@link window.createTerminal createTerminal} API or commands.</haxe_doc>
		</onDidOpenTerminal>
		<onDidCloseTerminal public="1" set="null">
			<t path="vscode.Event"><t path="vscode.Terminal"/></t>
			<haxe_doc>* An {@link Event} which fires when a terminal is disposed.</haxe_doc>
		</onDidCloseTerminal>
		<onDidChangeTerminalState public="1" set="null">
			<t path="vscode.Event"><t path="vscode.Terminal"/></t>
			<haxe_doc>* An {@link Event} which fires when a {@link Terminal.state terminal's state} has changed.</haxe_doc>
		</onDidChangeTerminalState>
		<onDidChangeTerminalShellIntegration public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TerminalShellIntegrationChangeEvent"/></t>
			<haxe_doc>* Fires when shell integration activates or one of its properties changes in a terminal.</haxe_doc>
		</onDidChangeTerminalShellIntegration>
		<onDidStartTerminalShellExecution public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TerminalShellExecutionStartEvent"/></t>
			<haxe_doc>* This will be fired when a terminal command is started. This event will fire only when
	 * [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) is
	 * activated for the terminal.</haxe_doc>
		</onDidStartTerminalShellExecution>
		<onDidEndTerminalShellExecution public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TerminalShellExecutionEndEvent"/></t>
			<haxe_doc>* This will be fired when a terminal command is ended. This event will fire only when
	 * [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration) is
	 * activated for the terminal.</haxe_doc>
		</onDidEndTerminalShellExecution>
		<state public="1" set="null">
			<t path="vscode.WindowState"/>
			<haxe_doc>* Represents the current window's state.</haxe_doc>
		</state>
		<onDidChangeWindowState public="1" set="null">
			<t path="vscode.Event"><t path="vscode.WindowState"/></t>
			<haxe_doc>* An {@link Event} which fires when the focus or activity state of the current window
	 * changes. The value of the event represents whether the window is focused.</haxe_doc>
		</onDidChangeWindowState>
		<showTextDocument public="1" set="method">
			<f a="document:?column:?preserveFocus">
				<c path="vscode.TextDocument"/>
				<x path="vscode.ViewColumn"/>
				<x path="Bool"/>
				<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
			</f>
			<haxe_doc>* Show the given document in a text editor. A {@link ViewColumn column} can be provided
	 * to control where the editor is being shown. Might change the {@link window.activeTextEditor active editor}.
	 *
	 * @param document A text document to be shown.
	 * @param column A view column in which the {@link TextEditor editor} should be shown. The default is the {@link ViewColumn.Active active}.
	 * Columns that do not exist will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}. Use {@linkcode ViewColumn.Beside}
	 * to open the editor to the side of the currently active one.
	 * @param preserveFocus When `true` the editor will not take focus.
	 * @returns A promise that resolves to an {@link TextEditor editor}.</haxe_doc>
			<overloads>
				<showTextDocument public="1" set="method">
					<f a="document:?options">
						<c path="vscode.TextDocument"/>
						<x path="Null"><t path="vscode.TextDocumentShowOptions"/></x>
						<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
					</f>
					<haxe_doc>* Show the given document in a text editor. {@link TextDocumentShowOptions Options} can be provided
	 * to control options of the editor is being shown. Might change the {@link window.activeTextEditor active editor}.
	 *
	 * @param document A text document to be shown.
	 * @param options {@link TextDocumentShowOptions Editor options} to configure the behavior of showing the {@link TextEditor editor}.
	 * @returns A promise that resolves to an {@link TextEditor editor}.</haxe_doc>
				</showTextDocument>
				<showTextDocument public="1" set="method">
					<f a="uri:?options">
						<c path="vscode.Uri"/>
						<x path="Null"><t path="vscode.TextDocumentShowOptions"/></x>
						<x path="js.lib.Thenable"><t path="vscode.TextEditor"/></x>
					</f>
					<haxe_doc><![CDATA[* A short-hand for `openTextDocument(uri).then(document => showTextDocument(document, options))`.
	 *
	 * @see {@link workspace.openTextDocument}
	 *
	 * @param uri A resource identifier.
	 * @param options {@link TextDocumentShowOptions Editor options} to configure the behavior of showing the {@link TextEditor editor}.
	 * @returns A promise that resolves to an {@link TextEditor editor}.]]></haxe_doc>
				</showTextDocument>
			</overloads>
		</showTextDocument>
		<showNotebookDocument public="1" set="method">
			<f a="document:?options">
				<t path="vscode.NotebookDocument"/>
				<x path="Null"><t path="vscode.NotebookDocumentShowOptions"/></x>
				<x path="js.lib.Thenable"><t path="vscode.NotebookEditor"/></x>
			</f>
			<haxe_doc>* Show the given {@link NotebookDocument} in a {@link NotebookEditor notebook editor}.
	 *
	 * @param document A text document to be shown.
	 * @param options {@link NotebookDocumentShowOptions Editor options} to configure the behavior of showing the {@link NotebookEditor notebook editor}.
	 *
	 * @returns A promise that resolves to an {@link NotebookEditor notebook editor}.</haxe_doc>
		</showNotebookDocument>
		<createTextEditorDecorationType public="1" set="method">
			<f a="options">
				<t path="vscode.DecorationRenderOptions"/>
				<t path="vscode.TextEditorDecorationType"/>
			</f>
			<haxe_doc>* Create a TextEditorDecorationType that can be used to add decorations to text editors.
	 *
	 * @param options Rendering options for the decoration type.
	 * @returns A new decoration type instance.</haxe_doc>
		</createTextEditorDecorationType>
		<showInformationMessage public="1" params="T" set="method">
			<f a="message:items">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="showInformationMessage.T"/></t>
				<x path="js.lib.Thenable"><x path="Null"><c path="showInformationMessage.T"/></x></x>
			</f>
			<haxe_doc>* Show an information message to users. Optionally provide an array of items which will be presented as
	 * clickable buttons.
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads><showInformationMessage public="1" params="T" set="method">
	<f a="message:options:items">
		<c path="String"/>
		<t path="vscode.MessageOptions"/>
		<t path="haxe.extern.Rest"><c path="showInformationMessage.T"/></t>
		<x path="js.lib.Thenable"><x path="Null"><c path="showInformationMessage.T"/></x></x>
	</f>
	<haxe_doc>* Show an information message to users. Optionally provide an array of items which will be presented as
	 * clickable buttons.
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
</showInformationMessage></overloads>
		</showInformationMessage>
		<showWarningMessage public="1" set="method">
			<f a="message:items">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Show a warning message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads>
				<showWarningMessage public="1" params="T" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<t path="haxe.extern.Rest"><c path="showWarningMessage.T"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="showWarningMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
				<showWarningMessage public="1" params="T" set="method">
					<f a="message:items">
						<c path="String"/>
						<t path="haxe.extern.Rest"><c path="showWarningMessage.T"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="showWarningMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
				<showWarningMessage public="1" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<t path="haxe.extern.Rest"><c path="String"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
					</f>
					<haxe_doc>* Show a warning message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showWarningMessage>
			</overloads>
		</showWarningMessage>
		<showErrorMessage public="1" set="method">
			<f a="message:items">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Show an error message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
			<overloads>
				<showErrorMessage public="1" params="T" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<t path="haxe.extern.Rest"><c path="showErrorMessage.T"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="showErrorMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
				<showErrorMessage public="1" params="T" set="method">
					<f a="message:items">
						<c path="String"/>
						<t path="haxe.extern.Rest"><c path="showErrorMessage.T"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="showErrorMessage.T"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
				<showErrorMessage public="1" set="method">
					<f a="message:options:items">
						<c path="String"/>
						<t path="vscode.MessageOptions"/>
						<t path="haxe.extern.Rest"><c path="String"/></t>
						<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
					</f>
					<haxe_doc>* Show an error message.
	 *
	 * @see {@link window.showInformationMessage showInformationMessage}
	 *
	 * @param message The message to show.
	 * @param options Configures the behaviour of the message.
	 * @param items A set of items that will be rendered as actions in the message.
	 * @returns A thenable that resolves to the selected item or `undefined` when being dismissed.</haxe_doc>
				</showErrorMessage>
			</overloads>
		</showErrorMessage>
		<showQuickPick public="1" set="method">
			<f a="items:?options:?token">
				<x path="haxe.extern.EitherType">
					<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
					<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><c path="String"/></x></x>
				</x>
				<x path="Null"><t path="vscode.QuickPickOptions"/></x>
				<x path="Null"><t path="vscode.CancellationToken"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Shows a selection list allowing multiple selections.
	 *
	 * @param items An array of strings, or a promise that resolves to an array of strings.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @returns A promise that resolves to the selected items or `undefined`.</haxe_doc>
			<overloads><showQuickPick public="1" params="T" set="method">
	<f a="items:?options:?token">
		<x path="haxe.extern.EitherType">
			<x path="haxe.ds.ReadOnlyArray"><c path="showQuickPick.T"/></x>
			<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><c path="showQuickPick.T"/></x></x>
		</x>
		<x path="Null"><t path="vscode.QuickPickOptions"/></x>
		<x path="Null"><t path="vscode.CancellationToken"/></x>
		<x path="js.lib.Thenable"><x path="Null"><c path="showQuickPick.T"/></x></x>
	</f>
	<haxe_doc>* Shows a selection list allowing multiple selections.
	 *
	 * @param items An array of items, or a promise that resolves to an array of items.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @returns A promise that resolves to the selected items or `undefined`.</haxe_doc>
</showQuickPick></overloads>
		</showQuickPick>
		<showQuickPickMany public="1" params="T" get="inline" set="null" line="835">
			<f a="items:?options:?token">
				<x path="haxe.extern.EitherType">
					<x path="haxe.ds.ReadOnlyArray"><c path="showQuickPickMany.T"/></x>
					<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><c path="showQuickPickMany.T"/></x></x>
				</x>
				<x path="Null"><t path="vscode.QuickPickOptions"/></x>
				<x path="Null"><t path="vscode.CancellationToken"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="Array"><c path="showQuickPickMany.T"/></c></x></x>
			</f>
			<haxe_doc>* Shows a selection list allowing multiple selections.
	 *
	 * @param items An array of items, or a promise that resolves to an array of items.
	 * @param options Configures the behavior of the selection list.
	 * @param token A token that can be used to signal cancellation.
	 * @returns A promise that resolves to the selected items or `undefined`.</haxe_doc>
		</showQuickPickMany>
		<showWorkspaceFolderPick public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="vscode.WorkspaceFolderPickOptions"/></x>
				<x path="js.lib.Thenable"><x path="Null"><t path="vscode.WorkspaceFolder"/></x></x>
			</f>
			<haxe_doc>* Shows a selection list of {@link workspace.workspaceFolders workspace folders} to pick from.
	 * Returns `undefined` if no folder is open.
	 *
	 * @param options Configures the behavior of the workspace folder list.
	 * @returns A promise that resolves to the workspace folder or `undefined`.</haxe_doc>
		</showWorkspaceFolderPick>
		<showOpenDialog public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="vscode.OpenDialogOptions"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="Array"><c path="vscode.Uri"/></c></x></x>
			</f>
			<haxe_doc>* Shows a file open dialog to the user which allows to select a file
	 * for opening-purposes.
	 *
	 * @param options Options that control the dialog.
	 * @returns A promise that resolves to the selected resources or `undefined`.</haxe_doc>
		</showOpenDialog>
		<showSaveDialog public="1" set="method">
			<f a="?options">
				<x path="Null"><t path="vscode.SaveDialogOptions"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="vscode.Uri"/></x></x>
			</f>
			<haxe_doc>* Shows a file save dialog to the user which allows to select a file
	 * for saving-purposes.
	 *
	 * @param options Options that control the dialog.
	 * @returns A promise that resolves to the selected resource or `undefined`.</haxe_doc>
		</showSaveDialog>
		<showInputBox public="1" set="method">
			<f a="?options:?token">
				<x path="Null"><t path="vscode.InputBoxOptions"/></x>
				<x path="Null"><t path="vscode.CancellationToken"/></x>
				<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
			</f>
			<haxe_doc>* Opens an input box to ask the user for input.
	 *
	 * The returned value will be undefined if the input box was canceled (e.g. pressing ESC). Otherwise the
	 * returned value will be the string typed by the user or an empty string if the user did not type
	 * anything but dismissed the input box with OK.
	 *
	 * @param options Configures the behavior of the input box.
	 * @param token A token that can be used to signal cancellation.
	 * @returns A promise that resolves to a string the user provided or to `undefined` in case of dismissal.</haxe_doc>
		</showInputBox>
		<createQuickPick public="1" params="T" set="method">
			<f a=""><t path="vscode.QuickPick"><c path="createQuickPick.T"/></t></f>
			<haxe_doc>* Creates a {@link QuickPick} to let the user pick an item from a list
	 * of items of type T.
	 *
	 * Note that in many cases the more convenient {@link window.showQuickPick}
	 * is easier to use. {@link window.createQuickPick} should be used
	 * when {@link window.showQuickPick} does not offer the required flexibility.
	 *
	 * @returns A new {@link QuickPick}.</haxe_doc>
		</createQuickPick>
		<createInputBox public="1" set="method">
			<f a=""><t path="vscode.InputBox"/></f>
			<haxe_doc>* Creates a {@link InputBox} to let the user enter some text input.
	 *
	 * Note that in many cases the more convenient {@link window.showInputBox}
	 * is easier to use. {@link window.createInputBox} should be used
	 * when {@link window.showInputBox} does not offer the required flexibility.
	 *
	 * @returns A new {@link InputBox}.</haxe_doc>
		</createInputBox>
		<createOutputChannel public="1" set="method">
			<f a="name:?languageId">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.OutputChannel"/>
			</f>
			<haxe_doc>* Creates a new {@link OutputChannel output channel} with the given name and language id
	 * If language id is not provided, then **Log** is used as default language id.
	 *
	 * You can access the visible or active output channel as a {@link TextDocument text document} from {@link window.visibleTextEditors visible editors} or {@link window.activeTextEditor active editor}
	 * and use the language id to contribute language features like syntax coloring, code lens etc.,
	 *
	 * @param name Human-readable string which will be used to represent the channel in the UI.
	 * @param languageId The identifier of the language associated with the channel.
	 * @returns A new output channel.</haxe_doc>
			<overloads><createOutputChannel public="1" set="method">
	<f a="name:options">
		<c path="String"/>
		<a><log><x path="Bool"/></log></a>
		<c path="vscode.LogOutputChannel"/>
	</f>
	<haxe_doc>* Creates a new {@link LogOutputChannel log output channel} with the given name.
	 *
	 * @param name Human-readable string which will be used to represent the channel in the UI.
	 * @param options Options for the log output channel.
	 * @returns A new log output channel.</haxe_doc>
</createOutputChannel></overloads>
		</createOutputChannel>
		<createWebviewPanel public="1" set="method">
			<f a="viewType:title:showOptions:?options">
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<x path="vscode.ViewColumn"/>
					<a>
						<viewColumn><x path="vscode.ViewColumn"/></viewColumn>
						<preserveFocus>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</preserveFocus>
					</a>
				</x>
				<x path="Null"><a>
	<retainContextWhenHidden set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls if the webview panel's content (iframe) is kept around even when the panel
	 * is no longer visible.
	 *
	 * Normally the webview panel's html context is created when the panel becomes visible
	 * and destroyed when it is hidden. Extensions that have complex state
	 * or UI can set the `retainContextWhenHidden` to make the editor keep the webview
	 * context around, even when the webview moves to a background tab. When a webview using
	 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
	 * When the panel becomes visible again, the context is automatically restored
	 * in the exact same state it was in originally. You cannot send messages to a
	 * hidden webview, even with `retainContextWhenHidden` enabled.
	 *
	 * `retainContextWhenHidden` has a high memory overhead and should only be used if
	 * your panel's context cannot be quickly saved and restored.</haxe_doc>
	</retainContextWhenHidden>
	<portMapping set="null">
		<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WebviewPortMapping"/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Mappings of localhost ports used inside the webview.
	 *
	 * Port mapping allow webviews to transparently define how localhost ports are resolved. This can be used
	 * to allow using a static localhost port inside the webview that is resolved to random port that a service is
	 * running on.
	 *
	 * If a webview accesses localhost content, we recommend that you specify port mappings even if
	 * the `webviewPort` and `extensionHostPort` ports are the same.
	 *
	 * *Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)
	 * cannot be mapped to another port.</haxe_doc>
	</portMapping>
	<localResourceRoots set="null">
		<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Root paths from which the webview can load local (filesystem) resources using the `vscode-resource:` scheme.
	 *
	 * Default to the root folders of the current workspace plus the extension's install directory.
	 *
	 * Pass in an empty array to disallow access to any local resources.</haxe_doc>
	</localResourceRoots>
	<enableScripts set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls whether scripts are enabled in the webview content or not.
	 *
	 * Defaults to false (scripts-disabled).</haxe_doc>
	</enableScripts>
	<enableForms set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls whether forms are enabled in the webview content or not.
	 *
	 * Defaults to true if {@link WebviewOptions.enableScripts scripts are enabled}. Otherwise defaults to false.
	 * Explicitly setting this property to either true or false overrides the default.</haxe_doc>
	</enableForms>
	<enableFindWidget set="null">
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls if the find widget is enabled in the panel.
	 *
	 * Defaults to `false`.</haxe_doc>
	</enableFindWidget>
	<enableCommandUris set="null">
		<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
</x></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* Controls whether command uris are enabled in webview content or not.
	 *
	 * Defaults to `false` (command uris are disabled).
	 *
	 * If you pass in an array, only the commands in the array are allowed.</haxe_doc>
	</enableCommandUris>
</a></x>
				<t path="vscode.WebviewPanel"/>
			</f>
			<haxe_doc>* Create and show a new webview panel.
	 *
	 * @param viewType Identifies the type of the webview panel.
	 * @param title Title of the panel.
	 * @param showOptions Where to show the webview in the editor. If preserveFocus is set, the new webview will not take focus.
	 * @param options Settings for the new panel.
	 *
	 * @returns New webview panel.</haxe_doc>
		</createWebviewPanel>
		<setStatusBarMessage public="1" set="method">
			<f a="text:hideAfterTimeout">
				<c path="String"/>
				<x path="Float"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar {@link window.createStatusBarItem items}.
	 *
	 * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.
	 * @param hideAfterTimeout Timeout in milliseconds after which the message will be disposed.
	 * @returns A disposable which hides the status bar message.</haxe_doc>
			<overloads>
				<setStatusBarMessage public="1" set="method">
					<f a="text">
						<c path="String"/>
						<c path="vscode.Disposable"/>
					</f>
					<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar {@link window.createStatusBarItem items}.
	 *
	 * *Note* that status bar messages stack and that they must be disposed when no
	 * longer used.
	 *
	 * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.
	 * @returns A disposable which hides the status bar message.</haxe_doc>
				</setStatusBarMessage>
				<setStatusBarMessage public="1" set="method">
					<f a="text:hideWhenDone">
						<c path="String"/>
						<x path="js.lib.Thenable"><d/></x>
						<c path="vscode.Disposable"/>
					</f>
					<haxe_doc>* Set a message to the status bar. This is a short hand for the more powerful
	 * status bar {@link window.createStatusBarItem items}.
	 *
	 * @param text The message to show, supports icon substitution as in status bar {@link StatusBarItem.text items}.
	 * @param hideWhenDone Thenable on which completion (resolve or reject) the message will be disposed.
	 * @returns A disposable which hides the status bar message.</haxe_doc>
				</setStatusBarMessage>
			</overloads>
		</setStatusBarMessage>
		<withScmProgress public="1" params="R" set="method">
			<f a="task">
				<f a="">
					<t path="vscode.Progress"><x path="Float"/></t>
					<x path="js.lib.Thenable"><c path="withScmProgress.R"/></x>
				</f>
				<x path="js.lib.Thenable"><c path="withScmProgress.R"/></x>
			</f>
			<meta><m n=":deprecated"><e>"Use `withProgress` instead."</e></m></meta>
			<haxe_doc>* Show progress in the Source Control viewlet while running the given callback and while
	 * its returned promise isn't resolve or rejected.
	 *
	 * @deprecated Use `withProgress` instead.
	 *
	 * @param task A callback returning a promise. Progress increments can be reported with
	 * the provided {@link Progress}-object.
	 * @returns The thenable the task did return.</haxe_doc>
		</withScmProgress>
		<withProgress public="1" params="R" set="method">
			<f a="options:task">
				<t path="vscode.ProgressOptions"/>
				<f a=":">
					<t path="vscode.Progress"><a>
	<message>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</message>
	<increment>
		<x path="Null"><x path="Float"/></x>
		<meta><m n=":optional"/></meta>
	</increment>
</a></t>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><c path="withProgress.R"/></x>
				</f>
				<x path="js.lib.Thenable"><c path="withProgress.R"/></x>
			</f>
			<haxe_doc>* Show progress in the editor. Progress is shown while running the given callback
	 * and while the promise it returned isn't resolved nor rejected. The location at which
	 * progress should show (and other details) is defined via the passed {@linkcode ProgressOptions}.
	 *
	 * @param options A {@linkcode ProgressOptions}-object describing the options to use for showing progress, like its location
	 * @param task A callback returning a promise. Progress state can be reported with
	 * the provided {@link Progress}-object.
	 *
	 * To report discrete progress, use `increment` to indicate how much work has been completed. Each call with
	 * a `increment` value will be summed up and reflected as overall progress until 100% is reached (a value of
	 * e.g. `10` accounts for `10%` of work done).
	 * Note that currently only `ProgressLocation.Notification` is capable of showing discrete progress.
	 *
	 * To monitor if the operation has been cancelled by the user, use the provided {@linkcode CancellationToken}.
	 * Note that currently only `ProgressLocation.Notification` is supporting to show a cancel button to cancel the
	 * long running operation.
	 *
	 * @returns The thenable the task-callback returned.</haxe_doc>
		</withProgress>
		<createStatusBarItem public="1" set="method">
			<f a="id:?alignment:?priority">
				<c path="String"/>
				<x path="vscode.StatusBarAlignment"/>
				<x path="Float"/>
				<t path="vscode.StatusBarItem"/>
			</f>
			<haxe_doc>* Creates a status bar {@link StatusBarItem item}.
	 *
	 * @param id The identifier of the item. Must be unique within the extension.
	 * @param alignment The alignment of the item.
	 * @param priority The priority of the item. Higher values mean the item should be shown more to the left.
	 * @returns A new status bar item.</haxe_doc>
			<overloads><createStatusBarItem public="1" set="method">
	<f a="?alignment:?priority">
		<x path="vscode.StatusBarAlignment"/>
		<x path="Float"/>
		<t path="vscode.StatusBarItem"/>
	</f>
	<haxe_doc>* Creates a status bar {@link StatusBarItem item}.
	 *
	 * @see {@link createStatusBarItem} for creating a status bar item with an identifier.
	 * @param alignment The alignment of the item.
	 * @param priority The priority of the item. Higher values mean the item should be shown more to the left.
	 * @returns A new status bar item.</haxe_doc>
</createStatusBarItem></overloads>
		</createStatusBarItem>
		<createTerminal public="1" set="method">
			<f a="?name:?shellPath:?shellArgs">
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
					<c path="String"/>
				</x>
				<t path="vscode.Terminal"/>
			</f>
			<haxe_doc>* Creates a {@link Terminal} with a backing shell process. The cwd of the terminal will be the workspace
	 * directory if it exists.
	 *
	 * @param name Optional human-readable string which will be used to represent the terminal in the UI.
	 * @param shellPath Optional path to a custom shell executable to be used in the terminal.
	 * @param shellArgs Optional args for the custom shell executable. A string can be used on Windows only which
	 * allows specifying shell args in
	 * [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).
	 * @returns A new Terminal.
	 * @throws When running in an environment where a new process cannot be started.</haxe_doc>
			<overloads>
				<createTerminal public="1" set="method">
					<f a="options">
						<t path="vscode.ExtensionTerminalOptions"/>
						<t path="vscode.Terminal"/>
					</f>
					<haxe_doc>* Creates a {@link Terminal} where an extension controls its input and output.
	 *
	 * @param options An {@link ExtensionTerminalOptions} object describing
	 * the characteristics of the new terminal.
	 * @returns A new Terminal.</haxe_doc>
				</createTerminal>
				<createTerminal public="1" set="method">
					<f a="options">
						<t path="vscode.TerminalOptions"/>
						<t path="vscode.Terminal"/>
					</f>
					<haxe_doc>* Creates a {@link Terminal} with a backing shell process.
	 *
	 * @param options A TerminalOptions object describing the characteristics of the new terminal.
	 * @returns A new Terminal.
	 * @throws When running in an environment where a new process cannot be started.</haxe_doc>
				</createTerminal>
			</overloads>
		</createTerminal>
		<registerTreeDataProvider public="1" params="T" set="method">
			<f a="viewId:treeDataProvider">
				<c path="String"/>
				<t path="vscode.TreeDataProvider"><c path="registerTreeDataProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a {@link TreeDataProvider} for the view contributed using the extension point `views`.
	 * This will allow you to contribute data to the {@link TreeView} and update if the data changes.
	 *
	 * **Note:** To get access to the {@link TreeView} and perform operations on it, use {@link window.createTreeView createTreeView}.
	 *
	 * @param viewId Id of the view contributed using the extension point `views`.
	 * @param treeDataProvider A {@link TreeDataProvider} that provides tree data for the view
	 * @returns A {@link Disposable disposable} that unregisters the {@link TreeDataProvider}.</haxe_doc>
		</registerTreeDataProvider>
		<createTreeView public="1" params="T" set="method">
			<f a="viewId:options">
				<c path="String"/>
				<t path="vscode.TreeViewOptions"><c path="createTreeView.T"/></t>
				<t path="vscode.TreeView"><c path="createTreeView.T"/></t>
			</f>
			<haxe_doc>* Create a {@link TreeView} for the view contributed using the extension point `views`.
	 * @param viewId Id of the view contributed using the extension point `views`.
	 * @param options Options for creating the {@link TreeView}
	 * @returns a {@link TreeView}.</haxe_doc>
		</createTreeView>
		<registerUriHandler public="1" set="method">
			<f a="handler">
				<t path="vscode.UriHandler"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a {@link UriHandler uri handler} capable of handling system-wide {@link Uri uris}.
	 * In case there are multiple windows open, the topmost window will handle the uri.
	 * A uri handler is scoped to the extension it is contributed from; it will only
	 * be able to handle uris which are directed to the extension itself. A uri must respect
	 * the following rules:
	 *
	 * - The uri-scheme must be `vscode.env.uriScheme`;
	 * - The uri-authority must be the extension id (e.g. `my.extension`);
	 * - The uri-path, -query and -fragment parts are arbitrary.
	 *
	 * For example, if the `my.extension` extension registers a uri handler, it will only
	 * be allowed to handle uris with the prefix `product-name://my.extension`.
	 *
	 * An extension can only register a single uri handler in its entire activation lifetime.
	 *
	 * * *Note:* There is an activation event `onUri` that fires when a uri directed for
	 * the current extension is about to be handled.
	 *
	 * @param handler The uri handler to register for this extension.
	 * @returns A {@link Disposable disposable} that unregisters the handler.</haxe_doc>
		</registerUriHandler>
		<registerWebviewPanelSerializer public="1" params="T" set="method">
			<f a="viewType:serializer">
				<c path="String"/>
				<t path="vscode.WebviewPanelSerializer"><c path="registerWebviewPanelSerializer.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a webview panel serializer.
	 *
	 * Extensions that support reviving should have an `"onWebviewPanel:viewType"` activation event and
	 * make sure that `registerWebviewPanelSerializer` is called during activation.
	 *
	 * Only a single serializer may be registered at a time for a given `viewType`.
	 *
	 * @param viewType Type of the webview panel that can be serialized.
	 * @param serializer Webview serializer.
	 * @returns A {@link Disposable disposable} that unregisters the serializer.</haxe_doc>
		</registerWebviewPanelSerializer>
		<registerWebviewViewProvider public="1" set="method">
			<f a="viewId:provider:?options">
				<c path="String"/>
				<t path="vscode.WebviewViewProvider"/>
				<a><webviewOptions set="null">
	<x path="Null"><a><retainContextWhenHidden set="null">
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Controls if the webview element itself (iframe) is kept around even when the view
			 * is no longer visible.
			 *
			 * Normally the webview's html context is created when the view becomes visible
			 * and destroyed when it is hidden. Extensions that have complex state
			 * or UI can set the `retainContextWhenHidden` to make the editor keep the webview
			 * context around, even when the webview moves to a background tab. When a webview using
			 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
			 * When the view becomes visible again, the context is automatically restored
			 * in the exact same state it was in originally. You cannot send messages to a
			 * hidden webview, even with `retainContextWhenHidden` enabled.
			 *
			 * `retainContextWhenHidden` has a high memory overhead and should only be used if
			 * your view's context cannot be quickly saved and restored.</haxe_doc>
</retainContextWhenHidden></a></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Content settings for the webview created for this view.</haxe_doc>
</webviewOptions></a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a new provider for webview views.
	 *
	 * @param viewId Unique id of the view. This should match the `id` from the
	 *   `views` contribution in the package.json.
	 * @param provider Provider for the webview views.
	 *
	 * @returns Disposable that unregisters the provider.</haxe_doc>
		</registerWebviewViewProvider>
		<registerCustomEditorProvider public="1" params="T" set="method">
			<f a="viewType:provider:?options">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.CustomTextEditorProvider"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.CustomReadonlyEditorProvider"><c path="registerCustomEditorProvider.T"/></t>
						<t path="vscode.CustomEditorProvider"><c path="registerCustomEditorProvider.T"/></t>
					</x>
				</x>
				<a>
					<webviewOptions final="1" set="null">
						<x path="Null"><t path="vscode.WebviewPanelOptions"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Content settings for the webview panels created for this custom editor.</haxe_doc>
					</webviewOptions>
					<supportsMultipleEditorsPerDocument final="1" set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Only applies to `CustomReadonlyEditorProvider | CustomEditorProvider`.
			 *
			 * Indicates that the provider allows multiple editor instances to be open at the same time for
			 * the same resource.
			 *
			 * By default, the editor only allows one editor instance to be open at a time for each resource. If the
			 * user tries to open a second editor instance for the resource, the first one is instead moved to where
			 * the second one was to be opened.
			 *
			 * When `supportsMultipleEditorsPerDocument` is enabled, users can split and create copies of the custom
			 * editor. In this case, the custom editor must make sure it can properly synchronize the states of all
			 * editor instances for a resource so that they are consistent.</haxe_doc>
					</supportsMultipleEditorsPerDocument>
				</a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider for custom editors for the `viewType` contributed by the `customEditors` extension point.
	 *
	 * When a custom editor is opened, an `onCustomEditor:viewType` activation event is fired. Your extension
	 * must register a {@linkcode CustomTextEditorProvider}, {@linkcode CustomReadonlyEditorProvider},
	 * {@linkcode CustomEditorProvider}for `viewType` as part of activation.
	 *
	 * @param viewType Unique identifier for the custom editor provider. This should match the `viewType` from the
	 *   `customEditors` contribution point.
	 * @param provider Provider that resolves custom editors.
	 * @param options Options for the provider.
	 *
	 * @returns Disposable that unregisters the provider.</haxe_doc>
		</registerCustomEditorProvider>
		<registerTerminalLinkProvider public="1" params="T" set="method">
			<f a="provider">
				<t path="vscode.TerminalLinkProvider"><c path="registerTerminalLinkProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register provider that enables the detection and handling of links within the terminal.
	 * @param provider The provider that provides the terminal links.
	 * @returns Disposable that unregisters the provider.</haxe_doc>
		</registerTerminalLinkProvider>
		<registerTerminalProfileProvider public="1" set="method">
			<f a="id:provider">
				<c path="String"/>
				<t path="vscode.TerminalProfileProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a provider for a contributed terminal profile.
	 *
	 * @param id The ID of the contributed terminal profile.
	 * @param provider The terminal profile provider.
	 * @returns A {@link Disposable disposable} that unregisters the provider.</haxe_doc>
		</registerTerminalProfileProvider>
		<registerFileDecorationProvider public="1" set="method">
			<f a="provider">
				<t path="vscode.FileDecorationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a file decoration provider.
	 *
	 * @param provider A {@link FileDecorationProvider}.
	 * @returns A {@link Disposable} that unregisters the provider.</haxe_doc>
		</registerFileDecorationProvider>
		<activeColorTheme public="1">
			<t path="vscode.ColorTheme"/>
			<haxe_doc>* The currently active color theme as configured in the settings. The active
	 * theme can be changed via the `workbench.colorTheme` setting.</haxe_doc>
		</activeColorTheme>
		<onDidChangeActiveColorTheme public="1" set="null">
			<t path="vscode.Event"><t path="vscode.ColorTheme"/></t>
			<haxe_doc>* An {@link Event} which fires when the active color theme is changed or has changes.</haxe_doc>
		</onDidChangeActiveColorTheme>
	</class>
	<class path="VscodeExtensions" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getExtension public="1" params="T" set="method">
			<f a="extensionId">
				<c path="String"/>
				<x path="Null"><t path="vscode.Extension"><c path="getExtension.T"/></t></x>
			</f>
			<haxe_doc>* Get an extension by its full identifier in the form of: `publisher.name`.
	 *
	 * @param extensionId An extension identifier.
	 * @returns An extension or `undefined`.</haxe_doc>
		</getExtension>
		<all public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Extension"><x path="Any"/></t></x>
			<haxe_doc>* All extensions currently known to the system.</haxe_doc>
		</all>
		<onDidChange public="1" set="null">
			<t path="vscode.Event"><x path="Void"/></t>
			<haxe_doc>* An event which fires when `extensions.all` changes. This can happen when extensions are
	 * installed, uninstalled, enabled or disabled.</haxe_doc>
		</onDidChange>
	</class>
	<class path="VscodeScm" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<inputBox public="1" set="null">
			<t path="vscode.SourceControlInputBox"/>
			<meta><m n=":deprecated"><e>"Use SourceControl.inputBox instead"</e></m></meta>
			<haxe_doc>* The {@link SourceControlInputBox input box} for the last source control
	 * created by the extension.
	 *
	 * @deprecated Use SourceControl.inputBox instead</haxe_doc>
		</inputBox>
		<createSourceControl public="1" set="method">
			<f a="id:label:?rootUri">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.Uri"/>
				<t path="vscode.SourceControl"/>
			</f>
			<haxe_doc>* Creates a new {@link SourceControl source control} instance.
	 *
	 * @param id An `id` for the source control. Something short, e.g.: `git`.
	 * @param label A human-readable string for the source control. E.g.: `Git`.
	 * @param rootUri An optional Uri of the root of the source control. E.g.: `Uri.parse(workspaceRoot)`.
	 * @returns An instance of {@link SourceControl source control}.</haxe_doc>
		</createSourceControl>
		<haxe_doc>* Namespace for source control mangement.</haxe_doc>
	</class>
	<class path="VscodeLanguages" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getLanguages public="1" set="method">
			<f a=""><x path="js.lib.Thenable"><c path="Array"><c path="String"/></c></x></f>
			<haxe_doc>* Return the identifiers of all known languages.
	 * @returns Promise resolving to an array of identifier strings.</haxe_doc>
		</getLanguages>
		<setTextDocumentLanguage public="1" set="method">
			<f a="document:languageId">
				<c path="vscode.TextDocument"/>
				<c path="String"/>
				<x path="js.lib.Thenable"><c path="vscode.TextDocument"/></x>
			</f>
			<haxe_doc>* Set (and change) the {@link TextDocument.languageId language} that is associated
	 * with the given document.
	 *
	 * *Note* that calling this function will trigger the {@linkcode workspace.onDidCloseTextDocument onDidCloseTextDocument} event
	 * followed by the {@linkcode workspace.onDidOpenTextDocument onDidOpenTextDocument} event.
	 *
	 * @param document The document which language is to be changed
	 * @param languageId The new language identifier.
	 * @returns A thenable that resolves with the updated document.</haxe_doc>
		</setTextDocumentLanguage>
		<match public="1" set="method">
			<f a="selector:document">
				<t path="vscode.DocumentSelector"/>
				<c path="vscode.TextDocument"/>
				<x path="Float"/>
			</f>
			<haxe_doc><![CDATA[* Compute the match between a document {@link DocumentSelector selector} and a document. Values
	 * greater than zero mean the selector matches the document.
	 *
	 * A match is computed according to these rules:
	 * 1. When {@linkcode DocumentSelector} is an array, compute the match for each contained `DocumentFilter` or language identifier and take the maximum value.
	 * 2. A string will be desugared to become the `language`-part of a {@linkcode DocumentFilter}, so `"fooLang"` is like `{ language: "fooLang" }`.
	 * 3. A {@linkcode DocumentFilter} will be matched against the document by comparing its parts with the document. The following rules apply:
	 *    1. When the `DocumentFilter` is empty (`{}`) the result is `0`
	 *    2. When `scheme`, `language`, `pattern`, or `notebook` are defined but one doesn't match, the result is `0`
	 *    3. Matching against `*` gives a score of `5`, matching via equality or via a glob-pattern gives a score of `10`
	 *    4. The result is the maximum value of each match
	 *
	 * Samples:
	 * ```js
	 * // default document from disk (file-scheme)
	 * doc.uri; //'file:///my/file.js'
	 * doc.languageId; // 'javascript'
	 * match('javascript', doc); // 10;
	 * match({ language: 'javascript' }, doc); // 10;
	 * match({ language: 'javascript', scheme: 'file' }, doc); // 10;
	 * match('*', doc); // 5
	 * match('fooLang', doc); // 0
	 * match(['fooLang', '*'], doc); // 5
	 *
	 * // virtual document, e.g. from git-index
	 * doc.uri; // 'git:/my/file.js'
	 * doc.languageId; // 'javascript'
	 * match('javascript', doc); // 10;
	 * match({ language: 'javascript', scheme: 'git' }, doc); // 10;
	 * match('*', doc); // 5
	 *
	 * // notebook cell document
	 * doc.uri; // `vscode-notebook-cell:///my/notebook.ipynb#gl65s2pmha`;
	 * doc.languageId; // 'python'
	 * match({ notebookType: 'jupyter-notebook' }, doc) // 10
	 * match({ notebookType: 'fooNotebook', language: 'python' }, doc) // 0
	 * match({ language: 'python' }, doc) // 10
	 * match({ notebookType: '*' }, doc) // 5
	 * ```
	 *
	 * @param selector A document selector.
	 * @param document A text document.
	 * @returns A number `>0` when the selector matches and `0` when the selector does not match.]]></haxe_doc>
		</match>
		<onDidChangeDiagnostics public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DiagnosticChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the global set of diagnostics changes. This is
	 * newly added and removed diagnostics.</haxe_doc>
		</onDidChangeDiagnostics>
		<getDiagnostics public="1" set="method">
			<f a="resource">
				<c path="vscode.Uri"/>
				<c path="Array"><c path="vscode.Diagnostic"/></c>
			</f>
			<haxe_doc>* Get all diagnostics for a given resource.
	 *
	 * @param resource A resource
	 * @returns An array of {@link Diagnostic diagnostics} objects or an empty array.</haxe_doc>
			<overloads><getDiagnostics public="1" set="method">
	<f a=""><c path="Array"><x path="VscodeLanguagesGetDiagnosticsReturn"/></c></f>
	<haxe_doc>* Get all diagnostics.
	 *
	 * @returns An array of uri-diagnostics tuples or an empty array.</haxe_doc>
</getDiagnostics></overloads>
		</getDiagnostics>
		<createDiagnosticCollection public="1" set="method">
			<f a="?name">
				<c path="String"/>
				<c path="vscode.DiagnosticCollection"/>
			</f>
			<haxe_doc>* Create a diagnostics collection.
	 *
	 * @param name The {@link DiagnosticCollection.name name} of the collection.
	 * @returns A new diagnostic collection.</haxe_doc>
		</createDiagnosticCollection>
		<createLanguageStatusItem public="1" set="method">
			<f a="id:selector">
				<c path="String"/>
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.LanguageStatusItem"/>
			</f>
			<haxe_doc>* Creates a new {@link LanguageStatusItem language status item}.
	 *
	 * @param id The identifier of the item.
	 * @param selector The document selector that defines for what editors the item shows.
	 * @returns A new language status item.</haxe_doc>
		</createLanguageStatusItem>
		<registerCompletionItemProvider public="1" params="T" set="method">
			<f a="selector:provider:triggerCharacters">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CompletionItemProvider"><c path="registerCompletionItemProvider.T"/></t>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a completion provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and groups of equal score are sequentially asked for
	 * completion items. The process stops when one or many providers of a group return a
	 * result. A failing provider (rejected promise or exception) will not fail the whole
	 * operation.
	 *
	 * A completion item provider can be associated with a set of `triggerCharacters`. When trigger
	 * characters are being typed, completions are requested but only from providers that registered
	 * the typed character. Because of that trigger characters should be different than {@link LanguageConfiguration.wordPattern word characters},
	 * a common trigger character is `.` to trigger member completions.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A completion provider.
	 * @param triggerCharacters Trigger completion when the user types one of the characters.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerCompletionItemProvider>
		<registerInlineCompletionItemProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.InlineCompletionItemProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers an inline completion provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An inline completion provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerInlineCompletionItemProvider>
		<registerCodeActionsProvider public="1" params="T" set="method">
			<f a="selector:provider:?metadata">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CodeActionProvider"><c path="registerCodeActionsProvider.T"/></t>
				<x path="Null"><t path="vscode.CodeActionProviderMetadata"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a code action provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A code action provider.
	 * @param metadata Metadata about the kind of code actions the provider provides.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerCodeActionsProvider>
		<registerCodeLensProvider public="1" params="T" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CodeLensProvider"><c path="registerCodeLensProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a code lens provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A code lens provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerCodeLensProvider>
		<registerDefinitionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DefinitionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a definition provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A definition provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDefinitionProvider>
		<registerImplementationProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.ImplementationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register an implementation provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An implementation provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerImplementationProvider>
		<registerTypeDefinitionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.TypeDefinitionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a type definition provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A type definition provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerTypeDefinitionProvider>
		<registerDeclarationProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DeclarationProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a declaration provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A declaration provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDeclarationProvider>
		<registerHoverProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.HoverProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a hover provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A hover provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerHoverProvider>
		<registerEvaluatableExpressionProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.EvaluatableExpressionProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider that locates evaluatable expressions in text documents.
	 * The editor will evaluate the expression in the active debug session and will show the result in the debug hover.
	 *
	 * If multiple providers are registered for a language an arbitrary provider will be used.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An evaluatable expression provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerEvaluatableExpressionProvider>
		<registerInlineValuesProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.InlineValuesProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a provider that returns data for the debugger's 'inline value' feature.
	 * Whenever the generic debugger has stopped in a source file, providers registered for the language of the file
	 * are called to return textual data that will be shown in the editor at the end of lines.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An inline values provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerInlineValuesProvider>
		<registerDocumentHighlightProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentHighlightProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document highlight provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and groups sequentially asked for document highlights.
	 * The process stops when a provider returns a `non-falsy` or `non-failure` result.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document highlight provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentHighlightProvider>
		<registerDocumentSymbolProvider public="1" set="method">
			<f a="selector:provider:?metaData">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentSymbolProvider"/>
				<x path="Null"><t path="vscode.DocumentSymbolProviderMetadata"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document symbol provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document symbol provider.
	 * @param metaData metadata about the provider
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentSymbolProvider>
		<registerWorkspaceSymbolProvider public="1" params="T" set="method">
			<f a="provider">
				<t path="vscode.WorkspaceSymbolProvider"><c path="registerWorkspaceSymbolProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a workspace symbol provider.
	 *
	 * Multiple providers can be registered. In that case providers are asked in parallel and
	 * the results are merged. A failing provider (rejected promise or exception) will not cause
	 * a failure of the whole operation.
	 *
	 * @param provider A workspace symbol provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerWorkspaceSymbolProvider>
		<registerReferenceProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.ReferenceProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a reference provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A reference provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerReferenceProvider>
		<registerRenameProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.RenameProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a rename provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and asked in sequence. The first provider producing a result
	 * defines the result of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A rename provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerRenameProvider>
		<registerDocumentSemanticTokensProvider public="1" set="method">
			<f a="selector:provider:legend">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentSemanticTokensProvider"/>
				<c path="vscode.SemanticTokensLegend"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a semantic tokens provider for a whole document.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document semantic tokens provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentSemanticTokensProvider>
		<registerDocumentRangeSemanticTokensProvider public="1" set="method">
			<f a="selector:provider:legend">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentRangeSemanticTokensProvider"/>
				<c path="vscode.SemanticTokensLegend"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a semantic tokens provider for a document range.
	 *
	 * *Note:* If a document has both a `DocumentSemanticTokensProvider` and a `DocumentRangeSemanticTokensProvider`,
	 * the range provider will be invoked only initially, for the time in which the full document provider takes
	 * to resolve the first request. Once the full document provider resolves the first request, the semantic tokens
	 * provided via the range provider will be discarded and from that point forward, only the document provider
	 * will be used.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document range semantic tokens provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentRangeSemanticTokensProvider>
		<registerDocumentFormattingEditProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentFormattingEditProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider for a document.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document formatting edit provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentFormattingEditProvider>
		<registerDocumentRangeFormattingEditProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentRangeFormattingEditProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider for a document range.
	 *
	 * *Note:* A document range provider is also a {@link DocumentFormattingEditProvider document formatter}
	 * which means there is no need to {@link languages.registerDocumentFormattingEditProvider register} a document
	 * formatter when also registering a range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document range formatting edit provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentRangeFormattingEditProvider>
		<registerOnTypeFormattingEditProvider public="1" set="method">
			<f a="selector:provider:firstTriggerCharacter:moreTriggerCharacter">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.OnTypeFormattingEditProvider"/>
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a formatting provider that works on type. The provider is active when the user enables the setting `editor.formatOnType`.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An on type formatting edit provider.
	 * @param firstTriggerCharacter A character on which formatting should be triggered, like `}`.
	 * @param moreTriggerCharacter More trigger characters.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerOnTypeFormattingEditProvider>
		<registerSignatureHelpProvider public="1" set="method">
			<f a="selector:provider:triggerCharacters">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.SignatureHelpProvider"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a signature help provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and called sequentially until a provider returns a
	 * valid result.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A signature help provider.
	 * @param triggerCharacters Trigger signature help when the user types one of the characters, like `,` or `(`.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
			<overloads><registerSignatureHelpProvider public="1" set="method">
	<f a="selector:provider:metadata">
		<t path="vscode.DocumentSelector"/>
		<t path="vscode.SignatureHelpProvider"/>
		<t path="vscode.SignatureHelpProviderMetadata"/>
		<c path="vscode.Disposable"/>
	</f>
	<haxe_doc>* @see {@link languages.registerSignatureHelpProvider}
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A signature help provider.
	 * @param metadata Information about the provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
</registerSignatureHelpProvider></overloads>
		</registerSignatureHelpProvider>
		<registerDocumentLinkProvider public="1" params="T" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentLinkProvider"><c path="registerDocumentLinkProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a document link provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A document link provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDocumentLinkProvider>
		<registerColorProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentColorProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a color provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A color provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerColorProvider>
		<registerInlayHintsProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.InlayHintsProvider"><c path="vscode.InlayHint"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a inlay hints provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider An inlay hints provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerInlayHintsProvider>
		<registerFoldingRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.FoldingRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a folding range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged.
	 * If multiple folding ranges start at the same position, only the range of the first registered provider is used.
	 * If a folding range overlaps with an other range that has a smaller position, it is also ignored.
	 *
	 * A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A folding range provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerFoldingRangeProvider>
		<registerSelectionRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.SelectionRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a selection range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are asked in
	 * parallel and the results are merged. A failing provider (rejected promise or exception) will
	 * not cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A selection range provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerSelectionRangeProvider>
		<registerCallHierarchyProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.CallHierarchyProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a call hierarchy provider.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A call hierarchy provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerCallHierarchyProvider>
		<registerTypeHierarchyProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.TypeHierarchyProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a type hierarchy provider.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A type hierarchy provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerTypeHierarchyProvider>
		<registerLinkedEditingRangeProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.LinkedEditingRangeProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a linked editing range provider.
	 *
	 * Multiple providers can be registered for a language. In that case providers are sorted
	 * by their {@link languages.match score} and the best-matching provider that has a result is used. Failure
	 * of the selected provider will cause a failure of the whole operation.
	 *
	 * @param selector A selector that defines the documents this provider is applicable to.
	 * @param provider A linked editing range provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerLinkedEditingRangeProvider>
		<registerDocumentDropEditProvider public="1" set="method">
			<f a="selector:provider">
				<t path="vscode.DocumentSelector"/>
				<t path="vscode.DocumentDropEditProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Registers a new {@link DocumentDropEditProvider}.
	 *
	 * @param selector A selector that defines the documents this provider applies to.
	 * @param provider A drop provider.
	 *
	 * @returns A {@link Disposable} that unregisters this provider when disposed of.</haxe_doc>
		</registerDocumentDropEditProvider>
		<setLanguageConfiguration public="1" set="method">
			<f a="language:configuration">
				<c path="String"/>
				<t path="vscode.LanguageConfiguration"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Set a {@link LanguageConfiguration language configuration} for a language.
	 *
	 * @param language A language identifier like `typescript`.
	 * @param configuration Language configuration.
	 * @returns A {@link Disposable} that unsets this configuration.</haxe_doc>
		</setLanguageConfiguration>
	</class>
	<class path="VscodeWorkspace" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<fs public="1" set="null">
			<t path="vscode.FileSystem"/>
			<haxe_doc>* A {@link FileSystem file system} instance that allows to interact with local and remote
	 * files, e.g. `vscode.workspace.fs.readDirectory(someUri)` allows to retrieve all entries
	 * of a directory or `vscode.workspace.fs.stat(anotherUri)` returns the meta data for a
	 * file.</haxe_doc>
		</fs>
		<rootPath public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<meta><m n=":deprecated"><e>"Use `workspace.workspaceFolders` instead."</e></m></meta>
			<haxe_doc>* The uri of the first entry of {@linkcode workspace.workspaceFolders workspaceFolders}
	 * as `string`. `undefined` if there is no first entry.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information
	 * on workspaces.
	 *
	 * @deprecated Use {@linkcode workspace.workspaceFolders workspaceFolders} instead.</haxe_doc>
		</rootPath>
		<workspaceFolders public="1" set="null">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x></x>
			<haxe_doc>* List of workspace folders (0-N) that are open in the editor. `undefined` when no workspace
	 * has been opened.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information
	 * on workspaces.</haxe_doc>
		</workspaceFolders>
		<name public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of the workspace. `undefined` when no workspace
	 * has been opened.
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces.</haxe_doc>
		</name>
		<workspaceFile public="1" set="null">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The location of the workspace file, for example:
	 *
	 * `file:///Users/name/Development/myProject.code-workspace`
	 *
	 * or
	 *
	 * `untitled:1555503116870`
	 *
	 * for a workspace that is untitled and not yet saved.
	 *
	 * Depending on the workspace that is opened, the value will be:
	 *  * `undefined` when no workspace is opened
	 *  * the path of the workspace file as `Uri` otherwise. if the workspace
	 * is untitled, the returned URI will use the `untitled:` scheme
	 *
	 * The location can e.g. be used with the `vscode.openFolder` command to
	 * open the workspace again after it has been closed.
	 *
	 * **Example:**
	 * ```typescript
	 * vscode.commands.executeCommand('vscode.openFolder', uriOfWorkspace);
	 * ```
	 *
	 * Refer to https://code.visualstudio.com/docs/editor/workspaces for more information on
	 * the concept of workspaces.
	 *
	 * **Note:** it is not advised to use `workspace.workspaceFile` to write
	 * configuration data into the file. You can use `workspace.getConfiguration().update()`
	 * for that purpose which will work both when a single folder is opened as
	 * well as an untitled or saved workspace.</haxe_doc>
		</workspaceFile>
		<onDidChangeWorkspaceFolders public="1" set="null">
			<t path="vscode.Event"><t path="vscode.WorkspaceFoldersChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when a workspace folder is added or removed.
	 *
	 * **Note:** this event will not fire if the first workspace folder is added, removed or changed,
	 * because in that case the currently executing extensions (including the one that listens to this
	 * event) will be terminated and restarted so that the (deprecated) `rootPath` property is updated
	 * to point to the first workspace folder.</haxe_doc>
		</onDidChangeWorkspaceFolders>
		<getWorkspaceFolder public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
			</f>
			<haxe_doc>* Returns the {@link WorkspaceFolder workspace folder} that contains a given uri.
	 * * returns `undefined` when the given uri doesn't match any workspace folder
	 * * returns the *input* when the given uri is a workspace folder itself
	 *
	 * @param uri An uri.
	 * @returns A workspace folder or `undefined`</haxe_doc>
		</getWorkspaceFolder>
		<asRelativePath public="1" set="method">
			<f a="pathOrUri:?includeWorkspaceFolder">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Returns a path that is relative to the workspace folder or folders.
	 *
	 * When there are no {@link workspace.workspaceFolders workspace folders} or when the path
	 * is not contained in them, the input is returned.
	 *
	 * @param pathOrUri A path or uri. When a uri is given its {@link Uri.fsPath fsPath} is used.
	 * @param includeWorkspaceFolder When `true` and when the given path is contained inside a
	 * workspace folder the name of the workspace is prepended. Defaults to `true` when there are
	 * multiple workspace folders and `false` otherwise.
	 * @returns A path relative to the root or the input.</haxe_doc>
		</asRelativePath>
		<updateWorkspaceFolders public="1" set="method">
			<f a="start:deleteCount:workspaceFoldersToAdd">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
				<t path="haxe.extern.Rest"><a>
	<uri><c path="vscode.Uri"/></uri>
	<name>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
	</name>
</a></t>
				<x path="Bool"/>
			</f>
			<haxe_doc>* This method replaces `deleteCount` {@link workspace.workspaceFolders workspace folders} starting at index `start`
	 * by an optional set of `workspaceFoldersToAdd` on the `vscode.workspace.workspaceFolders` array. This "splice"
	 * behavior can be used to add, remove and change workspace folders in a single operation.
	 *
	 * **Note:** in some cases calling this method may result in the currently executing extensions (including the
	 * one that called this method) to be terminated and restarted. For example when the first workspace folder is
	 * added, removed or changed the (deprecated) `rootPath` property is updated to point to the first workspace
	 * folder. Another case is when transitioning from an empty or single-folder workspace into a multi-folder
	 * workspace (see also: https://code.visualstudio.com/docs/editor/workspaces).
	 *
	 * Use the {@linkcode onDidChangeWorkspaceFolders onDidChangeWorkspaceFolders()} event to get notified when the
	 * workspace folders have been updated.
	 *
	 * **Example:** adding a new workspace folder at the end of workspace folders
	 * ```typescript
	 * workspace.updateWorkspaceFolders(workspace.workspaceFolders ? workspace.workspaceFolders.length : 0, null, { uri: ...});
	 * ```
	 *
	 * **Example:** removing the first workspace folder
	 * ```typescript
	 * workspace.updateWorkspaceFolders(0, 1);
	 * ```
	 *
	 * **Example:** replacing an existing workspace folder with a new one
	 * ```typescript
	 * workspace.updateWorkspaceFolders(0, 1, { uri: ...});
	 * ```
	 *
	 * It is valid to remove an existing workspace folder and add it again with a different name
	 * to rename that folder.
	 *
	 * **Note:** it is not valid to call {@link updateWorkspaceFolders updateWorkspaceFolders()} multiple times
	 * without waiting for the {@linkcode onDidChangeWorkspaceFolders onDidChangeWorkspaceFolders()} to fire.
	 *
	 * @param start the zero-based location in the list of currently opened {@link WorkspaceFolder workspace folders}
	 * from which to start deleting workspace folders.
	 * @param deleteCount the optional number of workspace folders to remove.
	 * @param workspaceFoldersToAdd the optional variable set of workspace folders to add in place of the deleted ones.
	 * Each workspace is identified with a mandatory URI and an optional name.
	 * @returns true if the operation was successfully started and false otherwise if arguments were used that would result
	 * in invalid workspace folder state (e.g. 2 folders with the same URI).</haxe_doc>
		</updateWorkspaceFolders>
		<createFileSystemWatcher public="1" set="method">
			<f a="globPattern:?ignoreCreateEvents:?ignoreChangeEvents:?ignoreDeleteEvents">
				<t path="vscode.GlobPattern"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<x path="Bool"/>
				<c path="vscode.FileSystemWatcher"/>
			</f>
			<haxe_doc><![CDATA[* Creates a file system watcher that is notified on file events (create, change, delete)
	 * depending on the parameters provided.
	 *
	 * By default, all opened {@link workspace.workspaceFolders workspace folders} will be watched
	 * for file changes recursively.
	 *
	 * Additional paths can be added for file watching by providing a {@link RelativePattern} with
	 * a `base` path to watch. If the path is a folder and the `pattern` is complex (e.g. contains
	 * `**` or path segments), it will be watched recursively and otherwise will be watched
	 * non-recursively (i.e. only changes to the first level of the path will be reported).
	 *
	 * *Note* that paths that do not exist in the file system will be monitored with a delay until
	 * created and then watched depending on the parameters provided. If a watched path is deleted,
	 * the watcher will suspend and not report any events until the path is created again.
	 *
	 * If possible, keep the use of recursive watchers to a minimum because recursive file watching
	 * is quite resource intense.
	 *
	 * Providing a `string` as `globPattern` acts as convenience method for watching file events in
	 * all opened workspace folders. It cannot be used to add more folders for file watching, nor will
	 * it report any file events from folders that are not part of the opened workspace folders.
	 *
	 * Optionally, flags to ignore certain kinds of events can be provided.
	 *
	 * To stop listening to events the watcher must be disposed.
	 *
	 * *Note* that file events from recursive file watchers may be excluded based on user configuration.
	 * The setting `files.watcherExclude` helps to reduce the overhead of file events from folders
	 * that are known to produce many file changes at once (such as `.git` folders). As such,
	 * it is highly recommended to watch with simple patterns that do not require recursive watchers
	 * where the exclude settings are ignored and you have full control over the events.
	 *
	 * *Note* that symbolic links are not automatically followed for file watching unless the path to
	 * watch itself is a symbolic link.
	 *
	 * *Note* that the file paths that are reported for having changed may have a different path casing
	 * compared to the actual casing on disk on case-insensitive platforms (typically macOS and Windows
	 * but not Linux). We allow a user to open a workspace folder with any desired path casing and try
	 * to preserve that. This means:
	 * * if the path is within any of the workspace folders, the path will match the casing of the
	 *   workspace folder up to that portion of the path and match the casing on disk for children
	 * * if the path is outside of any of the workspace folders, the casing will match the case of the
	 *   path that was provided for watching
	 * In the same way, symbolic links are preserved, i.e. the file event will report the path of the
	 * symbolic link as it was provided for watching and not the target.
	 *
	 * ### Examples
	 *
	 * The basic anatomy of a file watcher is as follows:
	 *
	 * ```ts
	 * const watcher = vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(<folder>, <pattern>));
	 *
	 * watcher.onDidChange(uri => { ... }); // listen to files being changed
	 * watcher.onDidCreate(uri => { ... }); // listen to files/folders being created
	 * watcher.onDidDelete(uri => { ... }); // listen to files/folders getting deleted
	 *
	 * watcher.dispose(); // dispose after usage
	 * ```
	 *
	 * #### Workspace file watching
	 *
	 * If you only care about file events in a specific workspace folder:
	 *
	 * ```ts
	 * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.workspace.workspaceFolders[0], '**​/*.js'));
	 * ```
	 *
	 * If you want to monitor file events across all opened workspace folders:
	 *
	 * ```ts
	 * vscode.workspace.createFileSystemWatcher('**​/*.js');
	 * ```
	 *
	 * *Note:* the array of workspace folders can be empty if no workspace is opened (empty window).
	 *
	 * #### Out of workspace file watching
	 *
	 * To watch a folder for changes to *.js files outside the workspace (non recursively), pass in a `Uri` to such
	 * a folder:
	 *
	 * ```ts
	 * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '*.js'));
	 * ```
	 *
	 * And use a complex glob pattern to watch recursively:
	 *
	 * ```ts
	 * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.Uri.file(<path to folder outside workspace>), '**​/*.js'));
	 * ```
	 *
	 * Here is an example for watching the active editor for file changes:
	 *
	 * ```ts
	 * vscode.workspace.createFileSystemWatcher(new vscode.RelativePattern(vscode.window.activeTextEditor.document.uri, '*'));
	 * ```
	 *
	 * @param globPattern A {@link GlobPattern glob pattern} that controls which file events the watcher should report.
	 * @param ignoreCreateEvents Ignore when files have been created.
	 * @param ignoreChangeEvents Ignore when files have been changed.
	 * @param ignoreDeleteEvents Ignore when files have been deleted.
	 * @returns A new file system watcher instance. Must be disposed when no longer needed.]]></haxe_doc>
		</createFileSystemWatcher>
		<findFiles public="1" set="method">
			<f a="include:?exclude:?maxResults:?token">
				<t path="vscode.GlobPattern"/>
				<t path="vscode.GlobPattern"/>
				<x path="Int"/>
				<x path="Null"><t path="vscode.CancellationToken"/></x>
				<x path="js.lib.Thenable"><c path="Array"><c path="vscode.Uri"/></c></x>
			</f>
			<haxe_doc>* Find files across all {@link workspace.workspaceFolders workspace folders} in the workspace.
	 *
	 * @example
	 * findFiles('**​/*.js', '**​/node_modules/**', 10)
	 *
	 * @param include A {@link GlobPattern glob pattern} that defines the files to search for. The glob pattern
	 * will be matched against the file paths of resulting matches relative to their workspace. Use a {@link RelativePattern relative pattern}
	 * to restrict the search results to a {@link WorkspaceFolder workspace folder}.
	 * @param exclude  A {@link GlobPattern glob pattern} that defines files and folders to exclude. The glob pattern
	 * will be matched against the file paths of resulting matches relative to their workspace. When `undefined`, default file-excludes (e.g. the `files.exclude`-setting
	 * but not `search.exclude`) will apply. When `null`, no excludes will apply.
	 * @param maxResults An upper-bound for the result.
	 * @param token A token that can be used to signal cancellation to the underlying search engine.
	 * @returns A thenable that resolves to an array of resource identifiers. Will return no results if no
	 * {@link workspace.workspaceFolders workspace folders} are opened.</haxe_doc>
		</findFiles>
		<save public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="vscode.Uri"/></x></x>
			</f>
			<haxe_doc>* Saves the editor identified by the given resource and returns the resulting resource or `undefined`
	 * if save was not successful or no editor with the given resource was found.
	 *
	 * **Note** that an editor with the provided resource must be opened in order to be saved.
	 *
	 * @param uri the associated uri for the opened editor to save.
	 * @returns A thenable that resolves when the save operation has finished.</haxe_doc>
		</save>
		<saveAs public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><x path="Null"><c path="vscode.Uri"/></x></x>
			</f>
			<haxe_doc>* Saves the editor identified by the given resource to a new file name as provided by the user and
	 * returns the resulting resource or `undefined` if save was not successful or cancelled or no editor
	 * with the given resource was found.
	 *
	 * **Note** that an editor with the provided resource must be opened in order to be saved as.
	 *
	 * @param uri the associated uri for the opened editor to save as.
	 * @returns A thenable that resolves when the save-as operation has finished.</haxe_doc>
		</saveAs>
		<saveAll public="1" set="method">
			<f a="?includeUntitled">
				<x path="Bool"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Save all dirty files.
	 *
	 * @param includeUntitled Also save files that have been created during this session.
	 * @returns A thenable that resolves when the files have been saved. Will return `false`
	 * for any file that failed to save.</haxe_doc>
		</saveAll>
		<applyEdit public="1" set="method">
			<f a="edit:?metadata">
				<c path="vscode.WorkspaceEdit"/>
				<x path="Null"><t path="vscode.WorkspaceEditMetadata"/></x>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc><![CDATA[* Make changes to one or many resources or create, delete, and rename resources as defined by the given
	 * {@link WorkspaceEdit workspace edit}.
	 *
	 * All changes of a workspace edit are applied in the same order in which they have been added. If
	 * multiple textual inserts are made at the same position, these strings appear in the resulting text
	 * in the order the 'inserts' were made, unless that are interleaved with resource edits. Invalid sequences
	 * like 'delete file a' -> 'insert text in file a' cause failure of the operation.
	 *
	 * When applying a workspace edit that consists only of text edits an 'all-or-nothing'-strategy is used.
	 * A workspace edit with resource creations or deletions aborts the operation, e.g. consecutive edits will
	 * not be attempted, when a single edit fails.
	 *
	 * @param edit A workspace edit.
	 * @param metadata Optional {@link WorkspaceEditMetadata metadata} for the edit.
	 * @returns A thenable that resolves when the edit could be applied.]]></haxe_doc>
		</applyEdit>
		<textDocuments public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TextDocument"/></x>
			<haxe_doc>* All text documents currently known to the editor.</haxe_doc>
		</textDocuments>
		<openTextDocument public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><c path="vscode.TextDocument"/></x>
			</f>
			<haxe_doc>* Opens a document. Will return early if this document is already open. Otherwise
	 * the document is loaded and the {@link workspace.onDidOpenTextDocument didOpen}-event fires.
	 *
	 * The document is denoted by an {@link Uri}. Depending on the {@link Uri.scheme scheme} the
	 * following rules apply:
	 * * `file`-scheme: Open a file on disk (`openTextDocument(Uri.file(path))`). Will be rejected if the file
	 * does not exist or cannot be loaded.
	 * * `untitled`-scheme: Open a blank untitled file with associated path (`openTextDocument(Uri.file(path).with({ scheme: 'untitled' }))`).
	 * The language will be derived from the file name.
	 * * For all other schemes contributed {@link TextDocumentContentProvider text document content providers} and
	 * {@link FileSystemProvider file system providers} are consulted.
	 *
	 * *Note* that the lifecycle of the returned document is owned by the editor and not by the extension. That means an
	 * {@linkcode workspace.onDidCloseTextDocument onDidClose}-event can occur at any time after opening it.
	 *
	 * @param uri Identifies the resource to open.
	 * @returns A promise that resolves to a {@link TextDocument document}.</haxe_doc>
			<overloads>
				<openTextDocument public="1" set="method">
					<f a="?options">
						<a>
							<language>
								<x path="Null"><c path="String"/></x>
								<meta><m n=":optional"/></meta>
							</language>
							<content>
								<x path="Null"><c path="String"/></x>
								<meta><m n=":optional"/></meta>
							</content>
						</a>
						<x path="js.lib.Thenable"><c path="vscode.TextDocument"/></x>
					</f>
					<haxe_doc>* Opens an untitled text document. The editor will prompt the user for a file
	 * path when the document is to be saved. The `options` parameter allows to
	 * specify the *language* and/or the *content* of the document.
	 *
	 * @param options Options to control how the document will be created.
	 * @returns A promise that resolves to a {@link TextDocument document}.</haxe_doc>
				</openTextDocument>
				<openTextDocument public="1" set="method">
					<f a="path">
						<c path="String"/>
						<x path="js.lib.Thenable"><c path="vscode.TextDocument"/></x>
					</f>
					<haxe_doc>* A short-hand for `openTextDocument(Uri.file(path))`.
	 *
	 * @see {@link workspace.openTextDocument}
	 * @param path A path of a file on disk.
	 * @returns A promise that resolves to a {@link TextDocument document}.</haxe_doc>
				</openTextDocument>
			</overloads>
		</openTextDocument>
		<registerTextDocumentContentProvider public="1" set="method">
			<f a="scheme:provider">
				<c path="String"/>
				<t path="vscode.TextDocumentContentProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a text document content provider.
	 *
	 * Only one provider can be registered per scheme.
	 *
	 * @param scheme The uri-scheme to register for.
	 * @param provider A content provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerTextDocumentContentProvider>
		<onDidOpenTextDocument public="1" set="null">
			<t path="vscode.Event"><c path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link TextDocument text document} is opened or when the language id
	 * of a text document {@link languages.setTextDocumentLanguage has been changed}.
	 *
	 * To add an event listener when a visible text document is opened, use the {@link TextEditor} events in the
	 * {@link window} namespace. Note that:
	 *
	 * - The event is emitted before the {@link TextDocument document} is updated in the
	 * {@link window.activeTextEditor active text editor}
	 * - When a {@link TextDocument text document} is already open (e.g.: open in another {@link window.visibleTextEditors visible text editor}) this event is not emitted
	 *</haxe_doc>
		</onDidOpenTextDocument>
		<onDidCloseTextDocument public="1" set="null">
			<t path="vscode.Event"><c path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link TextDocument text document} is disposed or when the language id
	 * of a text document {@link languages.setTextDocumentLanguage has been changed}.
	 *
	 * *Note 1:* There is no guarantee that this event fires when an editor tab is closed, use the
	 * {@linkcode window.onDidChangeVisibleTextEditors onDidChangeVisibleTextEditors}-event to know when editors change.
	 *
	 * *Note 2:* A document can be open but not shown in an editor which means this event can fire
	 * for a document that has not been shown in an editor.</haxe_doc>
		</onDidCloseTextDocument>
		<onDidChangeTextDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TextDocumentChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when a {@link TextDocument text document} is changed. This usually happens
	 * when the {@link TextDocument.getText contents} changes but also when other things like the
	 * {@link TextDocument.isDirty dirty}-state changes.</haxe_doc>
		</onDidChangeTextDocument>
		<onWillSaveTextDocument public="1" set="null">
			<t path="vscode.Event"><c path="vscode.TextDocumentWillSaveEvent"/></t>
			<haxe_doc>* An event that is emitted when a {@link TextDocument text document} will be saved to disk.
	 *
	 * *Note 1:* Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor
	 * might save without firing this event. For instance when shutting down with dirty files.
	 *
	 * *Note 2:* Subscribers are called sequentially and they can {@link TextDocumentWillSaveEvent.waitUntil delay} saving
	 * by registering asynchronous work. Protection against misbehaving listeners is implemented as such:
	 *  * there is an overall time budget that all listeners share and if that is exhausted no further listener is called
	 *  * listeners that take a long time or produce errors frequently will not be called anymore
	 *
	 * The current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.</haxe_doc>
		</onWillSaveTextDocument>
		<onDidSaveTextDocument public="1" set="null">
			<t path="vscode.Event"><c path="vscode.TextDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link TextDocument text document} is saved to disk.</haxe_doc>
		</onDidSaveTextDocument>
		<notebookDocuments public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookDocument"/></x>
			<haxe_doc>* All notebook documents currently known to the editor.</haxe_doc>
		</notebookDocuments>
		<openNotebookDocument public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="js.lib.Thenable"><t path="vscode.NotebookDocument"/></x>
			</f>
			<haxe_doc>* Open a notebook. Will return early if this notebook is already {@link notebookDocuments loaded}. Otherwise
	 * the notebook is loaded and the {@linkcode onDidOpenNotebookDocument}-event fires.
	 *
	 * *Note* that the lifecycle of the returned notebook is owned by the editor and not by the extension. That means an
	 * {@linkcode onDidCloseNotebookDocument}-event can occur at any time after.
	 *
	 * *Note* that opening a notebook does not show a notebook editor. This function only returns a notebook document which
	 * can be shown in a notebook editor but it can also be used for other things.
	 *
	 * @param uri The resource to open.
	 * @returns A promise that resolves to a {@link NotebookDocument notebook}</haxe_doc>
			<overloads><openNotebookDocument public="1" set="method">
	<f a="notebookType:?content">
		<c path="String"/>
		<c path="vscode.NotebookData"/>
		<x path="js.lib.Thenable"><t path="vscode.NotebookDocument"/></x>
	</f>
	<haxe_doc>* Open an untitled notebook. The editor will prompt the user for a file
	 * path when the document is to be saved.
	 *
	 * @see {@link workspace.openNotebookDocument}
	 * @param notebookType The notebook type that should be used.
	 * @param content The initial contents of the notebook.
	 * @returns A promise that resolves to a {@link NotebookDocument notebook}.</haxe_doc>
</openNotebookDocument></overloads>
		</openNotebookDocument>
		<onDidChangeNotebookDocument final="1" public="1">
			<t path="vscode.Event"><t path="vscode.NotebookDocumentChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when a {@link NotebookDocument notebook} has changed.</haxe_doc>
		</onDidChangeNotebookDocument>
		<onWillSaveNotebookDocument final="1" public="1">
			<t path="vscode.Event"><c path="vscode.NotebookDocumentWillSaveEvent"/></t>
			<haxe_doc>* An event that is emitted when a {@link NotebookDocument notebook document} will be saved to disk.
	 *
	 * *Note 1:* Subscribers can delay saving by registering asynchronous work. For the sake of data integrity the editor
	 * might save without firing this event. For instance when shutting down with dirty files.
	 *
	 * *Note 2:* Subscribers are called sequentially and they can {@link NotebookDocumentWillSaveEvent.waitUntil delay} saving
	 * by registering asynchronous work. Protection against misbehaving listeners is implemented as such:
	 *  * there is an overall time budget that all listeners share and if that is exhausted no further listener is called
	 *  * listeners that take a long time or produce errors frequently will not be called anymore
	 *
	 * The current thresholds are 1.5 seconds as overall time budget and a listener can misbehave 3 times before being ignored.</haxe_doc>
		</onWillSaveNotebookDocument>
		<onDidSaveNotebookDocument final="1" public="1">
			<t path="vscode.Event"><t path="vscode.NotebookDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link NotebookDocument notebook} is saved.</haxe_doc>
		</onDidSaveNotebookDocument>
		<registerNotebookSerializer public="1" set="method">
			<f a="notebookType:serializer:?options">
				<c path="String"/>
				<t path="vscode.NotebookSerializer"/>
				<x path="Null"><t path="vscode.NotebookDocumentContentOptions"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc><![CDATA[* Register a {@link NotebookSerializer notebook serializer}.
	 *
	 * A notebook serializer must be contributed through the `notebooks` extension point. When opening a notebook file, the editor will send
	 * the `onNotebook:<notebookType>` activation event, and extensions must register their serializer in return.
	 *
	 * @param notebookType A notebook.
	 * @param serializer A notebook serialzier.
	 * @param options Optional context options that define what parts of a notebook should be persisted
	 * @returns A {@link Disposable} that unregisters this serializer when being disposed.]]></haxe_doc>
		</registerNotebookSerializer>
		<onDidOpenNotebookDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.NotebookDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link NotebookDocument notebook} is opened.</haxe_doc>
		</onDidOpenNotebookDocument>
		<onDidCloseNotebookDocument public="1" set="null">
			<t path="vscode.Event"><t path="vscode.NotebookDocument"/></t>
			<haxe_doc>* An event that is emitted when a {@link NotebookDocument notebook} is disposed.
	 *
	 * *Note 1:* There is no guarantee that this event fires when an editor tab is closed.
	 *
	 * *Note 2:* A notebook can be open but not shown in an editor which means this event can fire
	 * for a notebook that has not been shown in an editor.</haxe_doc>
		</onDidCloseNotebookDocument>
		<onWillCreateFiles public="1" set="null">
			<t path="vscode.Event"><c path="vscode.FileWillCreateEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being created.
	 *
	 * *Note 1:* This event is triggered by user gestures, like creating a file from the
	 * explorer, or from the {@linkcode workspace.applyEdit}-api. This event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.
	 *
	 * *Note 2:* When this event is fired, edits to files that are are being created cannot be applied.</haxe_doc>
		</onWillCreateFiles>
		<onDidCreateFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileCreateEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been created.
	 *
	 * *Note:* This event is triggered by user gestures, like creating a file from the
	 * explorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.</haxe_doc>
		</onDidCreateFiles>
		<onWillDeleteFiles public="1" set="null">
			<t path="vscode.Event"><c path="vscode.FileWillDeleteEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being deleted.
	 *
	 * *Note 1:* This event is triggered by user gestures, like deleting a file from the
	 * explorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.
	 *
	 * *Note 2:* When deleting a folder with children only one event is fired.</haxe_doc>
		</onWillDeleteFiles>
		<onDidDeleteFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileDeleteEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been deleted.
	 *
	 * *Note 1:* This event is triggered by user gestures, like deleting a file from the
	 * explorer, or from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.
	 *
	 * *Note 2:* When deleting a folder with children only one event is fired.</haxe_doc>
		</onDidDeleteFiles>
		<onWillRenameFiles public="1" set="null">
			<t path="vscode.Event"><c path="vscode.FileWillRenameEvent"/></t>
			<haxe_doc>* An event that is emitted when files are being renamed.
	 *
	 * *Note 1:* This event is triggered by user gestures, like renaming a file from the
	 * explorer, and from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.
	 *
	 * *Note 2:* When renaming a folder with children only one event is fired.</haxe_doc>
		</onWillRenameFiles>
		<onDidRenameFiles public="1" set="null">
			<t path="vscode.Event"><t path="vscode.FileRenameEvent"/></t>
			<haxe_doc>* An event that is emitted when files have been renamed.
	 *
	 * *Note 1:* This event is triggered by user gestures, like renaming a file from the
	 * explorer, and from the {@linkcode workspace.applyEdit}-api, but this event is *not* fired when
	 * files change on disk, e.g triggered by another application, or when using the
	 * {@linkcode FileSystem workspace.fs}-api.
	 *
	 * *Note 2:* When renaming a folder with children only one event is fired.</haxe_doc>
		</onDidRenameFiles>
		<getConfiguration public="1" set="method">
			<f a="?section:?scope">
				<c path="String"/>
				<t path="vscode.ConfigurationScope"/>
				<c path="vscode.WorkspaceConfiguration"/>
			</f>
			<haxe_doc>* Get a workspace configuration object.
	 *
	 * When a section-identifier is provided only that part of the configuration
	 * is returned. Dots in the section-identifier are interpreted as child-access,
	 * like `{ myExt: { setting: { doIt: true }}}` and `getConfiguration('myExt.setting').get('doIt') === true`.
	 *
	 * When a scope is provided configuration confined to that scope is returned. Scope can be a resource or a language identifier or both.
	 *
	 * @param section A dot-separated identifier.
	 * @param scope A scope for which the configuration is asked for.
	 * @returns The full configuration or a subset.</haxe_doc>
		</getConfiguration>
		<onDidChangeConfiguration public="1" set="null">
			<t path="vscode.Event"><t path="vscode.ConfigurationChangeEvent"/></t>
			<haxe_doc>* An event that is emitted when the {@link WorkspaceConfiguration configuration} changed.</haxe_doc>
		</onDidChangeConfiguration>
		<registerTaskProvider public="1" params="T" set="method">
			<f a="type:provider">
				<c path="String"/>
				<t path="vscode.TaskProvider"><c path="registerTaskProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<meta><m n=":deprecated"><e>"Use the corresponding function on the `tasks` namespace instead"</e></m></meta>
			<haxe_doc>* Register a task provider.
	 *
	 * @deprecated Use the corresponding function on the `tasks` namespace instead
	 *
	 * @param type The task kind type this provider is registered for.
	 * @param provider A task provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerTaskProvider>
		<registerFileSystemProvider public="1" set="method">
			<f a="scheme:provider:options">
				<c path="String"/>
				<t path="vscode.FileSystemProvider"/>
				<a>
					<isReadonly set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Whether the file system provider is readonly, no modifications like write, delete, create are possible.
		 * If a {@link MarkdownString} is given, it will be shown as the reason why the file system is readonly.</haxe_doc>
					</isReadonly>
					<isCaseSensitive set="null">
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
						<haxe_doc>* Whether the file system provider use case sensitive compare for {@link Uri.path paths}</haxe_doc>
					</isCaseSensitive>
				</a>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a filesystem provider for a given scheme, e.g. `ftp`.
	 *
	 * There can only be one provider per scheme and an error is being thrown when a scheme
	 * has been claimed by another provider or when it is reserved.
	 *
	 * @param scheme The uri-{@link Uri.scheme scheme} the provider registers for.
	 * @param provider The filesystem provider.
	 * @param options Immutable metadata about the provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerFileSystemProvider>
		<isTrusted public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* When true, the user has explicitly trusted the contents of the workspace.</haxe_doc>
		</isTrusted>
		<onDidGrantWorkspaceTrust public="1" set="null">
			<t path="vscode.Event"><x path="Void"/></t>
			<haxe_doc>* Event that fires when the current workspace has been trusted.</haxe_doc>
		</onDidGrantWorkspaceTrust>
	</class>
	<class path="VscodeDebug" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<activeDebugSession public="1">
			<x path="Null"><t path="vscode.DebugSession"/></x>
			<haxe_doc>* The currently active {@link DebugSession debug session} or `undefined`. The active debug session is the one
	 * represented by the debug action floating window or the one currently shown in the drop down menu of the debug action floating window.
	 * If no debug session is active, the value is `undefined`.</haxe_doc>
		</activeDebugSession>
		<activeDebugConsole public="1">
			<t path="vscode.DebugConsole"/>
			<haxe_doc>* The currently active {@link DebugConsole debug console}.
	 * If no debug session is active, output sent to the debug console is not shown.</haxe_doc>
		</activeDebugConsole>
		<breakpoints public="1">
			<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
			<haxe_doc>* List of breakpoints.</haxe_doc>
		</breakpoints>
		<onDidChangeActiveDebugSession public="1" set="null">
			<t path="vscode.Event"><x path="Null"><t path="vscode.DebugSession"/></x></t>
			<haxe_doc>* An {@link Event} which fires when the {@link debug.activeDebugSession active debug session}
	 * has changed. *Note* that the event also fires when the active debug session changes
	 * to `undefined`.</haxe_doc>
		</onDidChangeActiveDebugSession>
		<onDidStartDebugSession public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSession"/></t>
			<haxe_doc>* An {@link Event} which fires when a new {@link DebugSession debug session} has been started.</haxe_doc>
		</onDidStartDebugSession>
		<onDidReceiveDebugSessionCustomEvent public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSessionCustomEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when a custom DAP event is received from the {@link DebugSession debug session}.</haxe_doc>
		</onDidReceiveDebugSessionCustomEvent>
		<onDidTerminateDebugSession public="1" set="null">
			<t path="vscode.Event"><t path="vscode.DebugSession"/></t>
			<haxe_doc>* An {@link Event} which fires when a {@link DebugSession debug session} has terminated.</haxe_doc>
		</onDidTerminateDebugSession>
		<onDidChangeBreakpoints public="1" set="null">
			<t path="vscode.Event"><t path="vscode.BreakpointsChangeEvent"/></t>
			<haxe_doc>* An {@link Event} that is emitted when the set of breakpoints is added, removed, or changed.</haxe_doc>
		</onDidChangeBreakpoints>
		<activeStackItem public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.DebugThread"/>
	<c path="vscode.DebugStackFrame"/>
</x></x>
			<haxe_doc>* The currently focused thread or stack frame, or `undefined` if no
	 * thread or stack is focused. A thread can be focused any time there is
	 * an active debug session, while a stack frame can only be focused when
	 * a session is paused and the call stack has been retrieved.</haxe_doc>
		</activeStackItem>
		<onDidChangeActiveStackItem public="1">
			<t path="vscode.Event"><x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.DebugThread"/>
	<c path="vscode.DebugStackFrame"/>
</x></x></t>
			<haxe_doc>* An event which fires when the {@link debug.activeStackItem} has changed.</haxe_doc>
		</onDidChangeActiveStackItem>
		<registerDebugConfigurationProvider public="1" set="method">
			<f a="debugType:provider:?triggerKind">
				<c path="String"/>
				<t path="vscode.DebugConfigurationProvider"/>
				<x path="vscode.DebugConfigurationProviderTriggerKind"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a {@link DebugConfigurationProvider debug configuration provider} for a specific debug type.
	 * The optional {@link DebugConfigurationProviderTriggerKind triggerKind} can be used to specify when the `provideDebugConfigurations` method of the provider is triggered.
	 * Currently two trigger kinds are possible: with the value `Initial` (or if no trigger kind argument is given) the `provideDebugConfigurations` method is used to provide the initial debug configurations to be copied into a newly created launch.json.
	 * With the trigger kind `Dynamic` the `provideDebugConfigurations` method is used to dynamically determine debug configurations to be presented to the user (in addition to the static configurations from the launch.json).
	 * Please note that the `triggerKind` argument only applies to the `provideDebugConfigurations` method: so the `resolveDebugConfiguration` methods are not affected at all.
	 * Registering a single provider with resolve methods for different trigger kinds, results in the same resolve methods called multiple times.
	 * More than one provider can be registered for the same type.
	 *
	 * @param debugType The debug type for which the provider is registered.
	 * @param provider The {@link DebugConfigurationProvider debug configuration provider} to register.
	 * @param triggerKind The {@link DebugConfigurationProviderTriggerKind trigger} for which the 'provideDebugConfiguration' method of the provider is registered. If `triggerKind` is missing, the value `DebugConfigurationProviderTriggerKind.Initial` is assumed.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerDebugConfigurationProvider>
		<registerDebugAdapterDescriptorFactory public="1" set="method">
			<f a="debugType:factory">
				<c path="String"/>
				<t path="vscode.DebugAdapterDescriptorFactory"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a {@link DebugAdapterDescriptorFactory debug adapter descriptor factory} for a specific debug type.
	 * An extension is only allowed to register a DebugAdapterDescriptorFactory for the debug type(s) defined by the extension. Otherwise an error is thrown.
	 * Registering more than one DebugAdapterDescriptorFactory for a debug type results in an error.
	 *
	 * @param debugType The debug type for which the factory is registered.
	 * @param factory The {@link DebugAdapterDescriptorFactory debug adapter descriptor factory} to register.
	 * @returns A {@link Disposable} that unregisters this factory when being disposed.</haxe_doc>
		</registerDebugAdapterDescriptorFactory>
		<registerDebugAdapterTrackerFactory public="1" set="method">
			<f a="debugType:factory">
				<c path="String"/>
				<t path="vscode.DebugAdapterTrackerFactory"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a debug adapter tracker factory for the given debug type.
	 *
	 * @param debugType The debug type for which the factory is registered or '*' for matching all debug types.
	 * @param factory The {@link DebugAdapterTrackerFactory debug adapter tracker factory} to register.
	 * @returns A {@link Disposable} that unregisters this factory when being disposed.</haxe_doc>
		</registerDebugAdapterTrackerFactory>
		<startDebugging public="1" set="method">
			<f a="folder:nameOrConfiguration:?parentSessionOrOptions">
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="vscode.DebugConfiguration"/>
				</x>
				<x path="haxe.extern.EitherType">
					<t path="vscode.DebugSession"/>
					<t path="vscode.DebugSessionOptions"/>
				</x>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Start debugging by using either a named launch or named compound configuration,
	 * or by directly passing a {@link DebugConfiguration}.
	 * The named configurations are looked up in '.vscode/launch.json' found in the given folder.
	 * Before debugging starts, all unsaved files are saved and the launch configurations are brought up-to-date.
	 * Folder specific variables used in the configuration (e.g. '${workspaceFolder}') are resolved against the given folder.
	 * @param folder The {@link WorkspaceFolder workspace folder} for looking up named configurations and resolving variables or `undefined` for a non-folder setup.
	 * @param nameOrConfiguration Either the name of a debug or compound configuration or a {@link DebugConfiguration} object.
	 * @param parentSessionOrOptions Debug session options. When passed a parent {@link DebugSession debug session}, assumes options with just this parent session.
	 * @returns A thenable that resolves when debugging could be successfully started.</haxe_doc>
		</startDebugging>
		<stopDebugging public="1" set="method">
			<f a="?session">
				<x path="Null"><t path="vscode.DebugSession"/></x>
				<x path="js.lib.Thenable"><x path="Void"/></x>
			</f>
			<haxe_doc>* Stop the given debug session or stop all debug sessions if session is omitted.
	 *
	 * @param session The {@link DebugSession debug session} to stop; if omitted all sessions are stopped.
	 * @returns A thenable that resolves when the session(s) have been stopped.</haxe_doc>
		</stopDebugging>
		<addBreakpoints public="1" set="method">
			<f a="breakpoints">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add breakpoints.
	 * @param breakpoints The breakpoints to add.</haxe_doc>
		</addBreakpoints>
		<removeBreakpoints public="1" set="method">
			<f a="breakpoints">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove breakpoints.
	 * @param breakpoints The breakpoints to remove.</haxe_doc>
		</removeBreakpoints>
		<asDebugSourceUri public="1" set="method">
			<f a="source:?session">
				<t path="vscode.DebugProtocolSource"/>
				<x path="Null"><t path="vscode.DebugSession"/></x>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Converts a "Source" descriptor object received via the Debug Adapter Protocol into a Uri that can be used to load its contents.
	 * If the source descriptor is based on a path, a file Uri is returned.
	 * If the source descriptor uses a reference number, a specific debug Uri (scheme 'debug') is constructed that requires a corresponding ContentProvider and a running debug session
	 *
	 * If the "Source" descriptor has insufficient information for creating the Uri, an error is thrown.
	 *
	 * @param source An object conforming to the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.
	 * @param session An optional debug session that will be used when the source descriptor uses a reference number to load the contents from an active debug session.
	 * @returns A uri that can be used to load the contents of the source.</haxe_doc>
		</asDebugSourceUri>
		<haxe_doc>* Namespace for debug functionality.</haxe_doc>
	</class>
	<abstract path="VscodeLanguagesGetDiagnosticsReturn" params="" file="src/Vscode.hx" module="Vscode">
		<this><c path="Array"><d/></c></this>
		<haxe_doc>Return value type for `VscodeLanguages.getDiagnostics`.</haxe_doc>
		<meta><m n=":dce"/></meta>
		<impl><class path="_Vscode.VscodeLanguagesGetDiagnosticsReturn_Impl_" params="" file="src/Vscode.hx" private="1" module="Vscode" final="1"><meta>
	<m n=":keep"/>
	<m n=":dce"/>
	<m n=":dce"/>
</meta></class></impl>
	</abstract>
	<class path="VscodeTasks" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<registerTaskProvider public="1" params="T" set="method">
			<f a="type:provider">
				<c path="String"/>
				<t path="vscode.TaskProvider"><c path="registerTaskProvider.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a task provider.
	 *
	 * @param type The task kind type this provider is registered for.
	 * @param provider A task provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerTaskProvider>
		<fetchTasks public="1" set="method">
			<f a="?filter">
				<x path="Null"><t path="vscode.TaskFilter"/></x>
				<x path="js.lib.Thenable"><c path="Array"><c path="vscode.Task"/></c></x>
			</f>
			<haxe_doc>* Fetches all tasks available in the systems. This includes tasks
	 * from `tasks.json` files as well as tasks from task providers
	 * contributed through extensions.
	 *
	 * @param filter Optional filter to select tasks of a certain type or version.
	 * @returns A thenable that resolves to an array of tasks.</haxe_doc>
		</fetchTasks>
		<executeTask public="1" set="method">
			<f a="task">
				<c path="vscode.Task"/>
				<x path="js.lib.Thenable"><t path="vscode.TaskExecution"/></x>
			</f>
			<haxe_doc>* Executes a task that is managed by the editor. The returned
	 * task execution can be used to terminate the task.
	 *
	 * @throws When running a ShellExecution or a ProcessExecution
	 * task in an environment where a new process cannot be started.
	 * In such an environment, only CustomExecution tasks can be run.
	 *
	 * @param task the task to execute
	 * @returns A thenable that resolves to a task execution.</haxe_doc>
		</executeTask>
		<taskExecutions public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TaskExecution"/></x>
			<haxe_doc>* The currently active task executions or an empty array.</haxe_doc>
		</taskExecutions>
		<onDidStartTask public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskStartEvent"/></t>
			<haxe_doc>* Fires when a task starts.</haxe_doc>
		</onDidStartTask>
		<onDidEndTask public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskEndEvent"/></t>
			<haxe_doc>* Fires when a task ends.</haxe_doc>
		</onDidEndTask>
		<onDidStartTaskProcess public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskProcessStartEvent"/></t>
			<haxe_doc>* Fires when the underlying process has been started.
	 * This event will not fire for tasks that don't
	 * execute an underlying process.</haxe_doc>
		</onDidStartTaskProcess>
		<onDidEndTaskProcess public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TaskProcessEndEvent"/></t>
			<haxe_doc>* Fires when the underlying process has ended.
	 * This event will not fire for tasks that don't
	 * execute an underlying process.</haxe_doc>
		</onDidEndTaskProcess>
		<haxe_doc>* Namespace for tasks functionality.</haxe_doc>
	</class>
	<class path="VscodeComments" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<createCommentController public="1" set="method">
			<f a="id:label">
				<c path="String"/>
				<c path="String"/>
				<t path="vscode.CommentController"/>
			</f>
			<haxe_doc>* Creates a new {@link CommentController comment controller} instance.
	 *
	 * @param id An `id` for the comment controller.
	 * @param label A human-readable string for the comment controller.
	 * @returns An instance of {@link CommentController comment controller}.</haxe_doc>
		</createCommentController>
		<haxe_doc>* Namespace for authentication.</haxe_doc>
	</class>
	<class path="VscodeAuthentication" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<getSession public="1" set="method">
			<f a="providerId:scopes:?options">
				<c path="String"/>
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<x path="Null"><t path="vscode.AuthenticationGetSessionOptions"/></x>
				<x path="js.lib.Thenable"><x path="Null"><t path="vscode.AuthenticationSession"/></x></x>
			</f>
			<haxe_doc>* Get an authentication session matching the desired scopes. Rejects if a provider with providerId is not
	 * registered, or if the user does not consent to sharing authentication information with
	 * the extension. If there are multiple sessions with the same scopes, the user will be shown a
	 * quickpick to select which account they would like to use.
	 *
	 * Currently, there are only two authentication providers that are contributed from built in extensions
	 * to the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.
	 * @param providerId The id of the provider to use
	 * @param scopes A list of scopes representing the permissions requested. These are dependent on the authentication provider
	 * @param options The {@link AuthenticationGetSessionOptions} to use
	 * @returns A thenable that resolves to an authentication session if available, or undefined if there are no sessions</haxe_doc>
		</getSession>
		<getAccounts public="1" set="method">
			<f a="providerId">
				<c path="String"/>
				<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSessionAccountInformation"/></x></x>
			</f>
			<haxe_doc>* Get all accounts that the user is logged in to for the specified provider.
	 * Use this paired with {@link getSession} in order to get an authentication session for a specific account.
	 *
	 * Currently, there are only two authentication providers that are contributed from built in extensions
	 * to the editor that implement GitHub and Microsoft authentication: their providerId's are 'github' and 'microsoft'.
	 *
	 * Note: Getting accounts does not imply that your extension has access to that account or its authentication sessions. You can verify access to the account by calling {@link getSession}.
	 *
	 * @param providerId The id of the provider to use
	 * @returns A thenable that resolves to a readonly array of authentication accounts.</haxe_doc>
		</getAccounts>
		<onDidChangeSessions public="1" set="null">
			<t path="vscode.Event"><t path="vscode.AuthenticationSessionsChangeEvent"/></t>
			<haxe_doc>* An {@link Event} which fires when the authentication sessions of an authentication provider have
	 * been added, removed, or changed.</haxe_doc>
		</onDidChangeSessions>
		<registerAuthenticationProvider public="1" set="method">
			<f a="id:label:provider:?options">
				<c path="String"/>
				<c path="String"/>
				<t path="vscode.AuthenticationProvider"/>
				<x path="Null"><t path="vscode.AuthenticationProviderOptions"/></x>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register an authentication provider.
	 *
	 * There can only be one provider per id and an error is being thrown when an id
	 * has already been used by another provider. Ids are case-sensitive.
	 *
	 * @param id The unique identifier of the provider.
	 * @param label The human-readable name of the provider.
	 * @param provider The authentication provider provider.
	 * @param options Additional options for the provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerAuthenticationProvider>
	</class>
	<class path="VscodeL10n" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<t public="1" set="method">
			<f a="message:args">
				<c path="String"/>
				<x path="haxe.Rest"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Float"/>
		<x path="haxe.extern.EitherType">
			<x path="Int"/>
			<x path="Bool"/>
		</x>
	</x>
</x></c></x>
				<c path="String"/>
			</f>
			<haxe_doc>* Marks a string for localization. If a localized bundle is available for the language specified by
	 * {@link env.language} and the bundle has a localized value for this message, then that localized
	 * value will be returned (with injected {@link args} values for any templated values).
	 *
	 * @param message - The message to localize. Supports index templating where strings like `{0}` and `{1}` are
	 * replaced by the item at that index in the {@link args} array.
	 * @param args - The arguments to be used in the localized string. The index of the argument is used to
	 * match the template placeholder in the localized string.
	 * @returns localized string with injected arguments.
	 *
	 * @example
	 * l10n.t('Hello {0}!', 'World');</haxe_doc>
			<overloads>
				<t public="1" set="method">
					<f a="options">
						<a>
							<message><c path="String"/></message>
							<comment><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="Array"><c path="String"/></c>
</x></comment>
							<args>
								<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Float"/>
		<x path="haxe.extern.EitherType">
			<x path="Int"/>
			<x path="Bool"/>
		</x>
	</x>
</x></c>
	<t path="Record">
		<c path="String"/>
		<x path="Any"/>
	</t>
</x></x>
								<meta><m n=":optional"/></meta>
							</args>
						</a>
						<c path="String"/>
					</f>
					<haxe_doc>* Marks a string for localization. If a localized bundle is available for the language specified by
	 * {@link env.language} and the bundle has a localized value for this message, then that localized
	 * value will be returned (with injected args values for any templated values).
	 *
	 * @param options The options to use when localizing the message.
	 * @returns localized string with injected arguments.</haxe_doc>
				</t>
				<t public="1" set="method">
					<f a="message:args">
						<c path="String"/>
						<t path="Record">
							<c path="String"/>
							<x path="Any"/>
						</t>
						<c path="String"/>
					</f>
					<haxe_doc>* Marks a string for localization. If a localized bundle is available for the language specified by
	 * {@link env.language} and the bundle has a localized value for this message, then that localized
	 * value will be returned (with injected {@link args} values for any templated values).
	 *
	 * @param message The message to localize. Supports named templating where strings like `{foo}` and `{bar}` are
	 * replaced by the value in the Record for that key (foo, bar, etc).
	 * @param args The arguments to be used in the localized string. The name of the key in the record is used to
	 * match the template placeholder in the localized string.
	 * @returns localized string with injected arguments.
	 *
	 * @example
	 * l10n.t('Hello {name}', { name: 'Erich' });</haxe_doc>
				</t>
			</overloads>
		</t>
		<bundle final="1" public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>* The bundle of localized strings that have been loaded for the extension.
	 * It's undefined if no bundle has been loaded. The bundle is typically not loaded if
	 * there was no bundle found or when we are running with the default language.</haxe_doc>
		</bundle>
		<uri final="1" public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The URI of the localization bundle that has been loaded for the extension.
	 * It's undefined if no bundle has been loaded. The bundle is typically not loaded if
	 * there was no bundle found or when we are running with the default language.</haxe_doc>
		</uri>
		<haxe_doc><![CDATA[* Namespace for localization-related functionality in the extension API. To use this properly,
 * you must have `l10n` defined in your extension manifest and have bundle.l10n.<language>.json files.
 * For more information on how to generate bundle.l10n.<language>.json files, check out the
 * [vscode-l10n repo](https://github.com/microsoft/vscode-l10n).
 *
 * Note: Built-in extensions (for example, Git, TypeScript Language Features, GitHub Authentication)
 * are excluded from the `l10n` property requirement. In other words, they do not need to specify
 * a `l10n` in the extension manifest because their translated strings come from Language Packs.]]></haxe_doc>
	</class>
	<class path="VscodeNotebooks" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<createNotebookController public="1" set="method">
			<f a="id:notebookType:label:?handler">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<f a="cells:notebook:controller">
					<c path="Array"><t path="vscode.NotebookCell"/></c>
					<t path="vscode.NotebookDocument"/>
					<t path="vscode.NotebookController"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<t path="vscode.NotebookController"/>
			</f>
			<haxe_doc>* Creates a new notebook controller.
	 *
	 * @param id Identifier of the controller. Must be unique per extension.
	 * @param notebookType A notebook type for which this controller is for.
	 * @param label The label of the controller.
	 * @param handler The execute-handler of the controller.
	 * @returns A new notebook controller.</haxe_doc>
		</createNotebookController>
		<registerNotebookCellStatusBarItemProvider public="1" set="method">
			<f a="notebookType:provider">
				<c path="String"/>
				<t path="vscode.NotebookCellStatusBarItemProvider"/>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a {@link NotebookCellStatusBarItemProvider cell statusbar item provider} for the given notebook type.
	 *
	 * @param notebookType The notebook type to register for.
	 * @param provider A cell status bar provider.
	 * @returns A {@link Disposable} that unregisters this provider when being disposed.</haxe_doc>
		</registerNotebookCellStatusBarItemProvider>
		<createRendererMessaging public="1" set="method">
			<f a="rendererId">
				<c path="String"/>
				<t path="vscode.NotebookRendererMessaging"/>
			</f>
			<haxe_doc>* Creates a new messaging instance used to communicate with a specific renderer.
	 *
	 * * *Note 1:* Extensions can only create renderer that they have defined in their `package.json`-file
	 * * *Note 2:* A renderer only has access to messaging if `requiresMessaging` is set to `always` or `optional` in
	 * its `notebookRenderer` contribution.
	 *
	 * @param rendererId The renderer ID to communicate with
	 * @returns A new notebook renderer messaging object.</haxe_doc>
		</createRendererMessaging>
		<haxe_doc>* Namespace for notebooks.
 *
 * The notebooks functionality is composed of three loosely coupled components:
 *
 * 1. {@link NotebookSerializer} enable the editor to open, show, and save notebooks
 * 2. {@link NotebookController} own the execution of notebooks, e.g they create output from code cells.
 * 3. NotebookRenderer present notebook output in the editor. They run in a separate context.</haxe_doc>
	</class>
	<class path="VscodeTests" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<createTestController public="1" set="method">
			<f a="id:label">
				<c path="String"/>
				<c path="String"/>
				<t path="vscode.TestController"/>
			</f>
			<haxe_doc>* Creates a new test controller.
	 *
	 * @param id Identifier for the controller, must be globally unique.
	 * @param label A human-readable label for the controller.
	 * @returns An instance of the {@link TestController}.</haxe_doc>
		</createTestController>
		<haxe_doc>* Namespace for testing functionality. Tests are published by registering
 * {@link TestController} instances, then adding {@link TestItem TestItems}.
 * Controllers may also describe how to run tests by creating one or more
 * {@link TestRunProfile} instances.</haxe_doc>
	</class>
	<class path="VscodeChat" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<createChatParticipant public="1" set="method">
			<f a="id:handler">
				<c path="String"/>
				<t path="vscode.ChatRequestHandler"/>
				<t path="vscode.ChatParticipant"/>
			</f>
			<haxe_doc>* Create a new {@link ChatParticipant chat participant} instance.
	 *
	 * @param id A unique identifier for the participant.
	 * @param handler A request handler for the participant.
	 * @returns A new chat participant</haxe_doc>
		</createChatParticipant>
		<haxe_doc>* Namespace for chat functionality. Users interact with chat participants by sending messages
 * to them in the chat view. Chat participants can respond with markdown or other types of content
 * via the {@link ChatResponseStream}.</haxe_doc>
	</class>
	<class path="VscodeLm" params="" file="src/Vscode.hx" module="Vscode" extern="1">
		<onDidChangeChatModels public="1">
			<t path="vscode.Event"><x path="Void"/></t>
			<haxe_doc>* An event that is fired when the set of available chat models changes.</haxe_doc>
		</onDidChangeChatModels>
		<selectChatModels public="1" set="method">
			<f a="?selector">
				<x path="Null"><t path="vscode.LanguageModelChatSelector"/></x>
				<x path="js.lib.Thenable"><c path="Array"><t path="vscode.LanguageModelChat"/></c></x>
			</f>
			<haxe_doc><![CDATA[* Select chat models by a {@link LanguageModelChatSelector selector}. This can yield multiple or no chat models and
	 * extensions must handle these cases, esp. when no chat model exists, gracefully.
	 *
	 * ```ts
	 * const models = await vscode.lm.selectChatModels({ family: 'gpt-3.5-turbo' });
	 * if (models.length > 0) {
	 * 	const [first] = models;
	 * 	const response = await first.sendRequest(...)
	 * 	// ...
	 * } else {
	 * 	// NO chat models available
	 * }
	 * ```
	 *
	 * A selector can be written to broadly match all models of a given vendor or family, or it can narrowly select one model by ID.
	 * Keep in mind that the available set of models will change over time, but also that prompts may perform differently in
	 * different models.
	 *
	 * *Note* that extensions can hold on to the results returned by this function and use them later. However, when the
	 * {@link onDidChangeChatModels}-event is fired the list of chat models might have changed and extensions should re-query.
	 *
	 * @param selector A chat model selector. When omitted all chat models are returned.
	 * @returns An array of chat models, can be empty!]]></haxe_doc>
		</selectChatModels>
		<registerTool public="1" params="T" set="method">
			<f a="name:tool">
				<c path="String"/>
				<t path="vscode.LanguageModelTool"><c path="registerTool.T"/></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Register a LanguageModelTool. The tool must also be registered in the package.json `languageModelTools` contribution
	 * point. A registered tool is available in the {@link lm.tools} list for any extension to see. But in order for it to
	 * be seen by a language model, it must be passed in the list of available tools in {@link LanguageModelChatRequestOptions.tools}.
	 * @returns A {@link Disposable} that unregisters the tool when disposed.</haxe_doc>
		</registerTool>
		<tools public="1">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.LanguageModelToolInformation"/></x>
			<haxe_doc>* A list of all available tools that were registered by all extensions using {@link lm.registerTool}. They can be called
	 * with {@link lm.invokeTool} with input that match their declared `inputSchema`.</haxe_doc>
		</tools>
		<invokeTool public="1" set="method">
			<f a="name:options:?token">
				<c path="String"/>
				<t path="vscode.LanguageModelToolInvocationOptions"><a/></t>
				<x path="Null"><t path="vscode.CancellationToken"/></x>
				<x path="js.lib.Thenable"><c path="vscode.LanguageModelToolResult"/></x>
			</f>
			<haxe_doc>* Invoke a tool listed in {@link lm.tools} by name with the given input. The input will be validated against
	 * the schema declared by the tool
	 *
	 * A tool can be invoked by a chat participant, in the context of handling a chat request, or globally by any extension in
	 * any custom flow.
	 *
	 * In the former case, the caller shall pass the
	 * {@link LanguageModelToolInvocationOptions.toolInvocationToken toolInvocationToken}, which comes with the a
	 * {@link ChatRequest.toolInvocationToken chat request}. This makes sure the chat UI shows the tool invocation for the
	 * correct conversation.
	 *
	 * A tool {@link LanguageModelToolResult result} is an array of {@link LanguageModelTextPart text-} and
	 * {@link LanguageModelPromptTsxPart prompt-tsx}-parts. If the tool caller is using `@vscode/prompt-tsx`, it can
	 * incorporate the response parts into its prompt using a `ToolResult`. If not, the parts can be passed along to the
	 * {@link LanguageModelChat} via a user message with a {@link LanguageModelToolResultPart}.
	 *
	 * If a chat participant wants to preserve tool results for requests across multiple turns, it can store tool results in
	 * the {@link ChatResult.metadata} returned from the handler and retrieve them on the next turn from
	 * {@link ChatResponseTurn.result}.
	 *
	 * @param name The name of the tool to call.
	 * @param options The options to use when invoking the tool.
	 * @param token A cancellation token. See {@link CancellationTokenSource} for how to create one.
	 * @returns The result of the tool invocation.</haxe_doc>
		</invokeTool>
		<haxe_doc>* Namespace for language model related functionality.</haxe_doc>
	</class>
	<typedef path="Record" params="K:V" file="src/Vscode.hx" module="Vscode"><t path="Map">
	<c path="Record.K"/>
	<c path="Record.V"/>
</t></typedef>
	<class path="VscodeProposed" params="" file="src/VscodeProposed.hx" extern="1"><meta><m n=":jsRequire"><e>"vscode"</e></m></meta></class>
	<abstract path="haxe.CallStack" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.DynamicAccess" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/DynamicAccess.hx">
		<from><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></from>
		<this><d><c path="haxe.DynamicAccess.T"/></d></this>
		<to><icast><d><c path="haxe.DynamicAccess.T"/></d></icast></to>
		<haxe_doc>DynamicAccess is an abstract type for working with anonymous structures
	that are intended to hold collections of objects by the string key.

	For example, these types of structures are often created from JSON.

	Basically, it wraps `Reflect` calls in a `Map`-like interface.</haxe_doc>
		<impl><class path="haxe._DynamicAccess.DynamicAccess_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/DynamicAccess.hx" private="1" module="haxe.DynamicAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.EnumTools" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:

			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="138" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="149" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="163" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="175" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe._Exception.NativeException" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/haxe/Exception.hx" private="1" module="haxe.Exception" extern="1">
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
			<m n=":native"><e>"Error"</e></m>
		</meta>
	</class>
	<class path="haxe._NativeStackTrace.V8Error" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/haxe/NativeStackTrace.hx" private="1" module="haxe.NativeStackTrace" extern="1">
		<prepareStackTrace public="1" static="1"><f a="error:structuredStackTrace">
	<c path="js.lib.Error"/>
	<c path="Array"><t path="haxe.V8CallSite"/></c>
	<x path="Any"/>
</f></prepareStackTrace>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<typedef path="haxe.V8CallSite" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/_std/haxe/NativeStackTrace.hx" module="haxe.NativeStackTrace"><a>
	<getLineNumber set="method"><f a=""><x path="Int"/></f></getLineNumber>
	<getFunctionName set="method"><f a=""><c path="String"/></f></getFunctionName>
	<getFileName set="method"><f a=""><c path="String"/></f></getFileName>
	<getColumnNumber set="method"><f a=""><x path="Int"/></f></getColumnNumber>
</a></typedef>
	<typedef path="haxe._Rest.NativeRest" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Rest.hx" private="1" module="haxe.Rest"><c path="Array"><c path="haxe._Rest.NativeRest.T"/></c></typedef>
	<abstract path="haxe.Rest" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Rest.hx">
		<from><icast field="of"><c path="Array"><c path="of.T"/></c></icast></from>
		<this><t path="haxe._Rest.NativeRest"><c path="haxe.Rest.T"/></t></this>
		<to><icast field="toArray"><c path="Array"><c path="haxe.Rest.T"/></c></icast></to>
		<haxe_doc><![CDATA[A special type that represents a "rest" function argument.

	The special `...` syntax can be used for convenience and improved readability:

	```haxe
	function f(...rest:Int) {
		$type(rest); // haxe.Rest<Int>
	}

	f(1, 2, 3);

	final array = [1, 2, 3];
	f(...array);
	```

	Should be used as a type for the last argument of a method, indicating that
	an arbitrary number of arguments of the given type can be passed to that method.

	Allows to use array access by index to get values of rest arguments.
	If the index exceeds the amount of rest arguments passed, the result is unspecified.]]></haxe_doc>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe._Rest.Rest_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/Rest.hx" private="1" module="haxe.Rest" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.ds.TreeNode" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/BalancedTree.hx" module="haxe.ds.BalancedTree">
		<left public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></left>
		<right public="1"><c path="haxe.ds.TreeNode">
	<c path="haxe.ds.TreeNode.K"/>
	<c path="haxe.ds.TreeNode.V"/>
</c></right>
		<key public="1"><c path="haxe.ds.TreeNode.K"/></key>
		<value public="1"><c path="haxe.ds.TreeNode.V"/></value>
		<_height><x path="Int"/></_height>
		<get_height public="1" get="inline" set="null" line="264"><f a=""><x path="Int"/></f></get_height>
		<new public="1" set="method" line="252">
			<f a="l:k:v:r:?h" v="::::-1">
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<c path="haxe.ds.TreeNode.K"/>
				<c path="haxe.ds.TreeNode.V"/>
				<c path="haxe.ds.TreeNode">
					<c path="haxe.ds.TreeNode.K"/>
					<c path="haxe.ds.TreeNode.V"/>
				</c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ h : -1 }</e></m></meta>
		</new>
		<haxe_doc>A tree node of `haxe.ds.BalancedTree`.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
	<_new public="1" set="method" static="1">
		<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
		<meta><m n=":noCompletion"/></meta>
		<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
	</_new>
	<meta><m n=":keep"/></meta>
</class></impl>
	</abstract>
	<class path="haxe.ds._Map.Map_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1">
		<_new public="1" set="method" static="1">
			<f a=""><x path="haxe.ds.Map">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</x></f>
			<meta><m n=":noCompletion"/></meta>
			<haxe_doc>Creates a new Map.

		This becomes a constructor call to one of the specialization types in
		the output. The rules for that are as follows:

		1. if `K` is a `String`, `haxe.ds.StringMap` is used
		2. if `K` is an `Int`, `haxe.ds.IntMap` is used
		3. if `K` is an `EnumValue`, `haxe.ds.EnumValueMap` is used
		4. if `K` is any other class or structure, `haxe.ds.ObjectMap` is used
		5. if `K` is any other type, it causes a compile-time error

		(Cpp) Map does not use weak keys on `ObjectMap` by default.</haxe_doc>
		</_new>
		<meta><m n=":keep"/></meta>
	</class>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.extern.EitherType" params="T1:T2" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/extern/EitherType.hx">
		<from>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="haxe.extern.EitherType.T1"/></icast>
			<icast><c path="haxe.extern.EitherType.T2"/></icast>
		</to>
		<haxe_doc><![CDATA[An abstract type allowing values to be either of `T1` or `T2` type.
	Supports implicit casts from/to either types.

	It is useful for interfacing with external code on dynamic platforms
	such as JavaScript or Python.

	Otherwise, use of this type is discouraged.

	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe.extern._EitherType.EitherType_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/extern/EitherType.hx" private="1" module="haxe.extern.EitherType" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.extern.Rest" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/extern/Rest.hx">
		<x path="haxe.Rest"><c path="haxe.extern.Rest.T"/></x>
		<haxe_doc><![CDATA[DEPRECATED: use haxe.Rest instead.
	
	A special type that represents "rest" function argument.
	Should be used as a type for the last argument of an extern method,
	representing that arbitrary number of arguments of given type can be
	passed to that method.
	@see <https://haxe.org/manual/lf-externs.html>]]></haxe_doc>
	</typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" get="inline" set="null" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" get="inline" set="null" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" get="inline" set="null" line="35">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.Boot" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/Boot.hx">
		<__string_rec set="method" line="58" static="1">
			<f a="o:s">
				<x path="Null"><a>
	<toString set="null"><f a=""><c path="String"/></f></toString>
	<length set="null"><x path="Int"/></length>
	<hasOwnProperty set="null"><x path="Null"><f a="">
	<c path="String"/>
	<x path="Bool"/>
</f></x></hasOwnProperty>
	<_hx_index set="null"><x path="Int"/></_hx_index>
	<__enum__ set="null"><x path="Bool"/></__enum__>
</a></x>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":ifFeature"><e>"has_enum"</e></m>
			</meta>
		</__string_rec>
		<__toStr static="1"><c path="js.lib.Function"/></__toStr>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
		</meta>
	</class>
	<class path="js.Lib" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/Lib.hx">
		<require public="1" get="inline" set="null" line="65" static="1">
			<f a="module">
				<c path="String"/>
				<d/>
			</f>
			<haxe_doc>Inserts a `require` expression that loads JavaScript object from
		a module or file specified in the `module` argument.

		This is only supported in environments where `require` function
		is available, such as Node.js or RequireJS.</haxe_doc>
		</require>
		<parseInt public="1" get="accessor" set="null" static="1">
			<f a="string:?radix">
				<c path="String"/>
				<x path="Int"/>
				<x path="Float"/>
			</f>
			<haxe_doc>Native JavaScript `parseInt` function.

		Its specification is different from `Std.parseInt`, so one
		might want to access the native one.</haxe_doc>
		</parseInt>
		<get_parseInt get="inline" set="null" line="77" static="1"><f a=""><f a="string:?radix">
	<c path="String"/>
	<x path="Int"/>
	<x path="Float"/>
</f></f></get_parseInt>
		<nativeThis public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>`nativeThis` is the JavaScript `this`, which is semantically different
		from the Haxe `this`. Use `nativeThis` only when working with external
		JavaScript code.

		In Haxe, `this` is always bound to a class instance.
		In JavaScript, `this` in a function can be bound to an arbitrary
		variable when the function is called using `func.call(thisObj, ...)` or
		`func.apply(thisObj, [...])`.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this</haxe_doc>
		</nativeThis>
		<get_nativeThis get="inline" set="null" line="108" static="1"><f a=""><d/></f></get_nativeThis>
		<typeof public="1" get="inline" set="null" line="118" static="1">
			<f a="o">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Call JavaScript `typeof` operator on the `o` value
		and return a string representing the JavaScript type of a value.

		Read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</haxe_doc>
		</typeof>
		<global public="1" get="accessor" set="null" static="1">
			<d/>
			<haxe_doc>An alias of the JS "global" object.

		Concretely, it is set as the first defined value in the list of
		`window`, `global`, `self`, and `this` in the top-level of the compiled output.</haxe_doc>
		</global>
		<get_global get="inline" set="null" line="130" static="1">
			<f a=""><d/></f>
			<meta><m n=":has_untyped"/></meta>
		</get_global>
		<haxe_doc>Platform-specific JavaScript Library. Provides some platform-specific functions
	for the JavaScript target.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="js.lib.ArrayBuffer" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/ArrayBuffer.hx" extern="1">
		<isView public="1" set="method" static="1"><f a="value">
	<d/>
	<x path="Bool"/>
</f></isView>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<slice public="1" set="method"><f a="begin:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="js.lib.ArrayBuffer"/>
</f></slice>
		<new public="1" set="method">
			<f a="length">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<meta><m n=":native"><e>"ArrayBuffer"</e></m></meta>
	</class>
	<class path="js.lib.ArrayBufferView" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/ArrayBufferView.hx" extern="1" interface="1">
		<buffer final="1" public="1"><c path="js.lib.ArrayBuffer"/></buffer>
		<byteOffset final="1" public="1"><x path="Int"/></byteOffset>
		<byteLength final="1" public="1"><x path="Int"/></byteLength>
		<haxe_doc><![CDATA[`ArrayBufferView` is a helper type representing any of the following JavaScript `TypedArray` types:

	Documentation [ArrayBufferView](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).

	@see <https://developer.mozilla.org/en-US/docs/Web/API/ArrayBufferView>]]></haxe_doc>
	</class>
	<class path="js.lib.Uint8Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Uint8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8Array"/>
	</f>
	<haxe_doc>Creates a new `Uint8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new `Uint8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8Array` typed array represents an array of 8-bit unsigned integers. The contents
	are initialized to 0. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8Array"</e></m></meta>
	</class>
	<class path="js.lib.Error" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" extern="1">
		<message public="1"><c path="String"/></message>
		<name public="1"><c path="String"/></name>
		<stack public="1" set="null"><c path="String"/></stack>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"Error"</e></m></meta>
	</class>
	<class path="js.lib.EvalError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"EvalError"</e></m></meta>
	</class>
	<class path="js.lib.RangeError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"RangeError"</e></m></meta>
	</class>
	<class path="js.lib.ReferenceError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"ReferenceError"</e></m></meta>
	</class>
	<class path="js.lib.SyntaxError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"SyntaxError"</e></m></meta>
	</class>
	<class path="js.lib.TypeError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"TypeError"</e></m></meta>
	</class>
	<class path="js.lib.URIError" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Error.hx" module="js.lib.Error" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method"><f a="?message">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta><m n=":native"><e>"URIError"</e></m></meta>
	</class>
	<class path="js.lib.Float32Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Float32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Float32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float32Array"/>
	</f>
	<haxe_doc>Creates a new `Float32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new `Float32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float32Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float32Array` typed array represents an array of 32-bit floating point numbers
	(corresponding to the C float data type) in the platform byte order. If control over byte order is
	needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation)

	Documentation [Float32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float32Array"</e></m></meta>
	</class>
	<class path="js.lib.Float64Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Float64Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 8 in the case of an `Float64Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Float"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Float"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Float64Array"/>
	</f>
	<haxe_doc>Creates a new `Float64Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new `Float64Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Float64Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Float64Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Float64Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Float"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Float"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Float"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Float"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Float64Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Float"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Float"/>
							<x path="Float"/>
							<x path="Int"/>
							<c path="js.lib.Float64Array"/>
							<x path="Int"/>
						</f>
						<x path="Float"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Float64Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Float"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="Array"><x path="Int"/></c>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Float"/>
					<x path="Int"/>
					<c path="js.lib.Float64Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Float"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Float"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Float64Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Float"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Float64Array` typed array represents an array of 64-bit floating point numbers
	(corresponding to the C double data type) in the platform byte order. If control over byte order
	is needed, use `DataView` instead. The contents are initialized to `0`. Once established, you can
	reference elements in the array using the object's methods, or using standard array index
	syntax (that is, using bracket notation).

	Documentation [Float64Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Float64Array"</e></m></meta>
	</class>
	<class path="js.lib.Function" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Function.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>Specifies the number of arguments expected by the function.</haxe_doc>
		</length>
		<name public="1">
			<c path="String"/>
			<haxe_doc>The name of the function.</haxe_doc>
		</name>
		<apply public="1" set="method">
			<f a="thisArg:argsArray">
				<d/>
				<c path="Array"><d/></c>
				<d/>
			</f>
			<haxe_doc>Calls a function and sets its this to the provided value, arguments can be passed as an Array object.</haxe_doc>
		</apply>
		<call public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<d/>
			</f>
			<haxe_doc>Calls (executes) a function and sets its this to the provided value, arguments can be passed as they are.</haxe_doc>
		</call>
		<bind public="1" set="method">
			<f a="thisArg:args">
				<d/>
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Function"/>
			</f>
			<haxe_doc>Creates a new function which, when called, has its this set to the provided value,
		with a given sequence of arguments preceding any provided when the new function was called.</haxe_doc>
		</bind>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the source code of the function.</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="arg:rest">
				<c path="String"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Function object.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Function"</e></m></meta>
	</class>
	<class path="js.lib.Int16Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Int16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Int16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int16Array"/>
	</f>
	<haxe_doc>Creates a new `Int16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new `Int16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int16Array` typed array represents an array of twos-complement 16-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int16Array"</e></m></meta>
	</class>
	<class path="js.lib.Int32Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Int32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Int32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int32Array"/>
	</f>
	<haxe_doc>Creates a new `Int32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new `Int32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int32Array` typed array represents an array of twos-complement 32-bit signed integers in
	the platform byte order. If control over byte order is needed, use `DataView` instead. The
	contents are initialized to `0`. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int32Array"</e></m></meta>
	</class>
	<class path="js.lib.Int8Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Int8Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Int8Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Int8Array"/>
	</f>
	<haxe_doc>Creates a new `Int8Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new `Int8Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Int8Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Int8Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Int8Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Int8Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Int8Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Int8Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Int8Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Int8Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Int8Array` typed array represents an array of twos-complement 8-bit signed integers. The
	contents are initialized to 0. Once established, you can reference elements in the array using
	the object's methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Int8Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Int8Array"</e></m></meta>
	</class>
	<typedef path="js.lib.Iterator" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Iterator.hx">
		<a><next set="method"><f a=""><t path="js.lib.IteratorStep"><c path="js.lib.Iterator.T"/></t></f></next></a>
		<haxe_doc>Native JavaScript iterator structure. To enable haxe for-in iteration, use `js.lib.HaxeIterator`, for example `for (v in new js.lib.HaxeIterator(jsIterator))` or add `using js.lib.HaxeIterator;` to your module

	See [Iteration Protocols](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols)</haxe_doc>
	</typedef>
	<typedef path="js.lib.AsyncIterator" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Iterator.hx" module="js.lib.Iterator">
		<a><next set="method"><f a=""><c path="js.lib.Promise"><t path="js.lib.IteratorStep"><c path="js.lib.AsyncIterator.T"/></t></c></f></next></a>
		<haxe_doc>Native JavaScript async iterator structure. 

	See [for await...of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for-await...of)</haxe_doc>
	</typedef>
	<typedef path="js.lib.IteratorStep" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Iterator.hx" module="js.lib.Iterator"><a>
	<value>
		<x path="Null"><c path="js.lib.IteratorStep.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<done><x path="Bool"/></done>
</a></typedef>
	<abstract path="js.lib.KeyValue" params="K:V" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/KeyValue.hx">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper.</haxe_doc>
		<impl><class path="js.lib._KeyValue.KeyValue_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/KeyValue.hx" private="1" module="js.lib.KeyValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Object" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Object.hx" extern="1">
		<assign public="1" params="T" set="method" static="1">
			<f a="target:sources">
				<c path="assign.T"/>
				<t path="haxe.extern.Rest"><a/></t>
				<c path="assign.T"/>
			</f>
			<haxe_doc>Copies the values of all enumerable own properties from one or more
		source objects to a target object.</haxe_doc>
		</assign>
		<create public="1" params="T" set="method" static="1">
			<f a="proto:?propertiesObject">
				<a/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="create.T"/>
			</f>
			<haxe_doc>Creates a new object with the specified prototype object and properties.</haxe_doc>
		</create>
		<defineProperties public="1" params="T" set="method" static="1">
			<f a="obj:props">
				<c path="defineProperties.T"/>
				<x path="haxe.DynamicAccess"><t path="js.lib.ObjectPropertyDescriptor"/></x>
				<c path="defineProperties.T"/>
			</f>
			<haxe_doc>Adds the named properties described by the given descriptors to an object.</haxe_doc>
		</defineProperties>
		<defineProperty public="1" params="T" set="method" static="1">
			<f a="obj:prop:descriptor">
				<c path="defineProperty.T"/>
				<c path="String"/>
				<t path="js.lib.ObjectPropertyDescriptor"/>
				<c path="defineProperty.T"/>
			</f>
			<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
			<overloads><defineProperty public="1" params="T" set="method">
	<f a="obj:prop:descriptor">
		<c path="defineProperty.T"/>
		<c path="js.lib.Symbol"/>
		<t path="js.lib.ObjectPropertyDescriptor"/>
		<c path="defineProperty.T"/>
	</f>
	<haxe_doc>Adds the named property described by a given descriptor to an object.</haxe_doc>
</defineProperty></overloads>
		</defineProperty>
		<entries public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="js.lib.ObjectEntry"/></c>
			</f>
			<haxe_doc>Returns an array containing all of the [key, value] pairs of a given
		object's own enumerable string properties.</haxe_doc>
		</entries>
		<freeze public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="freeze.T"/>
				<c path="freeze.T"/>
			</f>
			<haxe_doc>Freezes an object: other code can't delete or change any properties.</haxe_doc>
		</freeze>
		<fromEntries public="1" params="T" set="method" static="1">
			<f a="iterable">
				<x path="Any"/>
				<c path="fromEntries.T"/>
			</f>
			<haxe_doc>Returns a new object from an iterable of key-value pairs
		(reverses Object.entries).</haxe_doc>
		</fromEntries>
		<getOwnPropertyDescriptor public="1" set="method" static="1">
			<f a="obj:prop">
				<a/>
				<c path="String"/>
				<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
			</f>
			<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
			<overloads>
				<getOwnPropertyDescriptor public="1" params="T" set="method">
					<f a="target:propertyKey">
						<c path="Array"><c path="getOwnPropertyDescriptor.T"/></c>
						<x path="Int"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
				<getOwnPropertyDescriptor public="1" set="method">
					<f a="obj:prop">
						<a/>
						<c path="js.lib.Symbol"/>
						<x path="Null"><t path="js.lib.ObjectPropertyDescriptor"/></x>
					</f>
					<haxe_doc>Returns a property descriptor for a named property on an object.</haxe_doc>
				</getOwnPropertyDescriptor>
			</overloads>
		</getOwnPropertyDescriptor>
		<getOwnPropertyNames public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable and non-enumerable properties.</haxe_doc>
		</getOwnPropertyNames>
		<getOwnPropertySymbols public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="js.lib.Symbol"/></c>
			</f>
			<haxe_doc>Returns an array of all symbol properties found directly upon a given object.</haxe_doc>
		</getOwnPropertySymbols>
		<getPrototypeOf public="1" params="TProto" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Null"><c path="getPrototypeOf.TProto"/></x>
			</f>
			<haxe_doc>Returns the prototype of the specified object.</haxe_doc>
		</getPrototypeOf>
		<is public="1" params="T" set="method" static="1">
			<f a="value1:value2">
				<c path="is.T"/>
				<c path="is.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Compares if two values are the same value. Equates all NaN values
		(which differs from both Abstract Equality Comparison and
		Strict Equality Comparison).</haxe_doc>
		</is>
		<isExtensible public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if extending of an object is allowed.</haxe_doc>
		</isExtensible>
		<isFrozen public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object was frozen.</haxe_doc>
		</isFrozen>
		<isSealed public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines if an object is sealed.</haxe_doc>
		</isSealed>
		<keys public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing the names of all of the given object's own
		enumerable string properties.</haxe_doc>
		</keys>
		<preventExtensions public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="preventExtensions.T"/>
				<c path="preventExtensions.T"/>
			</f>
			<haxe_doc>Prevents any extensions of an object.</haxe_doc>
		</preventExtensions>
		<seal public="1" params="T" set="method" static="1">
			<f a="obj">
				<c path="seal.T"/>
				<c path="seal.T"/>
			</f>
			<haxe_doc>Prevents other code from deleting properties of an object.</haxe_doc>
		</seal>
		<setPrototypeOf public="1" params="T" set="method" static="1">
			<f a="obj:prototype">
				<c path="setPrototypeOf.T"/>
				<x path="Null"><a/></x>
				<c path="setPrototypeOf.T"/>
			</f>
			<haxe_doc>Sets the prototype (i.e., the internal Prototype property).</haxe_doc>
		</setPrototypeOf>
		<values public="1" set="method" static="1">
			<f a="obj">
				<a/>
				<c path="Array"><x path="Any"/></c>
			</f>
			<haxe_doc>Returns an array containing the values that correspond to all of
		a given object's own enumerable string properties.</haxe_doc>
		</values>
		<prototype public="1" set="null" static="1">
			<t path="js.lib.ObjectPrototype"/>
			<haxe_doc>Allows the addition of properties to all objects of type Object.</haxe_doc>
		</prototype>
		<new public="1" set="method">
			<f a="?value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>The Object constructor creates an object wrapper.</haxe_doc>
		</new>
		<haxe_doc>The `js.lib.Object` constructor creates an object wrapper.

	Documentation [Object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Object"</e></m></meta>
	</class>
	<typedef path="js.lib.ObjectPrototype" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<valueOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns the primitive value of the specified object.</haxe_doc>
			</valueOf>
			<toString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a string representation of the object.</haxe_doc>
			</toString>
			<toLocaleString set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Calls `toString()`.</haxe_doc>
			</toLocaleString>
			<propertyIsEnumerable set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating if the internal enumerable attribute is set.</haxe_doc>
			</propertyIsEnumerable>
			<isPrototypeOf set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether the object this method is called
		upon is in the prototype chain of the specified object.</haxe_doc>
			</isPrototypeOf>
			<hasOwnProperty set="null">
				<c path="js.lib.Function"/>
				<haxe_doc>Returns a boolean indicating whether an object contains the specified
		property as a direct property of that object and not inherited through
		the prototype chain.</haxe_doc>
			</hasOwnProperty>
		</a>
		<haxe_doc><![CDATA[Type for
	@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object>]]></haxe_doc>
	</typedef>
	<typedef path="js.lib.ObjectPropertyDescriptor" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<a>
			<writable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the value associated with the property may be
		changed with an assignment operator.

		Defaults to `false`.</haxe_doc>
			</writable>
			<value>
				<x path="Null"><x path="Any"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The value associated with the property.
		Can be any valid JavaScript value (number, object, function, etc).</haxe_doc>
			</value>
			<set>
				<x path="Null"><f a="">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a setter for the property, or undefined if
		there is no setter. When the property is assigned to, this function
		is called with one argument (the value being assigned to the property)
		and with `this` set to the object through which the property is assigned.</haxe_doc>
			</set>
			<get>
				<x path="Null"><f a=""><x path="Any"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>A function which serves as a getter for the property, or `undefined` if
		there is no getter. When the property is accessed, this function is
		called without arguments and with `this` set to the object through which
		the property is accessed (this may not be the object on which the
		property is defined due to inheritance).
		The return value will be used as the value of the property.</haxe_doc>
			</get>
			<enumerable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if this property shows up during enumeration of the
		properties on the corresponding object.

		Defaults to `false`.</haxe_doc>
			</enumerable>
			<configurable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>`true` if and only if the type of this property descriptor may be
		changed and if the property may be deleted from the corresponding object.

		Defaults to `false`.</haxe_doc>
			</configurable>
		</a>
		<haxe_doc><![CDATA[@see <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty>]]></haxe_doc>
	</typedef>
	<abstract path="js.lib.ObjectEntry" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Object.hx" module="js.lib.Object">
		<this><c path="Array"><x path="Any"/></c></this>
		<haxe_doc>Key/value access helper for `js.lib.Object.entries()`.</haxe_doc>
		<impl><class path="js.lib._Object.ObjectEntry_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Object.hx" private="1" module="js.lib.Object" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="js.lib.Promise" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" extern="1">
		<resolve public="1" params="T" set="method" static="1">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="resolve.T"/></x>
				<c path="js.lib.Promise"><c path="resolve.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
			<overloads><resolve public="1" params="T" set="method">
	<f a="?value">
		<c path="resolve.T"/>
		<c path="js.lib.Promise"><c path="resolve.T"/></c>
	</f>
	<haxe_doc>Returns a Promise object that is resolved with the given value. If the
		value is Thenable, the returned promise will "follow" that
		thenable, adopting its eventual state;
		otherwise the returned promise will be fulfilled with the value.
		Generally, when it's unknown when value is a promise or not,
		use `Promise.resolve(value)` instead and work with the return value as
		a promise.</haxe_doc>
</resolve></overloads>
		</resolve>
		<reject public="1" params="T" set="method" static="1">
			<f a="?reason">
				<d/>
				<c path="js.lib.Promise"><c path="reject.T"/></c>
			</f>
			<haxe_doc>Returns a Promise object that is rejected with the given reason.</haxe_doc>
		</reject>
		<all public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="all.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><c path="all.T"/></c></c>
			</f>
			<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
			<overloads><all public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><d/></c></c>
	</f>
	<haxe_doc>Returns a promise that either fulfills when all of the promises in the
		iterable argument have fulfilled or rejects as soon as one of the
		promises in the iterable argument rejects. If the returned promise
		fulfills, it is fulfilled with an array of the values from the
		fulfilled promises in the same order as defined in the iterable.
		If the returned promise rejects, it is rejected with the reason from
		the first promise in the iterable that rejected. This method can be
		useful for aggregating results of multiple promises.</haxe_doc>
</all></overloads>
		</all>
		<allSettled public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="allSettled.T"/></c></c>
				<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><c path="allSettled.T"/></t></c></c>
			</f>
			<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
			<overloads><allSettled public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><c path="Array"><t path="js.lib.PromiseSettleOutcome"><d/></t></c></c>
	</f>
	<haxe_doc>Returns a promise that resolves after all of the given promises have either fulfilled or rejected,
		with an array of objects that each describes the outcome of each promise.

		It is typically used when you have multiple asynchronous tasks that are not dependent on one another
		to complete successfully, or you'd always like to know the result of each promise.

		In comparison, the Promise returned by `Promise.all` may be more appropriate if the tasks are dependent
		on each other / if you'd like to immediately reject upon any of them rejecting.</haxe_doc>
</allSettled></overloads>
		</allSettled>
		<race public="1" params="T" set="method" static="1">
			<f a="iterable">
				<c path="Array"><c path="js.lib.Promise"><c path="race.T"/></c></c>
				<c path="js.lib.Promise"><c path="race.T"/></c>
			</f>
			<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
			<overloads><race public="1" set="method">
	<f a="iterable">
		<c path="Array"><d/></c>
		<c path="js.lib.Promise"><d/></c>
	</f>
	<haxe_doc>Returns a promise that fulfills or rejects as soon as one of the
		promises in the iterable fulfills or rejects, with the value or reason
		from that promise.</haxe_doc>
</race></overloads>
		</race>
		<then public="1" params="TOut" set="method">
			<f a="onFulfilled:?onRejected">
				<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.Promise.T"/>
	<c path="then.TOut"/>
</x></x>
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="then.TOut"/>
				</x>
				<c path="js.lib.Promise"><c path="then.TOut"/></c>
			</f>
			<haxe_doc>Appends fulfillment and rejection handlers to the promise and returns a
		new promise resolving to the return value of the called handler, or to
		its original settled value if the promise was not handled
		(i.e. if the relevant handler onFulfilled or onRejected is not a function).</haxe_doc>
		</then>
		<catchError public="1" set="method">
			<f a="onRejected">
				<x path="js.lib.PromiseHandler">
					<d/>
					<c path="js.lib.Promise.T"/>
				</x>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<meta><m n=":native"><e>"catch"</e></m></meta>
			<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
			<overloads><catch public="1" params="TOut" set="method">
	<f a="onRejected">
		<x path="js.lib.PromiseHandler">
			<d/>
			<c path="catchError.TOut"/>
		</x>
		<c path="js.lib.Promise"><x path="haxe.extern.EitherType">
	<c path="js.lib.Promise.T"/>
	<c path="catchError.TOut"/>
</x></c>
	</f>
	<meta><m n=":native"><e>"catch"</e></m></meta>
	<haxe_doc>Appends a rejection handler callback to the promise, and returns a new
		promise resolving to the return value of the callback if it is called,
		or to its original fulfillment value if the promise is instead fulfilled.</haxe_doc>
</catch></overloads>
		</catchError>
		<finally public="1" set="method">
			<f a="onFinally">
				<f a=""><x path="Void"/></f>
				<c path="js.lib.Promise"><c path="js.lib.Promise.T"/></c>
			</f>
			<haxe_doc>Returns a Promise. When the promise is settled, i.e either fulfilled or rejected,
		the specified callback function is executed. This provides a way for code to be run
		whether the promise was fulfilled successfully or rejected once the Promise has been dealt with.</haxe_doc>
		</finally>
		<new public="1" set="method">
			<f a="init">
				<f a="resolve:reject">
					<f a="value">
						<c path="js.lib.Promise.T"/>
						<x path="Void"/>
					</f>
					<f a="reason">
						<d/>
						<x path="Void"/>
					</f>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
		</new>
		<haxe_doc>The Promise object represents the eventual completion (or failure) of an
	asynchronous operation and its resulting value.

	Documentation [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Promise"</e></m></meta>
	</class>
	<abstract path="js.lib.PromiseHandler" params="T:TOut" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.Promise"><c path="js.lib.PromiseHandler.TOut"/></c>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<x path="js.lib.Thenable"><c path="js.lib.PromiseHandler.TOut"/></x>
</f></icast>
			<icast><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<c path="js.lib.PromiseHandler.TOut"/>
</f></icast>
		</from>
		<this><f a="">
	<c path="js.lib.PromiseHandler.T"/>
	<d/>
</f></this>
		<haxe_doc>Handler type for the Promise object.</haxe_doc>
		<impl><class path="js.lib._Promise.PromiseHandler_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="js.lib.Thenable" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" module="js.lib.Promise">
		<from><icast><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></icast></from>
		<this><t path="js.lib.ThenableStruct"><c path="js.lib.Thenable.T"/></t></this>
		<haxe_doc>A value with a `then` method.</haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="js.lib._Promise.Thenable_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="js.lib.ThenableStruct" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" module="js.lib.Promise"><a><then params="TOut" set="method"><f a="onFulfilled:?onRejected">
	<x path="Null"><x path="js.lib.PromiseHandler">
	<c path="js.lib.ThenableStruct.T"/>
	<c path="then.TOut"/>
</x></x>
	<x path="js.lib.PromiseHandler">
		<d/>
		<c path="then.TOut"/>
	</x>
	<x path="js.lib.Thenable"><c path="then.TOut"/></x>
</f></then></a></typedef>
	<typedef path="js.lib.PromiseSettleOutcome" params="T" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" module="js.lib.Promise"><a>
	<value>
		<x path="Null"><c path="js.lib.PromiseSettleOutcome.T"/></x>
		<meta><m n=":optional"/></meta>
	</value>
	<status><x path="js.lib.PromiseSettleStatus"/></status>
	<reason>
		<x path="Null"><d/></x>
		<meta><m n=":optional"/></meta>
	</reason>
</a></typedef>
	<abstract path="js.lib.PromiseSettleStatus" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" module="js.lib.Promise">
		<this><c path="String"/></this>
		<to><icast><c path="String"/></icast></to>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib._Promise.PromiseSettleStatus_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Promise.hx" private="1" module="js.lib.Promise" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.RegExpMatch" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/RegExp.hx" module="js.lib.RegExp" extern="1">
		<extends path="Array"><c path="String"/></extends>
		<index public="1">
			<x path="Int"/>
			<haxe_doc>The index of the search at which the result was found.</haxe_doc>
		</index>
		<input public="1">
			<c path="String"/>
			<haxe_doc>A copy of the search string.</haxe_doc>
		</input>
		<groups public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
			<haxe_doc>Named capturing groups or undefined if no named capturing groups were defined.
		See [Groups and Ranges](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges) for more information.

		Note: Not all browsers support this feature; refer to the [compatibility table](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Browser_compatibility).</haxe_doc>
		</groups>
		<haxe_doc>A return value of the `RegExp.exec` method.</haxe_doc>
	</class>
	<class path="js.lib.Symbol" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Symbol.hx" extern="1">
		<for_ public="1" set="method" static="1">
			<f a="key">
				<c path="String"/>
				<c path="js.lib.Symbol"/>
			</f>
			<meta><m n=":native"><e>"for"</e></m></meta>
			<haxe_doc>Searches for existing symbols with the given key and returns it if found.
		Otherwise a new symbol gets created in the global symbol registry with this key.</haxe_doc>
		</for_>
		<keyFor public="1" set="method" static="1">
			<f a="sym">
				<c path="js.lib.Symbol"/>
				<x path="Null"><c path="String"/></x>
			</f>
			<haxe_doc>Retrieves a shared symbol key from the global symbol registry for the given symbol.</haxe_doc>
		</keyFor>
		<iterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method returning the default iterator for an object.</haxe_doc>
		</iterator>
		<asyncIterator public="1" set="null" static="1">
			<c path="js.lib.Symbol"/>
			<haxe_doc>A method that returns the default AsyncIterator for an object.</haxe_doc>
		</asyncIterator>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string containing the description of the Symbol.</haxe_doc>
		</toString>
		<ofObject public="1" params="T" get="inline" set="null" line="67">
			<f a="object">
				<a/>
				<x path="Null"><c path="ofObject.T"/></x>
			</f>
			<haxe_doc>Retrieve symbol from a given `object`.

		NOTE: This is a Haxe-specific method that generates an `object[symbol]` expression.</haxe_doc>
		</ofObject>
		<new public="1" set="method">
			<f a="?description">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<meta><m n=":selfCall"/></meta>
			<haxe_doc>To create a new primitive symbol, use `new Symbol()` with an optional string as its `description`.

		NOTE: Unlike in plain JavaScript, `new Symbol()` syntax is used in Haxe. This generates a `Symbol(...)`
		expression as required by the JavaScript specification.</haxe_doc>
		</new>
		<meta><m n=":native"><e>"Symbol"</e></m></meta>
	</class>
	<class path="js.lib.Uint16Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Uint16Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 2 in the case of an `Uint16Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint16Array"/>
	</f>
	<haxe_doc>Creates a new `Uint16Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new `Uint16Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint16Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint16Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint16Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint16Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint16Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint16Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint16Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint16Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint16Array` typed array represents an array of 16-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint16Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint16Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint32Array" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Uint32Array.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 4 in the case of an `Uint32Array`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint32Array"/>
	</f>
	<haxe_doc>Creates a new `Uint32Array` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new `Uint32Array` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint32Array` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint32Array` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint32Array`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint32Array"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint32Array"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint32Array"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint32Array"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint32Array` typed array represents an array of 32-bit unsigned integers in the platform
	byte order. If control over byte order is needed, use `DataView` instead. The contents are
	initialized to `0`. Once established, you can reference elements in the array using the object's
	methods, or using standard array index syntax (that is, using bracket notation).

	Documentation [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint32Array"</e></m></meta>
	</class>
	<class path="js.lib.Uint8ClampedArray" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/Uint8ClampedArray.hx" extern="1">
		<implements path="js.lib.ArrayBufferView"/>
		<BYTES_PER_ELEMENT final="1" public="1" set="null" static="1">
			<x path="Int"/>
			<haxe_doc>Returns a number value of the element size. 1 in the case of an `Uint8ClampedArray`.</haxe_doc>
		</BYTES_PER_ELEMENT>
		<from public="1" set="method" static="1">
			<f a="source:?mapFn:?thisArg">
				<a/>
				<f a="value:index">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
			<overloads><from public="1" set="method">
	<f a="source:?mapFn:?thisArg">
		<a/>
		<f a="value">
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<x path="Any"/>
		<c path="js.lib.Uint8ClampedArray"/>
	</f>
	<haxe_doc>Creates a new `Uint8ClampedArray` from an array-like or iterable object. See also [Array.from()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from).</haxe_doc>
</from></overloads>
		</from>
		<of public="1" set="method" static="1">
			<f a="elements">
				<t path="haxe.extern.Rest"><d/></t>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new `Uint8ClampedArray` with a variable number of arguments. See also [Array.of()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of).</haxe_doc>
		</of>
		<BYTES_PER_ELEMENT_ final="1" public="1">
			<x path="Int"/>
			<meta><m n=":native"><e>"BYTES_PER_ELEMENT"</e></m></meta>
			<haxe_doc>Returns a number value of the element size.</haxe_doc>
		</BYTES_PER_ELEMENT_>
		<buffer final="1" public="1">
			<c path="js.lib.ArrayBuffer"/>
			<haxe_doc>Returns the `ArrayBuffer` referenced by the `Uint8ClampedArray` Fixed at construction time and thus read only.</haxe_doc>
		</buffer>
		<byteLength final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the length (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteLength>
		<byteOffset final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the offset (in bytes) of the `Uint8ClampedArray` from the start of its `ArrayBuffer`. Fixed at construction time and thus read only.</haxe_doc>
		</byteOffset>
		<length final="1" public="1">
			<x path="Int"/>
			<haxe_doc>Returns the number of elements hold in the `Uint8ClampedArray`. Fixed at construction time and thus read only.</haxe_doc>
		</length>
		<copyWithin public="1" set="method">
			<f a="target:start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Copies a sequence of array elements within the array.
		See also [Array.prototype.copyWithin()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin).</haxe_doc>
		</copyWithin>
		<entries public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="js.lib.KeyValue">
	<x path="Int"/>
	<x path="Int"/>
</x></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the key/value pairs for each index in the array.
		See also [Array.prototype.entries()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/entries).</haxe_doc>
		</entries>
		<every public="1" set="method">
			<f a="callback:?thisArg">
				<f a="currentValue:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
			<overloads>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
				<every public="1" set="method">
					<f a="callback:?thisArg">
						<f a="currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Tests whether all elements in the array pass the test provided by a function.
		See also [Array.prototype.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).</haxe_doc>
				</every>
			</overloads>
		</every>
		<fill public="1" set="method">
			<f a="value:?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Fills all the elements of an array from a start index to an end index with a static value.
		See also [Array.prototype.fill()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill).</haxe_doc>
		</fill>
		<filter public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
			<overloads>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
				<filter public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with all of the elements of this array for which the provided filtering function returns true.
		See also [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter).</haxe_doc>
				</filter>
			</overloads>
		</filter>
		<find public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
			<overloads>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
				<find public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Null"><x path="Int"/></x>
					</f>
					<haxe_doc>Returns the found value in the array, if an element in the array satisfies the provided testing function or undefined if not found.
		See also [Array.prototype.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).</haxe_doc>
				</find>
			</overloads>
		</find>
		<findIndex public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
			<overloads>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
				<findIndex public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Int"/>
					</f>
					<haxe_doc>Returns the found index in the array, if an element in the array satisfies the provided testing function or -1 if not found.
		See also [Array.prototype.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex).</haxe_doc>
				</findIndex>
			</overloads>
		</findIndex>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
			<overloads>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
				<forEach public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Void"/>
						</f>
						<x path="Any"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Calls a function for each element in the array.
		See also [Array.prototype.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach).</haxe_doc>
				</forEach>
			</overloads>
		</forEach>
		<includes public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Determines whether a typed array includes a certain element, returning true or false as appropriate.
		See also [Array.prototype.includes()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes).</haxe_doc>
		</includes>
		<indexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the first (least) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.indexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf).</haxe_doc>
		</indexOf>
		<join public="1" set="method">
			<f a="?separator">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Joins all elements of an array into a string.
		See also [Array.prototype.join()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join).</haxe_doc>
		</join>
		<keys public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator that contains the keys for each index in the array.
		See also [Array.prototype.keys()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys).</haxe_doc>
		</keys>
		<lastIndexOf public="1" set="method">
			<f a="searchElement:?fromIndex">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the last (greatest) index of an element within the array equal to the specified value, or -1 if none is found.
		See also [Array.prototype.lastIndexOf()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf).</haxe_doc>
		</lastIndexOf>
		<map public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Int"/>
				</f>
				<x path="Any"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
			<overloads>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
				<map public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Any"/>
						<c path="js.lib.Uint8ClampedArray"/>
					</f>
					<haxe_doc>Creates a new array with the results of calling a provided function on every element in this array.
		See also [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).</haxe_doc>
				</map>
			</overloads>
		</map>
		<reduce public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduce.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduce.T"/>
				</f>
				<c path="reduce.T"/>
				<c path="reduce.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
			<overloads>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduce.T"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduce.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduce.T"/>
						</f>
						<c path="reduce.T"/>
						<c path="reduce.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
				<reduce public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from left-to-right) as to reduce it to a single value.
		See also [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).</haxe_doc>
				</reduce>
			</overloads>
		</reduce>
		<reduceRight public="1" params="T" set="method">
			<f a="callback:initialValue">
				<f a="previousValue:currentValue:index:array">
					<c path="reduceRight.T"/>
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<c path="reduceRight.T"/>
				</f>
				<c path="reduceRight.T"/>
				<c path="reduceRight.T"/>
			</f>
			<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
			<overloads>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" params="T" set="method">
					<f a="callback:initialValue">
						<f a="previousValue:currentValue:index">
							<c path="reduceRight.T"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="reduceRight.T"/>
						</f>
						<c path="reduceRight.T"/>
						<c path="reduceRight.T"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
				<reduceRight public="1" set="method">
					<f a="callbackfn">
						<f a="previousValue:currentValue:index:array">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Int"/>
							<c path="js.lib.Uint8ClampedArray"/>
							<x path="Int"/>
						</f>
						<x path="Int"/>
					</f>
					<haxe_doc>Apply a function against an accumulator and each value of the array (from right-to-left) as to reduce it to a single value.
		See also [Array.prototype.reduceRight()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight).</haxe_doc>
				</reduceRight>
			</overloads>
		</reduceRight>
		<reverse public="1" set="method">
			<f a=""><c path="js.lib.Uint8ClampedArray"/></f>
			<haxe_doc>Reverses the order of the elements of an array — the first becomes the last, and the last becomes the first.
		See also [Array.prototype.reverse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse).</haxe_doc>
		</reverse>
		<set public="1" set="method">
			<f a="array:?offset">
				<c path="Array"><x path="Int"/></c>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint8ClampedArray"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint16Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Int32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Uint32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float32Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="array:?offset">
						<c path="js.lib.Float64Array"/>
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>Stores multiple values in the typed array, reading input values from a specified array.</haxe_doc>
				</set>
			</overloads>
		</set>
		<slice public="1" set="method">
			<f a="?start:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Extracts a section of an array and returns a new array.
		See also [Array.prototype.slice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice).</haxe_doc>
		</slice>
		<some public="1" set="method">
			<f a="callback:?thisArg">
				<f a="element:index:array">
					<x path="Int"/>
					<x path="Int"/>
					<c path="js.lib.Uint8ClampedArray"/>
					<x path="Bool"/>
				</f>
				<x path="Any"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
			<overloads>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element">
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
				<some public="1" set="method">
					<f a="callback:?thisArg">
						<f a="element:index">
							<x path="Int"/>
							<x path="Int"/>
							<x path="Bool"/>
						</f>
						<x path="Any"/>
						<x path="Bool"/>
					</f>
					<haxe_doc>Returns true if at least one element in this array satisfies the provided testing function.
		See also [Array.prototype.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).</haxe_doc>
				</some>
			</overloads>
		</some>
		<sort public="1" set="method">
			<f a="?compareFn">
				<f a="x:y">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Sorts the elements of an array in place and returns the array.
		See also [Array.prototype.sort()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort).</haxe_doc>
		</sort>
		<subarray public="1" set="method">
			<f a="?begin:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint8ClampedArray"/>
			</f>
			<haxe_doc>Returns a new TypedArray from the given start and end element index.</haxe_doc>
		</subarray>
		<values public="1" set="method">
			<f a=""><t path="js.lib.Iterator"><x path="Int"/></t></f>
			<haxe_doc>Returns a new Array Iterator object that contains the values for each index in the array.
		See also [Array.prototype.values()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/values).</haxe_doc>
		</values>
		<toLocaleString public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toLocaleString>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representing the array and its elements.
		See also [Array.prototype.toString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/toString).</haxe_doc>
		</toString>
		<new public="1" set="method">
			<f a="buffer:?byteOffset:?length">
				<c path="js.lib.ArrayBuffer"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>@throws DOMError</haxe_doc>
			<overloads>
				<new public="1" set="method">
					<f a="length">
						<x path="Int"/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
				<new public="1" set="method">
					<f a="object">
						<a/>
						<x path="Void"/>
					</f>
					<haxe_doc>@throws DOMError</haxe_doc>
				</new>
			</overloads>
		</new>
		<haxe_doc>The `Uint8ClampedArray` typed array represents an array of 8-bit unsigned integers clamped
	to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead;
	if you specify a non-integer, the nearest integer will be set. The contents are initialized to `0`.
	Once established, you can reference elements in the array using the object's methods, or using
	standard array index syntax (that is, using bracket notation).

	Documentation [Uint8ClampedArray](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Uint8ClampedArray"</e></m></meta>
	</class>
	<abstract path="js.lib.intl.LocaleMatcher" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/LocaleMatcher.hx">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._LocaleMatcher.LocaleMatcher_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/LocaleMatcher.hx" private="1" module="js.lib.intl.LocaleMatcher" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<class path="js.lib.intl.NumberFormat" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" extern="1">
		<supportedLocalesOf public="1" set="method" static="1">
			<f a="locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
			<overloads><supportedLocalesOf public="1" set="method">
	<f a="locales:?options">
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="js.lib.intl.NumberFormatSupportedLocalesOfOptions"/></x>
		<c path="Array"><c path="String"/></c>
	</f>
	<haxe_doc>Returns an array containing those of the provided locales that are supported
		without having to fall back to the runtime's default locale.</haxe_doc>
</supportedLocalesOf></overloads>
		</supportedLocalesOf>
		<format public="1" set="method">
			<f a="number">
				<x path="Float"/>
				<c path="String"/>
			</f>
			<haxe_doc>Getter function that formats a number according to the locale
		and formatting options of this `NumberFormat` object.</haxe_doc>
		</format>
		<formatToParts public="1" set="method">
			<f a="?number">
				<x path="Float"/>
				<c path="Array"><t path="js.lib.intl.NumberFormatPart"/></c>
			</f>
			<haxe_doc>Returns an `Array` of objects representing the number string in parts
		that can be used for custom locale-aware formatting.</haxe_doc>
		</formatToParts>
		<resolvedOptions public="1" set="method">
			<f a=""><t path="js.lib.intl.NumberFormatResolvedOption"/></f>
			<haxe_doc>Returns a new object with properties reflecting the locale and collation options
		computed during initialization of the object.</haxe_doc>
		</resolvedOptions>
		<new public="1" set="method">
			<f a="?locales:?options">
				<c path="String"/>
				<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
				<x path="Void"/>
			</f>
			<overloads><new public="1" set="method"><f a="?locales:?options">
	<c path="Array"><c path="String"/></c>
	<x path="Null"><t path="js.lib.intl.NumberFormatOptions"/></x>
	<x path="Void"/>
</f></new></overloads>
		</new>
		<haxe_doc>The `NumberFormat` object is a constructor for objects that enable language sensitive number formatting.

	Documentation [NumberFormat](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat) by [Mozilla Contributors](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat$history), licensed under [CC-BY-SA 2.5](https://creativecommons.org/licenses/by-sa/2.5/).</haxe_doc>
		<meta><m n=":native"><e>"Intl.NumberFormat"</e></m></meta>
	</class>
	<typedef path="js.lib.intl.NumberFormatOptions" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping>
		<x path="Null"><x path="Bool"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.
		The default is `true`.</haxe_doc>
	</useGrouping>
	<style>
		<x path="Null"><x path="js.lib.intl.NumberFormatStyle"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The formatting style to use.
		The default is `Decimal`.</haxe_doc>
	</style>
	<minimumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of significant digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumSignificantDigits>
	<minimumIntegerDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of integer digits to use.
		Possible values are from 1 to 21; the default is 1.</haxe_doc>
	</minimumIntegerDigits>
	<minimumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The minimum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number and percent formatting is 0;
		the default for currency formatting is the number of minor unit digits provided by the
		[ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information).</haxe_doc>
	</minimumFractionDigits>
	<maximumSignificantDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of significant digits to use.
		Possible values are from 1 to 21; the default is 21.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits>
		<x path="Null"><x path="Int"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The maximum number of fraction digits to use.
		Possible values are from 0 to 20; the default for plain number formatting is the larger of
		minimumFractionDigits and 3; the default for currency formatting is the larger of minimumFractionDigits
		and the number of minor unit digits provided by the [ISO 4217 currency code list](http://www.currency-iso.org/en/home/tables/table-a1.html)
		(2 if the list doesn't provide that information); the default for percent formatting is the larger of
		minimumFractionDigits and 0.</haxe_doc>
	</maximumFractionDigits>
	<localeMatcher>
		<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.
		For information about this option, see the [Intl page](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation).</haxe_doc>
	</localeMatcher>
	<currencyDisplay>
		<x path="Null"><x path="js.lib.intl.CurrencyDisplay"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>How to display the currency in currency formatting.
		The default is `Symbol`.</haxe_doc>
	</currencyDisplay>
	<currency>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc><![CDATA[The currency to use in currency formatting. Possible values are the ISO 4217 currency codes,
		such as "USD" for the US dollar, "EUR" for the euro, or "CNY" for the Chinese RMB — see the
		[Current currency & funds code list](https://www.currency-iso.org/en/home/tables/table-a1.html).
		There is no default value; if the style is "currency", the currency property must be provided.]]></haxe_doc>
	</currency>
</a></typedef>
	<typedef path="js.lib.intl.NumberFormatResolvedOption" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<useGrouping final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.</haxe_doc>
	</useGrouping>
	<style final="1" set="null"><x path="js.lib.intl.NumberFormatStyle"/></style>
	<numberingSystem final="1" set="null">
		<c path="String"/>
		<haxe_doc>The value requested using the Unicode extension key `"nu"` or filled in as a default.</haxe_doc>
	</numberingSystem>
	<minimumSignificantDigits final="1" set="null"><x path="Int"/></minimumSignificantDigits>
	<minimumIntegerDigits final="1" set="null"><x path="Int"/></minimumIntegerDigits>
	<minimumFractionDigits final="1" set="null"><x path="Int"/></minimumFractionDigits>
	<maximumSignificantDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if at least one of them was provided in the `options` argument.</haxe_doc>
	</maximumSignificantDigits>
	<maximumFractionDigits final="1" set="null">
		<x path="Int"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are present only if neither m`inimumSignificantDigits` nor `maximumSignificantDigits`
		was provided in the `options` argument.</haxe_doc>
	</maximumFractionDigits>
	<locale final="1" set="null">
		<c path="String"/>
		<haxe_doc>The BCP 47 language tag for the locale actually used. If any Unicode extension values were
		requested in the input BCP 47 language tag that led to this locale, the key-value pairs that
		were requested and are supported for this locale are included in `locale`.</haxe_doc>
	</locale>
	<currencyDisplay final="1" set="null">
		<c path="String"/>
		<haxe_doc>The values provided for these properties in the `options` argument or filled in as defaults.
		These properties are only present if `style` is `"currency"`.</haxe_doc>
	</currencyDisplay>
	<currency final="1" set="null"><c path="String"/></currency>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatStyle" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatStyle_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="js.lib.intl.CurrencyDisplay" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.CurrencyDisplay_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatPart" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a>
	<value final="1" set="null"><c path="String"/></value>
	<type final="1" set="null"><x path="js.lib.intl.NumberFormatPartType"/></type>
</a></typedef>
	<abstract path="js.lib.intl.NumberFormatPartType" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat">
		<this><c path="String"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="js.lib.intl._NumberFormat.NumberFormatPartType_Impl_" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" private="1" module="js.lib.intl.NumberFormat" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<typedef path="js.lib.intl.NumberFormatSupportedLocalesOfOptions" params="" file="/opt/hostedtoolcache/haxe/4.3.6/x64/std/js/lib/intl/NumberFormat.hx" module="js.lib.intl.NumberFormat"><a><localeMatcher>
	<x path="Null"><x path="js.lib.intl.LocaleMatcher"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>The locale matching algorithm to use.
		The default is `BestFit`.</haxe_doc>
</localeMatcher></a></typedef>
	<typedef path="vscode.AccessibilityInformation" params="" file="src/vscode/AccessibilityInformation.hx">
		<a>
			<role set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Role of the widget which defines how a screen reader interacts with it.
	 * The role should be set in special cases when for example a tree-like element behaves like a checkbox.
	 * If role is not specified the editor will pick the appropriate role automatically.
	 * More about aria roles can be found here https://w3c.github.io/aria/#widget_roles</haxe_doc>
			</role>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* Label to be read out by a screen reader once the item has focus.</haxe_doc>
			</label>
		</a>
		<haxe_doc>* Accessibility information which controls screen reader behavior.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationForceNewSessionOptions" params="" file="src/vscode/AuthenticationForceNewSessionOptions.hx">
		<a><detail>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* An optional message that will be displayed to the user when we ask to re-authenticate. Providing additional context
	 * as to why you are asking a user to re-authenticate can help increase the odds that they will accept.</haxe_doc>
</detail></a>
		<haxe_doc>* Optional options to be used when calling {@link authentication.getSession} with the flag `forceNewSession`.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationGetSessionOptions" params="" file="src/vscode/AuthenticationGetSessionOptions.hx">
		<a>
			<silent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether we should show the indication to sign in in the Accounts menu.
	 *
	 * If false, the user will be shown a badge on the Accounts menu with an option to sign in for the extension.
	 * If true, no indication will be shown.
	 *
	 * Defaults to false.
	 *
	 * Note: you cannot use this option with any other options that prompt the user like {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.</haxe_doc>
			</silent>
			<forceNewSession>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<t path="vscode.AuthenticationForceNewSessionOptions"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether we should attempt to reauthenticate even if there is already a session available.
	 *
	 * If true, a modal dialog will be shown asking the user to sign in again. This is mostly used for scenarios
	 * where the token needs to be re minted because it has lost some authorization.
	 *
	 * If there are no existing sessions and forceNewSession is true, it will behave identically to
	 * {@link AuthenticationGetSessionOptions.createIfNone createIfNone}.
	 *
	 * This defaults to false.</haxe_doc>
			</forceNewSession>
			<createIfNone>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether login should be performed if there is no matching session.
	 *
	 * If true, a modal dialog will be shown asking the user to sign in. If false, a numbered badge will be shown
	 * on the accounts activity bar icon. An entry for the extension will be added under the menu to sign in. This
	 * allows quietly prompting the user to sign in.
	 *
	 * If there is a matching session but the extension has not been granted access to it, setting this to true
	 * will also result in an immediate modal dialog, and false will add a numbered badge to the accounts icon.
	 *
	 * Defaults to false.
	 *
	 * Note: you cannot use this option with {@link AuthenticationGetSessionOptions.silent silent}.</haxe_doc>
			</createIfNone>
			<clearSessionPreference>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the existing session preference should be cleared.
	 *
	 * For authentication providers that support being signed into multiple accounts at once, the user will be
	 * prompted to select an account to use when {@link authentication.getSession getSession} is called. This preference
	 * is remembered until {@link authentication.getSession getSession} is called with this flag.
	 *
	 * Note:
	 * The preference is extension specific. So if one extension calls {@link authentication.getSession getSession}, it will not
	 * affect the session preference for another extension calling {@link authentication.getSession getSession}. Additionally,
	 * the preference is set for the current workspace and also globally. This means that new workspaces will use the "global"
	 * value at first and then when this flag is provided, a new value can be set for that workspace. This also means
	 * that pre-existing workspaces will not lose their preference if a new workspace sets this flag.
	 *
	 * Defaults to false.</haxe_doc>
			</clearSessionPreference>
			<account>
				<x path="Null"><t path="vscode.AuthenticationSessionAccountInformation"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The account that you would like to get a session for. This is passed down to the Authentication Provider to be used for creating the correct session.</haxe_doc>
			</account>
		</a>
		<haxe_doc>* Options to be used when getting an {@link AuthenticationSession} from an {@link AuthenticationProvider}.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProvider" params="" file="src/vscode/AuthenticationProvider.hx">
		<a>
			<removeSession set="method">
				<f a="sessionId">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Removes the session corresponding to session id.
	 *
	 * If the removal is successful, the onDidChangeSessions event should be fired.
	 *
	 * If a session cannot be removed, the provider should reject with an error message.
	 * @param sessionId The id of the session to remove.</haxe_doc>
			</removeSession>
			<onDidChangeSessions set="null">
				<t path="vscode.Event"><t path="vscode.AuthenticationProviderAuthenticationSessionsChangeEvent"/></t>
				<haxe_doc>* An {@link Event} which fires when the array of sessions has changed, or data
	 * within a session has changed.</haxe_doc>
			</onDidChangeSessions>
			<getSessions set="method">
				<f a="scopes:options">
					<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="String"/></x></x>
					<t path="vscode.AuthenticationProviderSessionOptions"/>
					<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				</f>
				<haxe_doc>* Get a list of sessions.
	 * @param scopes An optional list of scopes. If provided, the sessions returned should match
	 * these permissions, otherwise all sessions should be returned.
	 * @param options Additional options for getting sessions.
	 * @returns A promise that resolves to an array of authentication sessions.</haxe_doc>
			</getSessions>
			<createSession set="method">
				<f a="scopes:options">
					<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
					<t path="vscode.AuthenticationProviderSessionOptions"/>
					<x path="js.lib.Thenable"><t path="vscode.AuthenticationSession"/></x>
				</f>
				<haxe_doc>* Prompts a user to login.
	 *
	 * If login is successful, the onDidChangeSessions event should be fired.
	 *
	 * If login fails, a rejected promise should be returned.
	 *
	 * If the provider has specified that it does not support multiple accounts,
	 * then this should never be called if there is already an existing session matching these
	 * scopes.
	 * @param scopes A list of scopes, permissions, that the new session should be created with.
	 * @param options Additional options for creating a session.
	 * @returns A promise that resolves to an authentication session.</haxe_doc>
			</createSession>
		</a>
		<haxe_doc>* A provider for performing authentication to a service.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderAuthenticationSessionsChangeEvent" params="" file="src/vscode/AuthenticationProviderAuthenticationSessionsChangeEvent.hx">
		<a>
			<removed set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<haxe_doc>* The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been removed.</haxe_doc>
			</removed>
			<changed set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<haxe_doc>* The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been changed.
	 * A session changes when its data excluding the id are updated. An example of this is a session refresh that results in a new
	 * access token being set for the session.</haxe_doc>
			</changed>
			<added set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.AuthenticationSession"/></x></x>
				<haxe_doc>* The {@link AuthenticationSession AuthenticationSessions} of the {@link AuthenticationProvider} that have been added.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An {@link Event} which fires when an {@link AuthenticationSession} is added, removed, or changed.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderInformation" params="" file="src/vscode/AuthenticationProviderInformation.hx">
		<a>
			<label final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable name of the authentication provider.</haxe_doc>
			</label>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The unique identifier of the authentication provider.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* Basic information about an [authenticationProvider](#AuthenticationProvider)</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderOptions" params="" file="src/vscode/AuthenticationProviderOptions.hx">
		<a><supportsMultipleAccounts set="null">
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Whether it is possible to be signed into multiple accounts at once with this provider.
	 * If not specified, will default to false.</haxe_doc>
</supportsMultipleAccounts></a>
		<haxe_doc>* Options for creating an {@link AuthenticationProvider}.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationProviderSessionOptions" params="" file="src/vscode/AuthenticationProviderSessionOptions.hx">
		<a><account>
	<x path="Null"><t path="vscode.AuthenticationSessionAccountInformation"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* The account that is being asked about. If this is passed in, the provider should
	 * attempt to return the sessions that are only related to this account.</haxe_doc>
</account></a>
		<haxe_doc>* The options passed in to the {@link AuthenticationProvider.getSessions} and
 * {@link AuthenticationProvider.createSession} call.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSession" params="" file="src/vscode/AuthenticationSession.hx">
		<a>
			<scopes final="1" set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* The permissions granted by the session's access token. Available scopes
	 * are defined by the {@link AuthenticationProvider}.</haxe_doc>
			</scopes>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of the authentication session.</haxe_doc>
			</id>
			<account final="1" set="null">
				<t path="vscode.AuthenticationSessionAccountInformation"/>
				<haxe_doc>* The account associated with the session.</haxe_doc>
			</account>
			<accessToken final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The access token.</haxe_doc>
			</accessToken>
		</a>
		<haxe_doc>* Represents a session of a currently logged in user.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSessionAccountInformation" params="" file="src/vscode/AuthenticationSessionAccountInformation.hx">
		<a>
			<label final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable name of the account.</haxe_doc>
			</label>
			<id final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The unique identifier of the account.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* The information of an account associated with an {@link AuthenticationSession}.</haxe_doc>
	</typedef>
	<typedef path="vscode.AuthenticationSessionsChangeEvent" params="" file="src/vscode/AuthenticationSessionsChangeEvent.hx">
		<a><provider final="1" set="null">
	<t path="vscode.AuthenticationProviderInformation"/>
	<haxe_doc>* The {@link AuthenticationProvider} that has had its sessions change.</haxe_doc>
</provider></a>
		<haxe_doc>* An [event](#Event) which fires when an [AuthenticationSession](#AuthenticationSession) is added, removed, or changed.</haxe_doc>
	</typedef>
	<typedef path="vscode.AutoClosingPair" params="" file="src/vscode/AutoClosingPair.hx">
		<a>
			<open>
				<c path="String"/>
				<haxe_doc>* The string that will trigger the automatic insertion of the closing string.</haxe_doc>
			</open>
			<notIn>
				<x path="Null"><c path="Array"><x path="vscode.SyntaxTokenType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of tokens where the pair should not be auto closed.</haxe_doc>
			</notIn>
			<close>
				<c path="String"/>
				<haxe_doc>* The closing string that will be automatically inserted when typing the opening string.</haxe_doc>
			</close>
		</a>
		<haxe_doc>* Describes pairs of strings where the close string will be automatically inserted when typing the opening string.</haxe_doc>
	</typedef>
	<class path="vscode.BranchCoverage" params="" file="src/vscode/BranchCoverage.hx" extern="1">
		<executed public="1">
			<x path="haxe.extern.EitherType">
				<x path="Int"/>
				<x path="Bool"/>
			</x>
			<haxe_doc>* The number of times this branch was executed, or a boolean indicating
	 * whether it was executed if the exact count is unknown. If zero or false,
	 * the branch will be marked as un-covered.</haxe_doc>
		</executed>
		<location public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Position"/>
	<c path="vscode.Range"/>
</x></x>
			<haxe_doc>* Branch location.</haxe_doc>
		</location>
		<label public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Label for the branch, used in the context of "the ${label} branch was
	 * not taken," for example.</haxe_doc>
		</label>
		<new public="1" set="method">
			<f a="executed:?location:?label">
				<x path="haxe.extern.EitherType">
					<x path="Int"/>
					<x path="Bool"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="vscode.Position"/>
					<c path="vscode.Range"/>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param executed The number of times this branch was executed, or a
	 * boolean indicating  whether it was executed if the exact count is
	 * unknown. If zero or false, the branch will be marked as un-covered.
	 * @param location The branch position.</haxe_doc>
		</new>
		<haxe_doc>* Contains coverage information for a branch of a {@link StatementCoverage}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"BranchCoverage"</e>
</m></meta>
	</class>
	<class path="vscode.Breakpoint" params="" file="src/vscode/Breakpoint.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The unique ID of the breakpoint.</haxe_doc>
		</id>
		<enabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Is breakpoint enabled.</haxe_doc>
		</enabled>
		<condition public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional expression for conditional breakpoints.</haxe_doc>
		</condition>
		<hitCondition public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional expression that controls how many hits of the breakpoint are ignored.</haxe_doc>
		</hitCondition>
		<logMessage public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional message that gets logged when this breakpoint is hit. Embedded expressions within {} are interpolated by the debug adapter.</haxe_doc>
		</logMessage>
		<new set="method">
			<f a="?enabled:?condition:?hitCondition:?logMessage">
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new breakpoint
	 *
	 * @param enabled Is breakpoint enabled.
	 * @param condition Expression for conditional breakpoints
	 * @param hitCondition Expression that controls how many hits of the breakpoint are ignored
	 * @param logMessage Log message to display when breakpoint is hit</haxe_doc>
		</new>
		<haxe_doc>* The base class of all breakpoint types.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Breakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.BreakpointsChangeEvent" params="" file="src/vscode/BreakpointsChangeEvent.hx">
		<a>
			<removed set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Removed breakpoints.</haxe_doc>
			</removed>
			<changed set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Changed breakpoints.</haxe_doc>
			</changed>
			<added set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Breakpoint"/></x>
				<haxe_doc>* Added breakpoints.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An event describing the changes to the set of {@link Breakpoint breakpoints}.</haxe_doc>
	</typedef>
	<class path="vscode.CallHierarchyIncomingCall" params="" file="src/vscode/CallHierarchyIncomingCall.hx" extern="1">
		<from public="1">
			<c path="vscode.CallHierarchyItem"/>
			<haxe_doc>* The item that makes the call.</haxe_doc>
		</from>
		<fromRanges public="1">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* The range at which at which the calls appears. This is relative to the caller
	 * denoted by {@linkcode CallHierarchyIncomingCall.from this.from}.</haxe_doc>
		</fromRanges>
		<new public="1" set="method">
			<f a="item:fromRanges">
				<c path="vscode.CallHierarchyItem"/>
				<c path="Array"><c path="vscode.Range"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new call object.
	 *
	 * @param item The item making the call.
	 * @param fromRanges The ranges at which the calls appear.</haxe_doc>
		</new>
		<haxe_doc>* Represents an incoming call, e.g. a caller of a method or constructor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyIncomingCall"</e>
</m></meta>
	</class>
	<class path="vscode.CallHierarchyItem" params="" file="src/vscode/CallHierarchyItem.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this item.</haxe_doc>
		</name>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this item.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this item.</haxe_doc>
		</tags>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* More detail for this item, e.g. the signature of a function.</haxe_doc>
		</detail>
		<uri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The resource identifier of this item.</haxe_doc>
		</uri>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.</haxe_doc>
		</range>
		<selectionRange public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.
	 * Must be contained by the {@linkcode CallHierarchyItem.range range}.</haxe_doc>
		</selectionRange>
		<new public="1" set="method">
			<f a="kind:name:detail:uri:range:selectionRange">
				<x path="vscode.SymbolKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new call hierarchy item.</haxe_doc>
		</new>
		<haxe_doc>* Represents programming constructs like functions or constructors in the context
 * of call hierarchy.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyItem"</e>
</m></meta>
	</class>
	<class path="vscode.CallHierarchyOutgoingCall" params="" file="src/vscode/CallHierarchyOutgoingCall.hx" extern="1">
		<to public="1">
			<c path="vscode.CallHierarchyItem"/>
			<haxe_doc>* The item that is called.</haxe_doc>
		</to>
		<fromRanges public="1">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* The range at which this item is called. This is the range relative to the caller, e.g the item
	 * passed to {@linkcode CallHierarchyProvider.provideCallHierarchyOutgoingCalls provideCallHierarchyOutgoingCalls}
	 * and not {@linkcode CallHierarchyOutgoingCall.to this.to}.</haxe_doc>
		</fromRanges>
		<new public="1" set="method">
			<f a="item:fromRanges">
				<c path="vscode.CallHierarchyItem"/>
				<c path="Array"><c path="vscode.Range"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new call object.
	 *
	 * @param item The item being called
	 * @param fromRanges The ranges at which the calls appear.</haxe_doc>
		</new>
		<haxe_doc>* Represents an outgoing call, e.g. calling a getter from a method or a method from a constructor etc.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CallHierarchyOutgoingCall"</e>
</m></meta>
	</class>
	<typedef path="vscode.CallHierarchyProvider" params="" file="src/vscode/CallHierarchyProvider.hx">
		<a>
			<provideCallHierarchyOutgoingCalls set="method">
				<f a="item:token">
					<c path="vscode.CallHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><c path="Array"><c path="vscode.CallHierarchyOutgoingCall"/></c></x></t>
				</f>
				<haxe_doc>* Provide all outgoing calls for an item, e.g call calls to functions, methods, or constructors from the given item. In
	 * graph terms this describes directed and annotated edges inside the call graph, e.g the given item is the starting
	 * node and the result is the nodes that can be reached.
	 *
	 * @param item The hierarchy item for which outgoing calls should be computed.
	 * @param token A cancellation token.
	 * @returns A set of outgoing calls or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideCallHierarchyOutgoingCalls>
			<provideCallHierarchyIncomingCalls set="method">
				<f a="item:token">
					<c path="vscode.CallHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><c path="Array"><c path="vscode.CallHierarchyIncomingCall"/></c></x></t>
				</f>
				<haxe_doc>* Provide all incoming calls for an item, e.g all callers for a method. In graph terms this describes directed
	 * and annotated edges inside the call graph, e.g the given item is the starting node and the result is the nodes
	 * that can be reached.
	 *
	 * @param item The hierarchy item for which incoming calls should be computed.
	 * @param token A cancellation token.
	 * @returns A set of incoming calls or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideCallHierarchyIncomingCalls>
			<prepareCallHierarchy set="method">
				<f a="document:position:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.CallHierarchyItem"/>
	<c path="Array"><c path="vscode.CallHierarchyItem"/></c>
</x></x></t>
				</f>
				<haxe_doc>* Bootstraps call hierarchy by returning the item that is denoted by the given document
	 * and position. This item will be used as entry into the call graph. Providers should
	 * return `undefined` or `null` when there is no item at the given location.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns One or multiple call hierarchy items or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</prepareCallHierarchy>
		</a>
		<haxe_doc>* The call hierarchy provider interface describes the contract between extensions
 * and the call hierarchy feature which allows to browse calls and caller of function,
 * methods, constructor etc.</haxe_doc>
	</typedef>
	<class path="vscode.CancellationError" params="" file="src/vscode/CancellationError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Creates a new cancellation error.</haxe_doc>
		</new>
		<haxe_doc>* An error type that should be used to signal cancellation of an operation.
 *
 * This type can be used in response to a {@link CancellationToken cancellation token}
 * being cancelled or when an operation is being cancelled by the
 * executor of that operation.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CancellationError"</e>
</m></meta>
	</class>
	<typedef path="vscode.CancellationToken" params="" file="src/vscode/CancellationToken.hx">
		<a>
			<onCancellationRequested>
				<t path="vscode.Event"><x path="Any"/></t>
				<haxe_doc>* An {@link Event} which fires upon cancellation.</haxe_doc>
			</onCancellationRequested>
			<isCancellationRequested>
				<x path="Bool"/>
				<haxe_doc>* Is `true` when the token has been cancelled, `false` otherwise.</haxe_doc>
			</isCancellationRequested>
		</a>
		<haxe_doc>* A cancellation token is passed to an asynchronous or long running
 * operation to request cancellation, like cancelling a request
 * for completion items because the user continued to type.
 *
 * To get an instance of a `CancellationToken` use a
 * {@link CancellationTokenSource}.</haxe_doc>
	</typedef>
	<class path="vscode.CancellationTokenSource" params="" file="src/vscode/CancellationTokenSource.hx" extern="1">
		<token public="1">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* The cancellation token of this source.</haxe_doc>
		</token>
		<cancel public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Signal cancellation on the token.</haxe_doc>
		</cancel>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose object and free resources.</haxe_doc>
		</dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* A cancellation source creates and controls a {@link CancellationToken cancellation token}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CancellationTokenSource"</e>
</m></meta>
	</class>
	<typedef path="vscode.CharacterPair" params="" file="src/vscode/CharacterPair.hx">
		<c path="Array"><c path="String"/></c>
		<haxe_doc>* A tuple of two characters, like a pair of
 * opening and closing brackets.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatContext" params="" file="src/vscode/ChatContext.hx">
		<a><history set="null">
	<x path="haxe.ds.ReadOnlyArray"><x path="haxe.extern.EitherType">
	<c path="vscode.ChatRequestTurn"/>
	<c path="vscode.ChatResponseTurn"/>
</x></x>
	<haxe_doc>* All of the chat messages so far in the current chat session. Currently, only chat messages for the current participant are included.</haxe_doc>
</history></a>
		<haxe_doc>* Extra context passed to a participant.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatErrorDetails" params="" file="src/vscode/ChatErrorDetails.hx">
		<a>
			<responseIsFiltered>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If set to true, the response will be partly blurred out.</haxe_doc>
			</responseIsFiltered>
			<message>
				<c path="String"/>
				<haxe_doc>* An error message that is shown to the user.</haxe_doc>
			</message>
		</a>
		<haxe_doc>* Represents an error result from a chat request.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatFollowup" params="" file="src/vscode/ChatFollowup.hx">
		<a>
			<prompt>
				<c path="String"/>
				<haxe_doc>* The message to send to the chat.</haxe_doc>
			</prompt>
			<participant>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* By default, the followup goes to the same participant/command. But this property can be set to invoke a different participant by ID.
	 * Followups can only invoke a participant that was contributed by the same extension.</haxe_doc>
			</participant>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A title to show the user. The prompt will be shown by default, when this is unspecified.</haxe_doc>
			</label>
			<command>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* By default, the followup goes to the same participant/command. But this property can be set to invoke a different command.</haxe_doc>
			</command>
		</a>
		<haxe_doc>* A followup question suggested by the participant.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatFollowupProvider" params="" file="src/vscode/ChatFollowupProvider.hx">
		<a><provideFollowups set="method">
	<f a="result:context:token">
		<t path="vscode.ChatResult"/>
		<t path="vscode.ChatContext"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><t path="vscode.ChatFollowup"/></c></t>
	</f>
	<haxe_doc>* Provide followups for the given result.
	 *
	 * @param result This object has the same properties as the result returned from the participant callback, including `metadata`, but is not the same instance.
	 * @param context Extra context passed to a participant.
	 * @param token A cancellation token.</haxe_doc>
</provideFollowups></a>
		<haxe_doc>* Will be invoked once after each request to get suggested followup questions to show the user. The user can click the followup to send it to the chat.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatLanguageModelToolReference" params="" file="src/vscode/ChatLanguageModelToolReference.hx">
		<a>
			<range set="null">
				<x path="Null"><a>
	<start><x path="Int"/></start>
	<end><x path="Int"/></end>
</a></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The start and end index of the reference in the {@link ChatRequest.prompt prompt}. When undefined, the reference was
	 * not part of the prompt text.
	 *
	 * *Note* that the indices take the leading `#`-character into account which means they can be used to modify the prompt
	 * as-is.</haxe_doc>
			</range>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The tool name. Refers to a tool listed in {@link lm.tools}.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* A reference to a tool that the user manually attached to their request, either using the `#`-syntax inline, or as an
 * attachment via the paperclip button.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatParticipant" params="" file="src/vscode/ChatParticipant.hx">
		<a>
			<requestHandler>
				<t path="vscode.ChatRequestHandler"/>
				<haxe_doc>* The handler for requests to this participant.</haxe_doc>
			</requestHandler>
			<onDidReceiveFeedback>
				<t path="vscode.Event"><t path="vscode.ChatResultFeedback"/></t>
				<haxe_doc>* An event that fires whenever feedback for a result is received, e.g. when a user up- or down-votes
	 * a result.
	 *
	 * The passed {@link ChatResultFeedback.result result} is guaranteed to have the same properties as the result that was
	 * previously returned from this chat participant's handler.</haxe_doc>
			</onDidReceiveFeedback>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* A unique ID for this participant.</haxe_doc>
			</id>
			<iconPath>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An icon for the participant shown in UI.</haxe_doc>
			</iconPath>
			<followupProvider>
				<x path="Null"><t path="vscode.ChatFollowupProvider"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This provider will be called once after each request to retrieve suggested followup questions.</haxe_doc>
			</followupProvider>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this participant and free resources.</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* A chat participant can be invoked by the user in a chat session, using the `@` prefix. When it is invoked, it handles the chat request and is solely
 * responsible for providing a response to the user. A ChatParticipant is created using {@link chat.createChatParticipant}.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatParticipantToolToken" params="" file="src/vscode/ChatParticipantToolToken.hx"><x path="Void"/></typedef>
	<typedef path="vscode.ChatPromptReference" params="" file="src/vscode/ChatPromptReference.hx">
		<a>
			<value set="null">
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.Uri"/>
		<c path="vscode.Location"/>
	</x>
</x></x>
				<haxe_doc>* The value of this reference. The `string | Uri | Location` types are used today, but this could expand in the future.</haxe_doc>
			</value>
			<range set="null">
				<x path="Null"><a>
	<start><x path="Int"/></start>
	<end><x path="Int"/></end>
</a></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The start and end index of the reference in the {@link ChatRequest.prompt prompt}. When undefined, the reference was not part of the prompt text.
	 *
	 * *Note* that the indices take the leading `#`-character into account which means they can
	 * used to modify the prompt as-is.</haxe_doc>
			</range>
			<modelDescription set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A description of this value that could be used in an LLM prompt.</haxe_doc>
			</modelDescription>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* A unique identifier for this kind of reference.</haxe_doc>
			</id>
		</a>
		<haxe_doc>* A reference to a value that the user added to their chat request.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatRequest" params="" file="src/vscode/ChatRequest.hx">
		<a>
			<toolReferences set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.ChatLanguageModelToolReference"/></x>
				<haxe_doc>* The list of tools that the user attached to their request.
	 *
	 * When a tool reference is present, the chat participant should make a chat request using
	 * {@link LanguageModelChatToolMode.Required} to force the language model to generate input for the tool. Then, the
	 * participant can use {@link lm.invokeTool} to use the tool attach the result to its request for the user's prompt. The
	 * tool may contribute useful extra context for the user's request.</haxe_doc>
			</toolReferences>
			<toolInvocationToken set="null">
				<t path="vscode.ChatParticipantToolToken"/>
				<haxe_doc>* A token that can be passed to {@link lm.invokeTool} when invoking a tool inside the context of handling a chat request.
	 * This associates the tool invocation to a chat session.</haxe_doc>
			</toolInvocationToken>
			<references set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.ChatPromptReference"/></x>
				<haxe_doc>* The list of references and their values that are referenced in the prompt.
	 *
	 * *Note* that the prompt contains references as authored and that it is up to the participant
	 * to further modify the prompt, for instance by inlining reference values or creating links to
	 * headings which contain the resolved values. References are sorted in reverse by their range
	 * in the prompt. That means the last reference in the prompt is the first in this list. This simplifies
	 * string-manipulation of the prompt.</haxe_doc>
			</references>
			<prompt set="null">
				<c path="String"/>
				<haxe_doc>* The prompt as entered by the user.
	 *
	 * Information about references used in this request is stored in {@link ChatRequest.references}.
	 *
	 * *Note* that the {@link ChatParticipant.name name} of the participant and the {@link ChatCommand.name command}
	 * are not part of the prompt.</haxe_doc>
			</prompt>
			<model set="null">
				<t path="vscode.LanguageModelChat"/>
				<haxe_doc>* This is the model that is currently selected in the UI. Extensions can use this or use {@link chat.selectChatModels} to
	 * pick another model. Don't hold onto this past the lifetime of the request.</haxe_doc>
			</model>
			<command set="null">
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The name of the {@link ChatCommand command} that was selected for this request.</haxe_doc>
			</command>
		</a>
		<haxe_doc>* A request to a chat participant.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatRequestHandler" params="" file="src/vscode/ChatRequestHandler.hx"><f a="request:context:response:token">
	<t path="vscode.ChatRequest"/>
	<t path="vscode.ChatContext"/>
	<t path="vscode.ChatResponseStream"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.ChatResult"/>
	<x path="Void"/>
</x></t>
</f></typedef>
	<class path="vscode.ChatRequestTurn" params="" file="src/vscode/ChatRequestTurn.hx" extern="1">
		<prompt public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The prompt as entered by the user.
	 *
	 * Information about references used in this request is stored in {@link ChatRequestTurn.references}.
	 *
	 * *Note* that the {@link ChatParticipant.name name} of the participant and the {@link ChatCommand.name command}
	 * are not part of the prompt.</haxe_doc>
		</prompt>
		<participant public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The id of the chat participant to which this request was directed.</haxe_doc>
		</participant>
		<command public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of the {@link ChatCommand command} that was selected for this request.</haxe_doc>
		</command>
		<references public="1" set="null">
			<c path="Array"><t path="vscode.ChatPromptReference"/></c>
			<haxe_doc>* The references that were used in this message.</haxe_doc>
		</references>
		<toolReferences public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.ChatLanguageModelToolReference"/></x>
			<haxe_doc>* The list of tools were attached to this request.</haxe_doc>
		</toolReferences>
		<new set="method">
			<f a="prompt:command:references:participant:toolReferences">
				<c path="String"/>
				<x path="Null"><c path="String"/></x>
				<c path="Array"><t path="vscode.ChatPromptReference"/></c>
				<c path="String"/>
				<c path="Array"><t path="vscode.ChatLanguageModelToolReference"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Represents a user request in chat history.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatRequestTurn"</e>
</m></meta>
	</class>
	<class path="vscode.ChatResponseAnchorPart" params="" file="src/vscode/ChatResponseAnchorPart.hx" extern="1">
		<value public="1">
			<x path="haxe.extern.EitherType">
				<c path="vscode.Uri"/>
				<c path="vscode.Location"/>
			</x>
			<haxe_doc>* The target of this anchor.</haxe_doc>
		</value>
		<title public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* An optional title that is rendered with value.</haxe_doc>
		</title>
		<new public="1" set="method">
			<f a="value:?title">
				<x path="haxe.extern.EitherType">
					<c path="vscode.Uri"/>
					<c path="vscode.Location"/>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseAnchorPart.
	 * @param value A uri or location.
	 * @param title An optional title that is rendered with value.</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is an anchor, that is rendered as a link to a target.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseAnchorPart"</e>
</m></meta>
	</class>
	<class path="vscode.ChatResponseCommandButtonPart" params="" file="src/vscode/ChatResponseCommandButtonPart.hx" extern="1">
		<value public="1">
			<t path="vscode.Command"/>
			<haxe_doc>* The command that will be executed when the button is clicked.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<t path="vscode.Command"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseCommandButtonPart.
	 * @param value A Command that will be executed when the button is clicked.</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is a button that executes a command.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseCommandButtonPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.ChatResponseFileTree" params="" file="src/vscode/ChatResponseFileTree.hx">
		<a>
			<name>
				<c path="String"/>
				<haxe_doc>* The name of the file or directory.</haxe_doc>
			</name>
			<children>
				<x path="Null"><c path="Array"><t path="vscode.ChatResponseFileTree"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An array of child file trees, if the current file tree is a directory.</haxe_doc>
			</children>
		</a>
		<haxe_doc>* Represents a file tree structure in a chat response.</haxe_doc>
	</typedef>
	<class path="vscode.ChatResponseFileTreePart" params="" file="src/vscode/ChatResponseFileTreePart.hx" extern="1">
		<value public="1">
			<c path="Array"><t path="vscode.ChatResponseFileTree"/></c>
			<haxe_doc>* File tree data.</haxe_doc>
		</value>
		<baseUri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The base uri to which this file tree is relative</haxe_doc>
		</baseUri>
		<new public="1" set="method">
			<f a="value:baseUri">
				<c path="Array"><t path="vscode.ChatResponseFileTree"/></c>
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseFileTreePart.
	 * @param value File tree data.
	 * @param baseUri The base uri to which this file tree is relative.</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is a file tree.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseFileTreePart"</e>
</m></meta>
	</class>
	<class path="vscode.ChatResponseMarkdownPart" params="" file="src/vscode/ChatResponseMarkdownPart.hx" extern="1">
		<value public="1">
			<c path="vscode.MarkdownString"/>
			<haxe_doc>* A markdown string or a string that should be interpreted as markdown.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseMarkdownPart.
	 *
	 * @param value A markdown string or a string that should be interpreted as markdown. The boolean form of {@link MarkdownString.isTrusted} is NOT supported.</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is formatted as Markdown.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseMarkdownPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.ChatResponsePart" params="" file="src/vscode/ChatResponsePart.hx"><x path="haxe.extern.EitherType">
	<c path="vscode.ChatResponseMarkdownPart"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.ChatResponseFileTreePart"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.ChatResponseAnchorPart"/>
			<x path="haxe.extern.EitherType">
				<c path="vscode.ChatResponseProgressPart"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.ChatResponseReferencePart"/>
					<c path="vscode.ChatResponseCommandButtonPart"/>
				</x>
			</x>
		</x>
	</x>
</x></typedef>
	<class path="vscode.ChatResponseProgressPart" params="" file="src/vscode/ChatResponseProgressPart.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The progress message</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseProgressPart.
	 * @param value A progress message</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is a progress message.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseProgressPart"</e>
</m></meta>
	</class>
	<class path="vscode.ChatResponseReferencePart" params="" file="src/vscode/ChatResponseReferencePart.hx" extern="1">
		<value public="1">
			<x path="haxe.extern.EitherType">
				<c path="vscode.Uri"/>
				<c path="vscode.Location"/>
			</x>
			<haxe_doc>* The reference target.</haxe_doc>
		</value>
		<iconPath public="1">
			<x path="Null"><t path="vscode.IconPath"/></x>
			<haxe_doc>* The icon for the reference.</haxe_doc>
		</iconPath>
		<new public="1" set="method">
			<f a="value:?iconPath">
				<x path="haxe.extern.EitherType">
					<c path="vscode.Uri"/>
					<c path="vscode.Location"/>
				</x>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new ChatResponseReferencePart.
	 * @param value A uri or location
	 * @param iconPath Icon for the reference shown in UI</haxe_doc>
		</new>
		<haxe_doc>* Represents a part of a chat response that is a reference, rendered separately from the content.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseReferencePart"</e>
</m></meta>
	</class>
	<typedef path="vscode.ChatResponseStream" params="" file="src/vscode/ChatResponseStream.hx">
		<a>
			<reference set="method">
				<f a="value:?iconPath">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Uri"/>
						<c path="vscode.Location"/>
					</x>
					<t path="vscode.IconPath"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push a reference to this stream. Short-hand for
	 * `push(new ChatResponseReferencePart(value))`.
	 *
	 * *Note* that the reference is not rendered inline with the response.
	 *
	 * @param value A uri or location
	 * @param iconPath Icon for the reference shown in UI</haxe_doc>
			</reference>
			<push set="method">
				<f a="part">
					<t path="vscode.ChatResponsePart"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Pushes a part to this stream.
	 *
	 * @param part A response part, rendered or metadata</haxe_doc>
			</push>
			<progress set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push a progress part to this stream. Short-hand for
	 * `push(new ChatResponseProgressPart(value))`.
	 *
	 * @param value A progress message</haxe_doc>
			</progress>
			<markdown set="method">
				<f a="value">
					<x path="haxe.extern.EitherType">
						<c path="String"/>
						<c path="vscode.MarkdownString"/>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push a markdown part to this stream. Short-hand for
	 * `push(new ChatResponseMarkdownPart(value))`.
	 *
	 * @see {@link ChatResponseStream.push}
	 * @param value A markdown string or a string that should be interpreted as markdown. The boolean form of {@link MarkdownString.isTrusted} is NOT supported.</haxe_doc>
			</markdown>
			<filetree set="method">
				<f a="value:baseUri">
					<c path="Array"><t path="vscode.ChatResponseFileTree"/></c>
					<c path="vscode.Uri"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push a filetree part to this stream. Short-hand for
	 * `push(new ChatResponseFileTreePart(value))`.
	 *
	 * @param value File tree data.
	 * @param baseUri The base uri to which this file tree is relative.</haxe_doc>
			</filetree>
			<button set="method">
				<f a="command">
					<t path="vscode.Command"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push a command button part to this stream. Short-hand for
	 * `push(new ChatResponseCommandButtonPart(value, title))`.
	 *
	 * @param command A Command that will be executed when the button is clicked.</haxe_doc>
			</button>
			<anchor set="method">
				<f a="value:?title">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Uri"/>
						<c path="vscode.Location"/>
					</x>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Push an anchor part to this stream. Short-hand for
	 * `push(new ChatResponseAnchorPart(value, title))`.
	 * An anchor is an inline reference to some type of resource.
	 *
	 * @param value A uri or location.
	 * @param title An optional title that is rendered with value.</haxe_doc>
			</anchor>
		</a>
		<haxe_doc>* The ChatResponseStream is how a participant is able to return content to the chat view. It provides several methods for streaming different types of content
 * which will be rendered in an appropriate way in the chat view. A participant can use the helper method for the type of content it wants to return, or it
 * can instantiate a {@link ChatResponsePart} and use the generic {@link ChatResponseStream.push} method to return it.</haxe_doc>
	</typedef>
	<class path="vscode.ChatResponseTurn" params="" file="src/vscode/ChatResponseTurn.hx" extern="1">
		<response public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><x path="haxe.extern.EitherType">
	<c path="vscode.ChatResponseMarkdownPart"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.ChatResponseFileTreePart"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.ChatResponseAnchorPart"/>
			<c path="vscode.ChatResponseCommandButtonPart"/>
		</x>
	</x>
</x></x>
			<haxe_doc>* The content that was received from the chat participant. Only the stream parts that represent actual content (not metadata) are represented.</haxe_doc>
		</response>
		<result public="1" set="null">
			<t path="vscode.ChatResult"/>
			<haxe_doc>* The result that was received from the chat participant.</haxe_doc>
		</result>
		<participant public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The id of the chat participant that this response came from.</haxe_doc>
		</participant>
		<command public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The name of the command that this response came from.</haxe_doc>
		</command>
		<new set="method">
			<f a="response:result:participant">
				<x path="haxe.ds.ReadOnlyArray"><x path="haxe.extern.EitherType">
	<c path="vscode.ChatResponseMarkdownPart"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.ChatResponseFileTreePart"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.ChatResponseAnchorPart"/>
			<c path="vscode.ChatResponseCommandButtonPart"/>
		</x>
	</x>
</x></x>
				<t path="vscode.ChatResult"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Represents a chat participant's response in chat history.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ChatResponseTurn"</e>
</m></meta>
	</class>
	<typedef path="vscode.ChatResult" params="" file="src/vscode/ChatResult.hx">
		<a>
			<metadata>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Arbitrary metadata for this result. Can be anything, but must be JSON-stringifyable.</haxe_doc>
			</metadata>
			<errorDetails>
				<x path="Null"><t path="vscode.ChatErrorDetails"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If the request resulted in an error, this property defines the error details.</haxe_doc>
			</errorDetails>
		</a>
		<haxe_doc>* The result of a chat request.</haxe_doc>
	</typedef>
	<typedef path="vscode.ChatResultFeedback" params="" file="src/vscode/ChatResultFeedback.hx">
		<a>
			<result set="null">
				<t path="vscode.ChatResult"/>
				<haxe_doc>* The ChatResult for which the user is providing feedback.
	 * This object has the same properties as the result returned from the participant callback, including `metadata`, but is not the same instance.</haxe_doc>
			</result>
			<kind set="null">
				<x path="vscode.ChatResultFeedbackKind"/>
				<haxe_doc>* The kind of feedback that was received.</haxe_doc>
			</kind>
		</a>
		<haxe_doc>* Represents user feedback for a result.</haxe_doc>
	</typedef>
	<abstract path="vscode.ChatResultFeedbackKind" params="" file="src/vscode/ChatResultFeedbackKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the type of user feedback received.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ChatResultFeedbackKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._ChatResultFeedbackKind.ChatResultFeedbackKind_Impl_" params="" file="src/vscode/ChatResultFeedbackKind.hx" private="1" module="vscode.ChatResultFeedbackKind" extern="1" final="1">
	<Unhelpful public="1" set="null" static="1">
		<x path="vscode.ChatResultFeedbackKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The user marked the result as unhelpful.</haxe_doc>
	</Unhelpful>
	<Helpful public="1" set="null" static="1">
		<x path="vscode.ChatResultFeedbackKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The user marked the result as helpful.</haxe_doc>
	</Helpful>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ChatResultFeedbackKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ChatResultFeedbackKind.ChatResultFeedbackKind_Impl_" params="" file="src/vscode/ChatResultFeedbackKind.hx" private="1" module="vscode.ChatResultFeedbackKind" extern="1" final="1">
		<Unhelpful public="1" set="null" static="1">
			<x path="vscode.ChatResultFeedbackKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The user marked the result as unhelpful.</haxe_doc>
		</Unhelpful>
		<Helpful public="1" set="null" static="1">
			<x path="vscode.ChatResultFeedbackKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The user marked the result as helpful.</haxe_doc>
		</Helpful>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ChatResultFeedbackKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Clipboard" params="" file="src/vscode/Clipboard.hx">
		<a>
			<writeText set="method">
				<f a="value">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Writes text into the clipboard.
	 * @returns A thenable that resolves when writing happened.</haxe_doc>
			</writeText>
			<readText set="method">
				<f a=""><x path="js.lib.Thenable"><c path="String"/></x></f>
				<haxe_doc>* Read the current clipboard contents as text.
	 * @returns A thenable that resolves to a string.</haxe_doc>
			</readText>
		</a>
		<haxe_doc>* The clipboard provides read and write access to the system's clipboard.</haxe_doc>
	</typedef>
	<class path="vscode.CodeAction" params="" file="src/vscode/CodeAction.hx" extern="1">
		<title public="1">
			<c path="String"/>
			<haxe_doc>* A short, human-readable, title for this code action.</haxe_doc>
		</title>
		<edit public="1">
			<x path="Null"><c path="vscode.WorkspaceEdit"/></x>
			<haxe_doc>* A {@link WorkspaceEdit workspace edit} this code action performs.</haxe_doc>
		</edit>
		<diagnostics public="1">
			<x path="Null"><c path="Array"><c path="vscode.Diagnostic"/></c></x>
			<haxe_doc>* {@link Diagnostic Diagnostics} that this code action resolves.</haxe_doc>
		</diagnostics>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* A {@link Command} this code action executes.
	 *
	 * If this command throws an exception, the editor displays the exception message to users in the editor at the
	 * current cursor position.</haxe_doc>
		</command>
		<kind public="1">
			<x path="Null"><c path="vscode.CodeActionKind"/></x>
			<haxe_doc>* {@link CodeActionKind Kind} of the code action.
	 *
	 * Used to filter code actions.</haxe_doc>
		</kind>
		<isPreferred public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Marks this as a preferred action. Preferred actions are used by the `auto fix` command and can be targeted
	 * by keybindings.
	 *
	 * A quick fix should be marked preferred if it properly addresses the underlying error.
	 * A refactoring should be marked preferred if it is the most reasonable choice of actions to take.</haxe_doc>
		</isPreferred>
		<disabled public="1">
			<x path="Null"><a><reason set="null">
	<c path="String"/>
	<haxe_doc>* Human readable description of why the code action is currently disabled.
		 *
		 * This is displayed in the code actions UI.</haxe_doc>
</reason></a></x>
			<haxe_doc>* Marks that the code action cannot currently be applied.
	 *
	 * - Disabled code actions are not shown in automatic [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action)
	 * code action menu.
	 *
	 * - Disabled actions are shown as faded out in the code action menu when the user request a more specific type
	 * of code action, such as refactorings.
	 *
	 * - If the user has a [keybinding](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions)
	 * that auto applies a code action and only a disabled code actions are returned, the editor will show the user an
	 * error message with `reason` in the editor.</haxe_doc>
		</disabled>
		<new public="1" set="method">
			<f a="title:?kind">
				<c path="String"/>
				<c path="vscode.CodeActionKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new code action.
	 *
	 * A code action must have at least a {@link CodeAction.title title} and {@link CodeAction.edit edits}
	 * and/or a {@link CodeAction.command command}.
	 *
	 * @param title The title of the code action.
	 * @param kind The kind of the code action.</haxe_doc>
		</new>
		<haxe_doc>* A code action represents a change that can be performed in code, e.g. to fix a problem or
 * to refactor code.
 *
 * A CodeAction must set either {@linkcode CodeAction.edit edit} and/or a {@linkcode CodeAction.command command}. If both are supplied, the `edit` is applied first, then the command is executed.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeAction"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeActionContext" params="" file="src/vscode/CodeActionContext.hx">
		<a>
			<triggerKind final="1" set="null">
				<x path="vscode.CodeActionTriggerKind"/>
				<haxe_doc>* The reason why code actions were requested.</haxe_doc>
			</triggerKind>
			<only set="null">
				<x path="Null"><c path="vscode.CodeActionKind"/></x>
				<haxe_doc>* Requested kind of actions to return.
	 *
	 * Actions not of this kind are filtered out before being shown by the [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action).</haxe_doc>
			</only>
			<diagnostics set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x>
				<haxe_doc>* An array of diagnostics.</haxe_doc>
			</diagnostics>
		</a>
		<haxe_doc>* Contains additional diagnostic information about the context in which
 * a {@link CodeActionProvider.provideCodeActions code action} is run.</haxe_doc>
	</typedef>
	<class path="vscode.CodeActionKind" params="" file="src/vscode/CodeActionKind.hx" extern="1">
		<Empty public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Empty kind.</haxe_doc>
		</Empty>
		<QuickFix public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for quickfix actions: `quickfix`.
	 *
	 * Quick fix actions address a problem in the code and are shown in the normal code action context menu.</haxe_doc>
		</QuickFix>
		<Refactor public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring actions: `refactor`
	 *
	 * Refactoring actions are shown in the refactoring context menu.</haxe_doc>
		</Refactor>
		<RefactorExtract public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring extraction actions: `refactor.extract`
	 *
	 * Example extract actions:
	 *
	 * - Extract method
	 * - Extract function
	 * - Extract variable
	 * - Extract interface from class
	 * - ...</haxe_doc>
		</RefactorExtract>
		<RefactorInline public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring inline actions: `refactor.inline`
	 *
	 * Example inline actions:
	 *
	 * - Inline function
	 * - Inline variable
	 * - Inline constant
	 * - ...</haxe_doc>
		</RefactorInline>
		<RefactorMove public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring move actions: `refactor.move`
	 *
	 * Example move actions:
	 *
	 * - Move a function to a new file
	 * - Move a property between classes
	 * - Move method to base class
	 * - ...</haxe_doc>
		</RefactorMove>
		<RefactorRewrite public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for refactoring rewrite actions: `refactor.rewrite`
	 *
	 * Example rewrite actions:
	 *
	 * - Convert JavaScript function to class
	 * - Add or remove parameter
	 * - Encapsulate field
	 * - Make method static
	 * - ...</haxe_doc>
		</RefactorRewrite>
		<Source public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for source actions: `source`
	 *
	 * Source code actions apply to the entire file. They must be explicitly requested and will not show in the
	 * normal [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) menu. Source actions
	 * can be run on save using `editor.codeActionsOnSave` and are also shown in the `source` context menu.</haxe_doc>
		</Source>
		<SourceOrganizeImports public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for an organize imports source action: `source.organizeImports`.</haxe_doc>
		</SourceOrganizeImports>
		<SourceFixAll public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for auto-fix source actions: `source.fixAll`.
	 *
	 * Fix all actions automatically fix errors that have a clear fix that do not require user input.
	 * They should not suppress errors or perform unsafe fixes such as generating new types or classes.</haxe_doc>
		</SourceFixAll>
		<Notebook public="1" set="null" static="1">
			<c path="vscode.CodeActionKind"/>
			<haxe_doc>* Base kind for all code actions applying to the entire notebook's scope. CodeActionKinds using
	 * this should always begin with `notebook.`
	 *
	 * This requires that new CodeActions be created for it and contributed via extensions.
	 * Pre-existing kinds can not just have the new `notebook.` prefix added to them, as the functionality
	 * is unique to the full-notebook scope.
	 *
	 * Notebook CodeActionKinds can be initialized as either of the following (both resulting in `notebook.source.xyz`):
	 * - `const newKind =  CodeActionKind.Notebook.append(CodeActionKind.Source.append('xyz').value)`
	 * - `const newKind =  CodeActionKind.Notebook.append('source.xyz')`
	 *
	 * Example Kinds/Actions:
	 * - `notebook.source.organizeImports` (might move all imports to a new top cell)
	 * - `notebook.source.normalizeVariableNames` (might rename all variables to a standardized casing format)</haxe_doc>
		</Notebook>
		<value public="1" set="null">
			<c path="String"/>
			<haxe_doc>* String value of the kind, e.g. `"refactor.extract.function"`.</haxe_doc>
		</value>
		<append public="1" set="method">
			<f a="parts">
				<c path="String"/>
				<c path="vscode.CodeActionKind"/>
			</f>
			<haxe_doc>* Create a new kind by appending a more specific selector to the current kind.
	 *
	 * Does not modify the current kind.</haxe_doc>
		</append>
		<intersects public="1" set="method">
			<f a="other">
				<c path="vscode.CodeActionKind"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if this code action kind intersects `other`.
	 *
	 * The kind `"refactor.extract"` for example intersects `refactor`, `"refactor.extract"` and `"refactor.extract.function"`,
	 * but not `"unicorn.refactor.extract"`, or `"refactor.extractAll"`.
	 *
	 * @param other Kind to check.</haxe_doc>
		</intersects>
		<contains public="1" set="method">
			<f a="other">
				<c path="vscode.CodeActionKind"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Checks if `other` is a sub-kind of this `CodeActionKind`.
	 *
	 * The kind `"refactor.extract"` for example contains `"refactor.extract"` and ``"refactor.extract.function"`,
	 * but not `"unicorn.refactor.extract"`, or `"refactor.extractAll"` or `refactor`.
	 *
	 * @param other Kind to check.</haxe_doc>
		</contains>
		<new set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Private constructor, use static `CodeActionKind.XYZ` to derive from an existing code action kind.
	 *
	 * @param value The value of the kind, such as `refactor.extract.function`.</haxe_doc>
		</new>
		<haxe_doc>* Kind of a code action.
 *
 * Kinds are a hierarchical list of identifiers separated by `.`, e.g. `"refactor.extract.function"`.
 *
 * Code action kinds are used by the editor for UI elements such as the refactoring context menu. Users
 * can also trigger code actions with a specific kind with the `editor.action.codeAction` command.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeActionKind"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeActionProvider" params="T" file="src/vscode/CodeActionProvider.hx">
		<a>
			<resolveCodeAction set="method">
				<x path="Null"><f a="codeAction:token">
	<c path="vscode.CodeActionProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CodeActionProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a code action fill in its {@linkcode CodeAction.edit edit}-property. Changes to
	 * all other properties, like title, are ignored. A code action that has an edit
	 * will not be resolved.
	 *
	 * *Note* that a code action provider that returns commands, not code actions, cannot successfully
	 * implement this function. Returning commands is deprecated and instead code actions should be
	 * returned.
	 *
	 * @param codeAction A code action.
	 * @param token A cancellation token.
	 * @returns The resolved code action or a thenable that resolves to such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveCodeAction>
			<provideCodeActions set="method">
				<f a="document:range:context:token">
					<c path="vscode.TextDocument"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Range"/>
						<c path="vscode.Selection"/>
					</x>
					<t path="vscode.CodeActionContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><x path="haxe.extern.EitherType">
	<t path="vscode.Command"/>
	<c path="vscode.CodeActionProvider.T"/>
</x></c></t>
				</f>
				<haxe_doc>* Get code actions for a given range in a document.
	 *
	 * Only return code actions that are relevant to user for the requested range. Also keep in mind how the
	 * returned code actions will appear in the UI. The lightbulb widget and `Refactor` commands for instance show
	 * returned code actions as a list, so do not return a large number of code actions that will overwhelm the user.
	 *
	 * @param document The document in which the command was invoked.
	 * @param range The selector or range for which the command was invoked. This will always be a
	 * {@link Selection selection} if the actions are being requested in the currently active editor.
	 * @param context Provides additional information about what code actions are being requested. You can use this
	 * to see what specific type of code actions are being requested by the editor in order to return more relevant
	 * actions and avoid returning irrelevant code actions that the editor will discard.
	 * @param token A cancellation token.
	 *
	 * @returns An array of code actions, such as quick fixes or refactorings. The lack of a result can be signaled
	 * by returning `undefined`, `null`, or an empty array.
	 *
	 * We also support returning `Command` for legacy reasons, however all new extensions should return
	 * `CodeAction` object instead.</haxe_doc>
			</provideCodeActions>
		</a>
		<haxe_doc>* Provides contextual actions for code. Code actions typically either fix problems or beautify/refactor code.
 *
 * Code actions are surfaced to users in a few different ways:
 *
 * - The [lightbulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature, which shows
 *   a list of code actions at the current cursor position. The lightbulb's list of actions includes both quick fixes
 *   and refactorings.
 * - As commands that users can run, such as `Refactor`. Users can run these from the command palette or with keybindings.
 * - As source actions, such `Organize Imports`.
 * - {@link CodeActionKind.QuickFix Quick fixes} are shown in the problems view.
 * - Change applied on save by the `editor.codeActionsOnSave` setting.</haxe_doc>
	</typedef>
	<typedef path="vscode.CodeActionProviderMetadata" params="" file="src/vscode/CodeActionProviderMetadata.hx">
		<a>
			<providedCodeActionKinds final="1" set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.CodeActionKind"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* List of {@link CodeActionKind CodeActionKinds} that a {@link CodeActionProvider} may return.
	 *
	 * This list is used to determine if a given `CodeActionProvider` should be invoked or not.
	 * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The
	 * list of kinds may either be generic, such as `[CodeActionKind.Refactor]`, or list out every kind provided,
	 * such as `[CodeActionKind.Refactor.Extract.append('function'), CodeActionKind.Refactor.Extract.append('constant'), ...]`.</haxe_doc>
			</providedCodeActionKinds>
			<documentation final="1" set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><a>
	<kind final="1" set="null">
		<c path="vscode.CodeActionKind"/>
		<haxe_doc>* The kind of the code action being documented.
		 *
		 * If the kind is generic, such as `CodeActionKind.Refactor`, the documentation will be shown whenever any
		 * refactorings are returned. If the kind if more specific, such as `CodeActionKind.RefactorExtract`, the
		 * documentation will only be shown when extract refactoring code actions are returned.</haxe_doc>
	</kind>
	<command final="1" set="null">
		<t path="vscode.Command"/>
		<haxe_doc>* Command that displays the documentation to the user.
		 *
		 * This can display the documentation directly in the editor or open a website using {@linkcode env.openExternal};
		 *
		 * The title of this documentation code action is taken from {@linkcode Command.title}</haxe_doc>
	</command>
</a></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Static documentation for a class of code actions.
	 *
	 * Documentation from the provider is shown in the code actions menu if either:
	 *
	 * - Code actions of `kind` are requested by the editor. In this case, the editor will show the documentation that
	 *   most closely matches the requested code action kind. For example, if a provider has documentation for
	 *   both `Refactor` and `RefactorExtract`, when the user requests code actions for `RefactorExtract`,
	 *   the editor will use the documentation for `RefactorExtract` instead of the documentation for `Refactor`.
	 *
	 * - Any code actions of `kind` are returned by the provider.
	 *
	 * At most one documentation entry will be shown per provider.</haxe_doc>
			</documentation>
		</a>
		<haxe_doc>* Metadata about the type of code actions that a {@link CodeActionProvider} provides.</haxe_doc>
	</typedef>
	<abstract path="vscode.CodeActionTriggerKind" params="" file="src/vscode/CodeActionTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The reason why code actions were requested.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CodeActionTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._CodeActionTriggerKind.CodeActionTriggerKind_Impl_" params="" file="src/vscode/CodeActionTriggerKind.hx" private="1" module="vscode.CodeActionTriggerKind" extern="1" final="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.CodeActionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Code actions were explicitly requested by the user or by an extension.</haxe_doc>
	</Invoke>
	<Automatic public="1" set="null" static="1">
		<x path="vscode.CodeActionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Code actions were requested automatically.
	 *
	 * This typically happens when current selection in a file changes, but can
	 * also be triggered when file content changes.</haxe_doc>
	</Automatic>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CodeActionTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CodeActionTriggerKind.CodeActionTriggerKind_Impl_" params="" file="src/vscode/CodeActionTriggerKind.hx" private="1" module="vscode.CodeActionTriggerKind" extern="1" final="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.CodeActionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Code actions were explicitly requested by the user or by an extension.</haxe_doc>
		</Invoke>
		<Automatic public="1" set="null" static="1">
			<x path="vscode.CodeActionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Code actions were requested automatically.
	 *
	 * This typically happens when current selection in a file changes, but can
	 * also be triggered when file content changes.</haxe_doc>
		</Automatic>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CodeActionTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.CodeLens" params="" file="src/vscode/CodeLens.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range in which this code lens is valid. Should only span a single line.</haxe_doc>
		</range>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* The command this code lens represents.</haxe_doc>
		</command>
		<isResolved public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* `true` when there is a command associated.</haxe_doc>
		</isResolved>
		<new public="1" set="method">
			<f a="range:?command">
				<c path="vscode.Range"/>
				<x path="Null"><t path="vscode.Command"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new code lens object.
	 *
	 * @param range The range to which this code lens applies.
	 * @param command The command associated to this code lens.</haxe_doc>
		</new>
		<haxe_doc>* A code lens represents a {@link Command} that should be shown along with
 * source text, like the number of references, a way to run tests, etc.
 *
 * A code lens is _unresolved_ when no command is associated to it. For performance
 * reasons the creation of a code lens and resolving should be done to two stages.
 *
 * @see {@link CodeLensProvider.provideCodeLenses}
 * @see {@link CodeLensProvider.resolveCodeLens}</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CodeLens"</e>
</m></meta>
	</class>
	<typedef path="vscode.CodeLensProvider" params="T" file="src/vscode/CodeLensProvider.hx">
		<a>
			<resolveCodeLens set="method">
				<x path="Null"><f a="codeLens:token">
	<c path="vscode.CodeLensProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CodeLensProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This function will be called for each visible code lens, usually when scrolling and after
	 * calls to {@link CodeLensProvider.provideCodeLenses compute}-lenses.
	 *
	 * @param codeLens Code lens that must be resolved.
	 * @param token A cancellation token.
	 * @returns The given, resolved code lens or thenable that resolves to such.</haxe_doc>
			</resolveCodeLens>
			<provideCodeLenses set="method">
				<f a="document:token">
					<c path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.CodeLensProvider.T"/></c></t>
				</f>
				<haxe_doc>* Compute a list of {@link CodeLens lenses}. This call should return as fast as possible and if
	 * computing the commands is expensive implementors should only return code lens objects with the
	 * range set and implement {@link CodeLensProvider.resolveCodeLens resolve}.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @returns An array of code lenses or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideCodeLenses>
			<onDidChangeCodeLenses>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the code lenses from this provider have changed.</haxe_doc>
			</onDidChangeCodeLenses>
		</a>
		<haxe_doc>* A code lens provider adds {@link Command commands} to source text. The commands will be shown
 * as dedicated horizontal lines in between the source text.</haxe_doc>
	</typedef>
	<class path="vscode.Color" params="" file="src/vscode/Color.hx" extern="1">
		<red public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The red component of this color in the range `[0-1]`.</haxe_doc>
		</red>
		<green public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The green component of this color in the range `[0-1]`.</haxe_doc>
		</green>
		<blue public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The blue component of this color in the range `[0-1]`.</haxe_doc>
		</blue>
		<alpha public="1" set="null">
			<x path="Float"/>
			<haxe_doc>* The alpha component of this color in the range `[0-1]`.</haxe_doc>
		</alpha>
		<new public="1" set="method">
			<f a="red:green:blue:alpha">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Float"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color instance.
	 *
	 * @param red The red component.
	 * @param green The green component.
	 * @param blue The blue component.
	 * @param alpha The alpha component.</haxe_doc>
		</new>
		<haxe_doc>* Represents a color in RGBA space.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Color"</e>
</m></meta>
	</class>
	<class path="vscode.ColorInformation" params="" file="src/vscode/ColorInformation.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range in the document where this color appears.</haxe_doc>
		</range>
		<color public="1">
			<c path="vscode.Color"/>
			<haxe_doc>* The actual color value for this color range.</haxe_doc>
		</color>
		<new public="1" set="method">
			<f a="range:color">
				<c path="vscode.Range"/>
				<c path="vscode.Color"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color range.
	 *
	 * @param range The range the color appears in. Must not be empty.
	 * @param color The value of the color.</haxe_doc>
		</new>
		<haxe_doc>* Represents a color range from a document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ColorInformation"</e>
</m></meta>
	</class>
	<class path="vscode.ColorPresentation" params="" file="src/vscode/ColorPresentation.hx" extern="1">
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The label of this color presentation. It will be shown on the color
	 * picker header. By default this is also the text that is inserted when selecting
	 * this color presentation.</haxe_doc>
		</label>
		<textEdit public="1">
			<x path="Null"><c path="vscode.TextEdit"/></x>
			<haxe_doc>* An {@link TextEdit edit} which is applied to a document when selecting
	 * this presentation for the color.  When `falsy` the {@link ColorPresentation.label label}
	 * is used.</haxe_doc>
		</textEdit>
		<additionalTextEdits public="1">
			<x path="Null"><c path="Array"><c path="vscode.TextEdit"/></c></x>
			<haxe_doc>* An optional array of additional {@link TextEdit text edits} that are applied when
	 * selecting this color presentation. Edits must not overlap with the main {@link ColorPresentation.textEdit edit} nor with themselves.</haxe_doc>
		</additionalTextEdits>
		<new public="1" set="method">
			<f a="label">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new color presentation.
	 *
	 * @param label The label of this color presentation.</haxe_doc>
		</new>
		<haxe_doc>* A color presentation object describes how a {@linkcode Color} should be represented as text and what
 * edits are required to refer to it from source code.
 *
 * For some languages one color can have multiple presentations, e.g. css can represent the color red with
 * the constant `Red`, the hex-value `#ff0000`, or in rgba and hsla forms. In csharp other representations
 * apply, e.g. `System.Drawing.Color.Red`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ColorPresentation"</e>
</m></meta>
	</class>
	<typedef path="vscode.ColorTheme" params="" file="src/vscode/ColorTheme.hx">
		<a><kind set="null">
	<x path="vscode.ColorThemeKind"/>
	<haxe_doc>* The kind of this color theme: light, dark, high contrast dark and high contrast light.</haxe_doc>
</kind></a>
		<haxe_doc>* Represents a color theme.</haxe_doc>
	</typedef>
	<abstract path="vscode.ColorThemeKind" params="" file="src/vscode/ColorThemeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents a color theme kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ColorThemeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._ColorThemeKind.ColorThemeKind_Impl_" params="" file="src/vscode/ColorThemeKind.hx" private="1" module="vscode.ColorThemeKind" extern="1" final="1">
	<Light public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A light color theme.</haxe_doc>
	</Light>
	<Dark public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A dark color theme.</haxe_doc>
	</Dark>
	<HighContrast public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A dark high contrast color theme.</haxe_doc>
	</HighContrast>
	<HighContrastLight public="1" set="null" static="1">
		<x path="vscode.ColorThemeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A light high contrast color theme.</haxe_doc>
	</HighContrastLight>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ColorThemeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ColorThemeKind.ColorThemeKind_Impl_" params="" file="src/vscode/ColorThemeKind.hx" private="1" module="vscode.ColorThemeKind" extern="1" final="1">
		<Light public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A light color theme.</haxe_doc>
		</Light>
		<Dark public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A dark color theme.</haxe_doc>
		</Dark>
		<HighContrast public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A dark high contrast color theme.</haxe_doc>
		</HighContrast>
		<HighContrastLight public="1" set="null" static="1">
			<x path="vscode.ColorThemeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A light high contrast color theme.</haxe_doc>
		</HighContrastLight>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ColorThemeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Command" params="" file="src/vscode/Command.hx">
		<a>
			<tooltip>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A tooltip for the command, when represented in the UI.</haxe_doc>
			</tooltip>
			<title>
				<c path="String"/>
				<haxe_doc>* Title of the command, like `save`.</haxe_doc>
			</title>
			<command>
				<c path="String"/>
				<haxe_doc>* The identifier of the actual command handler.
	 * @see {@link commands.registerCommand}</haxe_doc>
			</command>
			<arguments>
				<x path="Null"><c path="Array"><x path="Any"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Arguments that the command handler should be
	 * invoked with.</haxe_doc>
			</arguments>
		</a>
		<haxe_doc>* Represents a reference to a command. Provides a title which
 * will be used to represent a command in the UI and, optionally,
 * an array of arguments which will be passed to the command handler
 * function when invoked.</haxe_doc>
	</typedef>
	<typedef path="vscode.Comment" params="" file="src/vscode/Comment.hx">
		<a>
			<timestamp>
				<x path="Null"><c path="Date"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional timestamp that will be displayed in comments.
	 * The date will be formatted according to the user's locale and settings.</haxe_doc>
			</timestamp>
			<reactions>
				<x path="Null"><c path="Array"><t path="vscode.CommentReaction"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional reactions of the {@link Comment}</haxe_doc>
			</reactions>
			<mode>
				<x path="vscode.CommentMode"/>
				<haxe_doc>* {@link CommentMode Comment mode} of the comment</haxe_doc>
			</mode>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional label describing the {@link Comment}
	 * Label will be rendered next to authorName if exists.</haxe_doc>
			</label>
			<contextValue>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the comment. This can be used to contribute comment specific actions.
	 * For example, a comment is given a context value as `editable`. When contributing actions to `comments/comment/title`
	 * using `menus` extension point, you can specify context value for key `comment` in `when` expression like `comment == editable`.
	 * ```json
	 *	"contributes": {
	 *		"menus": {
	 *			"comments/comment/title": [
	 *				{
	 *					"command": "extension.deleteComment",
	 *					"when": "comment == editable"
	 *				}
	 *			]
	 *		}
	 *	}
	 * ```
	 * This will show action `extension.deleteComment` only for comments with `contextValue` is `editable`.</haxe_doc>
			</contextValue>
			<body>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<haxe_doc>* The human-readable comment body</haxe_doc>
			</body>
			<author>
				<t path="vscode.CommentAuthorInformation"/>
				<haxe_doc>* The {@link CommentAuthorInformation author information} of the comment</haxe_doc>
			</author>
		</a>
		<haxe_doc>* A comment is displayed within the editor or the Comments Panel, depending on how it is provided.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentAuthorInformation" params="" file="src/vscode/CommentAuthorInformation.hx">
		<a>
			<name>
				<c path="String"/>
				<haxe_doc>* The display name of the author of the comment</haxe_doc>
			</name>
			<iconPath>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The optional icon path for the author</haxe_doc>
			</iconPath>
		</a>
		<haxe_doc>* Author information of a {@link Comment}</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentController" params="" file="src/vscode/CommentController.hx">
		<a>
			<reactionHandler>
				<x path="Null"><f a="comment:reaction">
	<t path="vscode.Comment"/>
	<t path="vscode.CommentReaction"/>
	<x path="js.lib.Thenable"><x path="Void"/></x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional reaction handler for creating and deleting reactions on a {@link Comment}.</haxe_doc>
			</reactionHandler>
			<options>
				<x path="Null"><t path="vscode.CommentOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Comment controller options</haxe_doc>
			</options>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label of this comment controller.</haxe_doc>
			</label>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this comment controller.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this comment controller.
	 *
	 * Once disposed, all {@link CommentThread comment threads} created by this comment controller will also be removed from the editor
	 * and Comments Panel.</haxe_doc>
			</dispose>
			<createCommentThread set="method">
				<f a="uri:range:comments">
					<c path="vscode.Uri"/>
					<c path="vscode.Range"/>
					<c path="Array"><t path="vscode.Comment"/></c>
					<t path="vscode.CommentThread"/>
				</f>
				<haxe_doc>* Create a {@link CommentThread comment thread}. The comment thread will be displayed in visible text editors (if the resource matches)
	 * and Comments Panel once created.
	 *
	 * @param uri The uri of the document the thread has been created on.
	 * @param range The range the comment thread is located within the document.
	 * @param comments The ordered comments of the thread.</haxe_doc>
			</createCommentThread>
			<commentingRangeProvider>
				<x path="Null"><t path="vscode.CommentingRangeProvider"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional commenting range provider. Provide a list {@link Range ranges} which support commenting to any given resource uri.
	 *
	 * If not provided, users cannot leave any comments.</haxe_doc>
			</commentingRangeProvider>
		</a>
		<haxe_doc>* A comment controller is able to provide {@link CommentThread comments} support to the editor and
 * provide users various ways to interact with comments.</haxe_doc>
	</typedef>
	<abstract path="vscode.CommentMode" params="" file="src/vscode/CommentMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Comment mode of a {@link Comment}</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._CommentMode.CommentMode_Impl_" params="" file="src/vscode/CommentMode.hx" private="1" module="vscode.CommentMode" extern="1" final="1">
	<Editing public="1" set="null" static="1">
		<x path="vscode.CommentMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Displays the comment editor</haxe_doc>
	</Editing>
	<Preview public="1" set="null" static="1">
		<x path="vscode.CommentMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Displays the preview of the comment</haxe_doc>
	</Preview>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CommentMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CommentMode.CommentMode_Impl_" params="" file="src/vscode/CommentMode.hx" private="1" module="vscode.CommentMode" extern="1" final="1">
		<Editing public="1" set="null" static="1">
			<x path="vscode.CommentMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Displays the comment editor</haxe_doc>
		</Editing>
		<Preview public="1" set="null" static="1">
			<x path="vscode.CommentMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Displays the preview of the comment</haxe_doc>
		</Preview>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CommentOptions" params="" file="src/vscode/CommentOptions.hx">
		<a>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show on the comment input box when it's collapsed.</haxe_doc>
			</prompt>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the comment input box when it's focused.</haxe_doc>
			</placeHolder>
		</a>
		<haxe_doc>* Represents a {@link CommentController comment controller}'s {@link CommentController.options options}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentReaction" params="" file="src/vscode/CommentReaction.hx">
		<a>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label for the reaction</haxe_doc>
			</label>
			<iconPath set="null">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<haxe_doc>* Icon for the reaction shown in UI.</haxe_doc>
			</iconPath>
			<count set="null">
				<x path="Int"/>
				<haxe_doc>* The number of users who have reacted to this reaction</haxe_doc>
			</count>
			<authorHasReacted set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the {@link CommentAuthorInformation author} of the comment has reacted to this reaction</haxe_doc>
			</authorHasReacted>
		</a>
		<haxe_doc>* Reactions of a {@link Comment}</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentReply" params="" file="src/vscode/CommentReply.hx">
		<a>
			<thread>
				<t path="vscode.CommentThread"/>
				<haxe_doc>* The active {@link CommentThread comment thread}</haxe_doc>
			</thread>
			<text>
				<c path="String"/>
				<haxe_doc>* The value in the comment editor</haxe_doc>
			</text>
		</a>
		<haxe_doc>* Command argument for actions registered in `comments/commentThread/context`.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentRule" params="" file="src/vscode/CommentRule.hx">
		<a>
			<lineComment>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The line comment token, like `// this is a comment`</haxe_doc>
			</lineComment>
			<blockComment>
				<x path="Null"><t path="vscode.CharacterPair"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The block comment character pair, like `/* block comment *&#47;`]]></haxe_doc>
			</blockComment>
		</a>
		<haxe_doc>* Describes how comments for a language work.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentThread" params="" file="src/vscode/CommentThread.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of the document the thread has been created on.</haxe_doc>
			</uri>
			<state>
				<x path="Null"><x path="vscode.CommentThreadState"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The optional state of a comment thread, which may affect how the comment is displayed.</haxe_doc>
			</state>
			<range>
				<x path="Null"><c path="vscode.Range"/></x>
				<haxe_doc>* The range the comment thread is located within the document. The thread icon will be shown
	 * at the last line of the range. When set to undefined, the comment will be associated with the
	 * file, and not a specific range.</haxe_doc>
			</range>
			<label>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The optional human-readable label describing the {@link CommentThread Comment Thread}</haxe_doc>
			</label>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this comment thread.
	 *
	 * Once disposed, this comment thread will be removed from visible editors and Comment Panel when appropriate.</haxe_doc>
			</dispose>
			<contextValue>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the comment thread. This can be used to contribute thread specific actions.
	 * For example, a comment thread is given a context value as `editable`. When contributing actions to `comments/commentThread/title`
	 * using `menus` extension point, you can specify context value for key `commentThread` in `when` expression like `commentThread == editable`.
	 * ```json
	 * "contributes": {
	 *   "menus": {
	 *     "comments/commentThread/title": [
	 *       {
	 *         "command": "extension.deleteCommentThread",
	 *         "when": "commentThread == editable"
	 *       }
	 *     ]
	 *   }
	 * }
	 * ```
	 * This will show action `extension.deleteCommentThread` only for comment threads with `contextValue` is `editable`.</haxe_doc>
			</contextValue>
			<comments>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Comment"/></x>
				<haxe_doc>* The ordered comments of the thread.</haxe_doc>
			</comments>
			<collapsibleState>
				<x path="vscode.CommentThreadCollapsibleState"/>
				<haxe_doc>* Whether the thread should be collapsed or expanded when opening the document.
	 * Defaults to Collapsed.</haxe_doc>
			</collapsibleState>
			<canReply>
				<x path="Bool"/>
				<haxe_doc>* Whether the thread supports reply.
	 * Defaults to true.</haxe_doc>
			</canReply>
		</a>
		<haxe_doc>* A collection of {@link Comment comments} representing a conversation at a particular range in a document.</haxe_doc>
	</typedef>
	<abstract path="vscode.CommentThreadCollapsibleState" params="" file="src/vscode/CommentThreadCollapsibleState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Collapsible state of a {@link CommentThread comment thread}</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadCollapsibleState"</e>
			</m>
		</meta>
		<impl><class path="vscode._CommentThreadCollapsibleState.CommentThreadCollapsibleState_Impl_" params="" file="src/vscode/CommentThreadCollapsibleState.hx" private="1" module="vscode.CommentThreadCollapsibleState" extern="1" final="1">
	<Collapsed public="1" set="null" static="1">
		<x path="vscode.CommentThreadCollapsibleState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is collapsed</haxe_doc>
	</Collapsed>
	<Expanded public="1" set="null" static="1">
		<x path="vscode.CommentThreadCollapsibleState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is expanded</haxe_doc>
	</Expanded>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CommentThreadCollapsibleState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CommentThreadCollapsibleState.CommentThreadCollapsibleState_Impl_" params="" file="src/vscode/CommentThreadCollapsibleState.hx" private="1" module="vscode.CommentThreadCollapsibleState" extern="1" final="1">
		<Collapsed public="1" set="null" static="1">
			<x path="vscode.CommentThreadCollapsibleState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is collapsed</haxe_doc>
		</Collapsed>
		<Expanded public="1" set="null" static="1">
			<x path="vscode.CommentThreadCollapsibleState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is expanded</haxe_doc>
		</Expanded>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadCollapsibleState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.CommentThreadState" params="" file="src/vscode/CommentThreadState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The state of a comment thread.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadState"</e>
			</m>
		</meta>
		<impl><class path="vscode._CommentThreadState.CommentThreadState_Impl_" params="" file="src/vscode/CommentThreadState.hx" private="1" module="vscode.CommentThreadState" extern="1" final="1">
	<Unresolved public="1" set="null" static="1">
		<x path="vscode.CommentThreadState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Unresolved thread state</haxe_doc>
	</Unresolved>
	<Resolved public="1" set="null" static="1">
		<x path="vscode.CommentThreadState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Resolved thread state</haxe_doc>
	</Resolved>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CommentThreadState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CommentThreadState.CommentThreadState_Impl_" params="" file="src/vscode/CommentThreadState.hx" private="1" module="vscode.CommentThreadState" extern="1" final="1">
		<Unresolved public="1" set="null" static="1">
			<x path="vscode.CommentThreadState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Unresolved thread state</haxe_doc>
		</Unresolved>
		<Resolved public="1" set="null" static="1">
			<x path="vscode.CommentThreadState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Resolved thread state</haxe_doc>
		</Resolved>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CommentThreadState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CommentingRangeProvider" params="" file="src/vscode/CommentingRangeProvider.hx">
		<a><provideCommentingRanges set="method">
	<f a="document:token">
		<c path="vscode.TextDocument"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.Range"/></c>
	<t path="vscode.CommentingRanges"/>
</x></t>
	</f>
	<haxe_doc>* Provide a list of ranges which allow new comment threads creation or null for a given document</haxe_doc>
</provideCommentingRanges></a>
		<haxe_doc>* Commenting range provider for a {@link CommentController comment controller}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CommentingRanges" params="" file="src/vscode/CommentingRanges.hx">
		<a>
			<ranges>
				<x path="Null"><c path="Array"><c path="vscode.Range"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The ranges which allow new comment threads creation.</haxe_doc>
			</ranges>
			<enableFileComments>
				<x path="Bool"/>
				<haxe_doc>* Enables comments to be added to a file without a specific range.</haxe_doc>
			</enableFileComments>
		</a>
		<haxe_doc>* The ranges a CommentingRangeProvider enables commenting on.</haxe_doc>
	</typedef>
	<typedef path="vscode.CompletionContext" params="" file="src/vscode/CompletionContext.hx">
		<a>
			<triggerKind set="null">
				<x path="vscode.CompletionTriggerKind"/>
				<haxe_doc>* How the completion was triggered.</haxe_doc>
			</triggerKind>
			<triggerCharacter set="null">
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* Character that triggered the completion item provider.
	 *
	 * `undefined` if the provider was not triggered by a character.
	 *
	 * The trigger character is already in the document when the completion provider is triggered.</haxe_doc>
			</triggerCharacter>
		</a>
		<haxe_doc>* Contains additional information about the context in which
 * {@link CompletionItemProvider.provideCompletionItems completion provider} is triggered.</haxe_doc>
	</typedef>
	<class path="vscode.CompletionItem" params="" file="src/vscode/CompletionItem.hx" extern="1">
		<label public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<t path="vscode.CompletionItemLabel"/>
			</x>
			<haxe_doc>* The label of this completion item. By default
	 * this is also the text that is inserted when selecting
	 * this completion.</haxe_doc>
		</label>
		<kind public="1">
			<x path="Null"><x path="vscode.CompletionItemKind"/></x>
			<haxe_doc>* The kind of this completion item. Based on the kind
	 * an icon is chosen by the editor.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.CompletionItemTag"/></x></x>
			<haxe_doc>* Tags for this completion item.</haxe_doc>
		</tags>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable string with additional information
	 * about this item, like type or symbol information.</haxe_doc>
		</detail>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* A human-readable string that represents a doc-comment.</haxe_doc>
		</documentation>
		<sortText public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A string that should be used when comparing this item
	 * with other items. When `falsy` the {@link CompletionItem.label label}
	 * is used.
	 *
	 * Note that `sortText` is only used for the initial ordering of completion
	 * items. When having a leading word (prefix) ordering is based on how
	 * well completions match that prefix and the initial ordering is only used
	 * when completions match equally well. The prefix is defined by the
	 * {@linkcode CompletionItem.range range}-property and can therefore be different
	 * for each completion.</haxe_doc>
		</sortText>
		<filterText public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A string that should be used when filtering a set of
	 * completion items. When `falsy` the {@link CompletionItem.label label}
	 * is used.
	 *
	 * Note that the filter text is matched against the leading word (prefix) which is defined
	 * by the {@linkcode CompletionItem.range range}-property.</haxe_doc>
		</filterText>
		<preselect public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Select this item when showing. *Note* that only one completion item can be selected and
	 * that the editor decides which item that is. The rule is that the *first* item of those
	 * that match best is selected.</haxe_doc>
		</preselect>
		<insertText public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.SnippetString"/>
</x></x>
			<haxe_doc>* A string or snippet that should be inserted in a document when selecting
	 * this completion. When `falsy` the {@link CompletionItem.label label}
	 * is used.</haxe_doc>
		</insertText>
		<range public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Range"/>
	<a>
		<replacing><c path="vscode.Range"/></replacing>
		<inserting><c path="vscode.Range"/></inserting>
	</a>
</x></x>
			<haxe_doc>* A range or a insert and replace range selecting the text that should be replaced by this completion item.
	 *
	 * When omitted, the range of the {@link TextDocument.getWordRangeAtPosition current word} is used as replace-range
	 * and as insert-range the start of the {@link TextDocument.getWordRangeAtPosition current word} to the
	 * current position is used.
	 *
	 * *Note 1:* A range must be a {@link Range.isSingleLine single line} and it must
	 * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.
	 * *Note 2:* A insert range must be a prefix of a replace range, that means it must be contained and starting at the same position.</haxe_doc>
		</range>
		<commitCharacters public="1">
			<x path="Null"><c path="Array"><c path="String"/></c></x>
			<haxe_doc>* An optional set of characters that when pressed while this completion is active will accept it first and
	 * then type that character. *Note* that all commit characters should have `length=1` and that superfluous
	 * characters will be ignored.</haxe_doc>
		</commitCharacters>
		<keepWhitespace public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Keep whitespace of the {@link CompletionItem.insertText insertText} as is. By default, the editor adjusts leading
	 * whitespace of new lines so that they match the indentation of the line for which the item is accepted - setting
	 * this to `true` will prevent that.</haxe_doc>
		</keepWhitespace>
		<textEdit public="1">
			<x path="Null"><c path="vscode.TextEdit"/></x>
			<meta><m n=":deprecated"><e>"Use `CompletionItem.insertText` and `CompletionItem.range` instead."</e></m></meta>
			<haxe_doc>* @deprecated Use `CompletionItem.insertText` and `CompletionItem.range` instead.
	 *
	 * An {@link TextEdit edit} which is applied to a document when selecting
	 * this completion. When an edit is provided the value of
	 * {@link CompletionItem.insertText insertText} is ignored.
	 *
	 * The {@link Range} of the edit must be single-line and on the same
	 * line completions were {@link CompletionItemProvider.provideCompletionItems requested} at.</haxe_doc>
		</textEdit>
		<additionalTextEdits public="1">
			<x path="Null"><c path="Array"><c path="vscode.TextEdit"/></c></x>
			<haxe_doc>* An optional array of additional {@link TextEdit text edits} that are applied when
	 * selecting this completion. Edits must not overlap with the main {@link CompletionItem.textEdit edit}
	 * nor with themselves.</haxe_doc>
		</additionalTextEdits>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* An optional {@link Command} that is executed *after* inserting this completion. *Note* that
	 * additional modifications to the current document should be described with the
	 * {@link CompletionItem.additionalTextEdits additionalTextEdits}-property.</haxe_doc>
		</command>
		<new public="1" set="method">
			<f a="label:?kind">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="vscode.CompletionItemLabel"/>
				</x>
				<x path="vscode.CompletionItemKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new completion item.
	 *
	 * Completion items must have at least a {@link CompletionItem.label label} which then
	 * will be used as insert text as well as for sorting and filtering.
	 *
	 * @param label The label of the completion.
	 * @param kind The {@link CompletionItemKind kind} of the completion.</haxe_doc>
		</new>
		<haxe_doc>* A completion item represents a text snippet that is proposed to complete text that is being typed.
 *
 * It is sufficient to create a completion item from just a {@link CompletionItem.label label}. In that
 * case the completion item will replace the {@link TextDocument.getWordRangeAtPosition word}
 * until the cursor with the given label or {@link CompletionItem.insertText insertText}. Otherwise the
 * given {@link CompletionItem.textEdit edit} is used.
 *
 * When selecting a completion item in the editor its defined or synthesized text edit will be applied
 * to *all* cursors/selections whereas {@link CompletionItem.additionalTextEdits additionalTextEdits} will be
 * applied as provided.
 *
 * @see {@link CompletionItemProvider.provideCompletionItems}
 * @see {@link CompletionItemProvider.resolveCompletionItem}</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CompletionItem"</e>
</m></meta>
	</class>
	<abstract path="vscode.CompletionItemKind" params="" file="src/vscode/CompletionItemKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Completion item kinds.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionItemKind.CompletionItemKind_Impl_" params="" file="src/vscode/CompletionItemKind.hx" private="1" module="vscode.CompletionItemKind" extern="1" final="1">
	<Text public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Text` completion item kind.</haxe_doc>
	</Text>
	<Method public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Method` completion item kind.</haxe_doc>
	</Method>
	<Function public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Function` completion item kind.</haxe_doc>
	</Function>
	<Constructor public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Constructor` completion item kind.</haxe_doc>
	</Constructor>
	<Field public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Field` completion item kind.</haxe_doc>
	</Field>
	<Variable public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Variable` completion item kind.</haxe_doc>
	</Variable>
	<Class public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Class` completion item kind.</haxe_doc>
	</Class>
	<Interface public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Interface` completion item kind.</haxe_doc>
	</Interface>
	<Module public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Module` completion item kind.</haxe_doc>
	</Module>
	<Property public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Property` completion item kind.</haxe_doc>
	</Property>
	<Unit public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Unit` completion item kind.</haxe_doc>
	</Unit>
	<Value public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Value` completion item kind.</haxe_doc>
	</Value>
	<Enum public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Enum` completion item kind.</haxe_doc>
	</Enum>
	<Keyword public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Keyword` completion item kind.</haxe_doc>
	</Keyword>
	<Snippet public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Snippet` completion item kind.</haxe_doc>
	</Snippet>
	<Color public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Color` completion item kind.</haxe_doc>
	</Color>
	<Reference public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Reference` completion item kind.</haxe_doc>
	</Reference>
	<File public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `File` completion item kind.</haxe_doc>
	</File>
	<Folder public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Folder` completion item kind.</haxe_doc>
	</Folder>
	<EnumMember public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `EnumMember` completion item kind.</haxe_doc>
	</EnumMember>
	<Constant public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Constant` completion item kind.</haxe_doc>
	</Constant>
	<Struct public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Struct` completion item kind.</haxe_doc>
	</Struct>
	<Event public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Event` completion item kind.</haxe_doc>
	</Event>
	<Operator public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Operator` completion item kind.</haxe_doc>
	</Operator>
	<TypeParameter public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `TypeParameter` completion item kind.</haxe_doc>
	</TypeParameter>
	<User public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `User` completion item kind.</haxe_doc>
	</User>
	<Issue public="1" set="null" static="1">
		<x path="vscode.CompletionItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Issue` completion item kind.</haxe_doc>
	</Issue>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionItemKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionItemKind.CompletionItemKind_Impl_" params="" file="src/vscode/CompletionItemKind.hx" private="1" module="vscode.CompletionItemKind" extern="1" final="1">
		<Text public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Text` completion item kind.</haxe_doc>
		</Text>
		<Method public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Method` completion item kind.</haxe_doc>
		</Method>
		<Function public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Function` completion item kind.</haxe_doc>
		</Function>
		<Constructor public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Constructor` completion item kind.</haxe_doc>
		</Constructor>
		<Field public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Field` completion item kind.</haxe_doc>
		</Field>
		<Variable public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Variable` completion item kind.</haxe_doc>
		</Variable>
		<Class public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Class` completion item kind.</haxe_doc>
		</Class>
		<Interface public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Interface` completion item kind.</haxe_doc>
		</Interface>
		<Module public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Module` completion item kind.</haxe_doc>
		</Module>
		<Property public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Property` completion item kind.</haxe_doc>
		</Property>
		<Unit public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Unit` completion item kind.</haxe_doc>
		</Unit>
		<Value public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Value` completion item kind.</haxe_doc>
		</Value>
		<Enum public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Enum` completion item kind.</haxe_doc>
		</Enum>
		<Keyword public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Keyword` completion item kind.</haxe_doc>
		</Keyword>
		<Snippet public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Snippet` completion item kind.</haxe_doc>
		</Snippet>
		<Color public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Color` completion item kind.</haxe_doc>
		</Color>
		<Reference public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Reference` completion item kind.</haxe_doc>
		</Reference>
		<File public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `File` completion item kind.</haxe_doc>
		</File>
		<Folder public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Folder` completion item kind.</haxe_doc>
		</Folder>
		<EnumMember public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `EnumMember` completion item kind.</haxe_doc>
		</EnumMember>
		<Constant public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Constant` completion item kind.</haxe_doc>
		</Constant>
		<Struct public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Struct` completion item kind.</haxe_doc>
		</Struct>
		<Event public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Event` completion item kind.</haxe_doc>
		</Event>
		<Operator public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Operator` completion item kind.</haxe_doc>
		</Operator>
		<TypeParameter public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `TypeParameter` completion item kind.</haxe_doc>
		</TypeParameter>
		<User public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `User` completion item kind.</haxe_doc>
		</User>
		<Issue public="1" set="null" static="1">
			<x path="vscode.CompletionItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Issue` completion item kind.</haxe_doc>
		</Issue>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CompletionItemLabel" params="" file="src/vscode/CompletionItemLabel.hx">
		<a>
			<label>
				<c path="String"/>
				<haxe_doc>* The label of this completion item.
	 *
	 * By default this is also the text that is inserted when this completion is selected.</haxe_doc>
			</label>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string which is rendered less prominently directly after {@link CompletionItemLabel.label label},
	 * without any spacing. Should be used for function signatures or type annotations.</haxe_doc>
			</detail>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string which is rendered less prominently after {@link CompletionItemLabel.detail}. Should be used
	 * for fully qualified names or file path.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* A structured label for a {@link CompletionItem completion item}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CompletionItemProvider" params="T" file="src/vscode/CompletionItemProvider.hx">
		<a>
			<resolveCompletionItem set="method">
				<x path="Null"><f a="item:token">
	<c path="vscode.CompletionItemProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.CompletionItemProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}
	 * or {@link CompletionItem.detail details}.
	 *
	 * The editor will only resolve a completion item once.
	 *
	 * *Note* that this function is called when completion items are already showing in the UI or when an item has been
	 * selected for insertion. Because of that, no property that changes the presentation (label, sorting, filtering etc)
	 * or the (primary) insert behaviour ({@link CompletionItem.insertText insertText}) can be changed.
	 *
	 * This function may fill in {@link CompletionItem.additionalTextEdits additionalTextEdits}. However, that means an item might be
	 * inserted *before* resolving is done and in that case the editor will do a best effort to still apply those additional
	 * text edits.
	 *
	 * @param item A completion item currently active in the UI.
	 * @param token A cancellation token.
	 * @returns The resolved completion item or a thenable that resolves to of such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveCompletionItem>
			<provideCompletionItems set="method">
				<f a="document:position:token:context">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.CompletionContext"/>
					<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.CompletionItemProvider.T"/></c>
	<c path="vscode.CompletionList"><c path="vscode.CompletionItemProvider.T"/></c>
</x></t>
				</f>
				<haxe_doc>* Provide completion items for the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @param context How the completion was triggered.
	 *
	 * @returns An array of completions, a {@link CompletionList completion list}, or a thenable that resolves to either.
	 * The lack of a result can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideCompletionItems>
		</a>
		<haxe_doc>* The completion item provider interface defines the contract between extensions and
 * [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).
 *
 * Providers can delay the computation of the {@linkcode CompletionItem.detail detail}
 * and {@linkcode CompletionItem.documentation documentation} properties by implementing the
 * {@linkcode CompletionItemProvider.resolveCompletionItem resolveCompletionItem}-function. However, properties that
 * are needed for the initial sorting and filtering, like `sortText`, `filterText`, `insertText`, and `range`, must
 * not be changed during resolve.
 *
 * Providers are asked for completions either explicitly by a user gesture or -depending on the configuration-
 * implicitly when typing words or trigger characters.</haxe_doc>
	</typedef>
	<abstract path="vscode.CompletionItemTag" params="" file="src/vscode/CompletionItemTag.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Completion item tags are extra annotations that tweak the rendering of a completion
 * item.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionItemTag.CompletionItemTag_Impl_" params="" file="src/vscode/CompletionItemTag.hx" private="1" module="vscode.CompletionItemTag" extern="1" final="1">
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.CompletionItemTag"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render a completion as obsolete, usually using a strike-out.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionItemTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionItemTag.CompletionItemTag_Impl_" params="" file="src/vscode/CompletionItemTag.hx" private="1" module="vscode.CompletionItemTag" extern="1" final="1">
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.CompletionItemTag"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render a completion as obsolete, usually using a strike-out.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionItemTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.CompletionList" params="T" file="src/vscode/CompletionList.hx" extern="1">
		<isIncomplete public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* This list is not complete. Further typing should result in recomputing
	 * this list.</haxe_doc>
		</isIncomplete>
		<items public="1">
			<c path="Array"><c path="vscode.CompletionList.T"/></c>
			<haxe_doc>* The completion items.</haxe_doc>
		</items>
		<new public="1" set="method">
			<f a="?items:?isIncomplete">
				<c path="Array"><c path="vscode.CompletionList.T"/></c>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new completion list.
	 *
	 * @param items The completion items.
	 * @param isIncomplete The list is not complete.</haxe_doc>
		</new>
		<haxe_doc>* Represents a collection of {@link CompletionItem completion items} to be presented
 * in the editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CompletionList"</e>
</m></meta>
	</class>
	<abstract path="vscode.CompletionTriggerKind" params="" file="src/vscode/CompletionTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* How a {@link CompletionItemProvider completion provider} was triggered</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._CompletionTriggerKind.CompletionTriggerKind_Impl_" params="" file="src/vscode/CompletionTriggerKind.hx" private="1" module="vscode.CompletionTriggerKind" extern="1" final="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Completion was triggered normally.</haxe_doc>
	</Invoke>
	<TriggerCharacter public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Completion was triggered by a trigger character.</haxe_doc>
	</TriggerCharacter>
	<TriggerForIncompleteCompletions public="1" set="null" static="1">
		<x path="vscode.CompletionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Completion was re-triggered as current completion list is incomplete</haxe_doc>
	</TriggerForIncompleteCompletions>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"CompletionTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._CompletionTriggerKind.CompletionTriggerKind_Impl_" params="" file="src/vscode/CompletionTriggerKind.hx" private="1" module="vscode.CompletionTriggerKind" extern="1" final="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Completion was triggered normally.</haxe_doc>
		</Invoke>
		<TriggerCharacter public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Completion was triggered by a trigger character.</haxe_doc>
		</TriggerCharacter>
		<TriggerForIncompleteCompletions public="1" set="null" static="1">
			<x path="vscode.CompletionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Completion was re-triggered as current completion list is incomplete</haxe_doc>
		</TriggerForIncompleteCompletions>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"CompletionTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ConfigurationChangeEvent" params="" file="src/vscode/ConfigurationChangeEvent.hx">
		<a><affectsConfiguration set="method">
	<f a="section:?scope">
		<c path="String"/>
		<t path="vscode.ConfigurationScope"/>
		<x path="Bool"/>
	</f>
	<haxe_doc>* Checks if the given section has changed.
	 * If scope is provided, checks if the section has changed for resources under the given scope.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @param scope A scope in which to check.
	 * @returns `true` if the given section has changed.</haxe_doc>
</affectsConfiguration></a>
		<haxe_doc>* An event describing the change in Configuration</haxe_doc>
	</typedef>
	<typedef path="vscode.ConfigurationScope" params="" file="src/vscode/ConfigurationScope.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Uri"/>
			<x path="haxe.extern.EitherType">
				<c path="vscode.TextDocument"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<a>
						<uri>
							<x path="Null"><c path="vscode.Uri"/></x>
							<meta><m n=":optional"/></meta>
						</uri>
						<languageId><c path="String"/></languageId>
					</a>
				</x>
			</x>
		</x>
		<haxe_doc>* The configuration scope which can be a
 * a 'resource' or a languageId or both or
 * a '{@link TextDocument}' or
 * a '{@link WorkspaceFolder}'</haxe_doc>
	</typedef>
	<abstract path="vscode.ConfigurationTarget" params="" file="src/vscode/ConfigurationTarget.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The configuration target</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ConfigurationTarget"</e>
			</m>
		</meta>
		<impl><class path="vscode._ConfigurationTarget.ConfigurationTarget_Impl_" params="" file="src/vscode/ConfigurationTarget.hx" private="1" module="vscode.ConfigurationTarget" extern="1" final="1">
	<Global public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Global configuration</haxe_doc>
	</Global>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Workspace configuration</haxe_doc>
	</Workspace>
	<WorkspaceFolder public="1" set="null" static="1">
		<x path="vscode.ConfigurationTarget"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Workspace folder configuration</haxe_doc>
	</WorkspaceFolder>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ConfigurationTarget"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ConfigurationTarget.ConfigurationTarget_Impl_" params="" file="src/vscode/ConfigurationTarget.hx" private="1" module="vscode.ConfigurationTarget" extern="1" final="1">
		<Global public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Global configuration</haxe_doc>
		</Global>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Workspace configuration</haxe_doc>
		</Workspace>
		<WorkspaceFolder public="1" set="null" static="1">
			<x path="vscode.ConfigurationTarget"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Workspace folder configuration</haxe_doc>
		</WorkspaceFolder>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ConfigurationTarget"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.CustomDocument" params="" file="src/vscode/CustomDocument.hx">
		<a>
			<uri final="1" set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this document.</haxe_doc>
			</uri>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of the custom document.
	 *
	 * This is invoked by the editor when there are no more references to a given `CustomDocument` (for example when
	 * all editors associated with the document have been closed.)</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* Represents a custom document used by a {@linkcode CustomEditorProvider}.
 *
 * Custom documents are only used within a given `CustomEditorProvider`. The lifecycle of a `CustomDocument` is
 * managed by the editor. When no more references remain to a `CustomDocument`, it is disposed of.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentBackup" params="" file="src/vscode/CustomDocumentBackup.hx">
		<a>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* Unique identifier for the backup.
	 *
	 * This id is passed back to your extension in `openCustomDocument` when opening a custom editor from a backup.</haxe_doc>
			</id>
			<delete set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Delete the current backup.
	 *
	 * This is called by the editor when it is clear the current backup is no longer needed, such as when a new backup
	 * is made or when the file is saved.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* A backup for an {@linkcode CustomDocument}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentBackupContext" params="" file="src/vscode/CustomDocumentBackupContext.hx">
		<a><destination final="1" set="null">
	<c path="vscode.Uri"/>
	<haxe_doc>* Suggested file location to write the new backup.
	 *
	 * Note that your extension is free to ignore this and use its own strategy for backup.
	 *
	 * If the editor is for a resource from the current workspace, `destination` will point to a file inside
	 * `ExtensionContext.storagePath`. The parent folder of `destination` may not exist, so make sure to created it
	 * before writing the backup to this location.</haxe_doc>
</destination></a>
		<haxe_doc>* Additional information used to implement {@linkcode CustomDocumentBackup}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentContentChangeEvent" params="T" file="src/vscode/CustomDocumentContentChangeEvent.hx">
		<a><document final="1" set="null">
	<c path="vscode.CustomDocumentContentChangeEvent.T"/>
	<haxe_doc>* The document that the change is for.</haxe_doc>
</document></a>
		<haxe_doc>* Event triggered by extensions to signal to the editor that the content of a {@linkcode CustomDocument}
 * has changed.
 *
 * @see {@linkcode CustomEditorProvider.onDidChangeCustomDocument}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentEditEvent" params="T" file="src/vscode/CustomDocumentEditEvent.hx">
		<a>
			<undo set="method">
				<f a=""><x path="haxe.extern.EitherType">
	<x path="js.lib.Thenable"><x path="Void"/></x>
	<x path="Void"/>
</x></f>
				<haxe_doc>* Undo the edit operation.
	 *
	 * This is invoked by the editor when the user undoes this edit. To implement `undo`, your
	 * extension should restore the document and editor to the state they were in just before this
	 * edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.</haxe_doc>
			</undo>
			<redo set="method">
				<f a=""><x path="haxe.extern.EitherType">
	<x path="js.lib.Thenable"><x path="Void"/></x>
	<x path="Void"/>
</x></f>
				<haxe_doc>* Redo the edit operation.
	 *
	 * This is invoked by the editor when the user redoes this edit. To implement `redo`, your
	 * extension should restore the document and editor to the state they were in just after this
	 * edit was added to the editor's internal edit stack by `onDidChangeCustomDocument`.</haxe_doc>
			</redo>
			<label final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Display name describing the edit.
	 *
	 * This will be shown to users in the UI for undo/redo operations.</haxe_doc>
			</label>
			<document final="1" set="null">
				<c path="vscode.CustomDocumentEditEvent.T"/>
				<haxe_doc>* The document that the edit is for.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* Event triggered by extensions to signal to the editor that an edit has occurred on an {@linkcode CustomDocument}.
 *
 * @see {@linkcode CustomEditorProvider.onDidChangeCustomDocument}.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomDocumentOpenContext" params="" file="src/vscode/CustomDocumentOpenContext.hx">
		<a>
			<untitledDocumentData set="null">
				<x path="Null"><c path="js.lib.Uint8Array"/></x>
				<haxe_doc>* If the URI is an untitled file, this will be populated with the byte data of that file
	 *
	 * If this is provided, your extension should utilize this byte data rather than executing fs APIs on the URI passed in</haxe_doc>
			</untitledDocumentData>
			<backupId final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The id of the backup to restore the document from or `undefined` if there is no backup.
	 *
	 * If this is provided, your extension should restore the editor from the backup instead of reading the file
	 * from the user's workspace.</haxe_doc>
			</backupId>
		</a>
		<haxe_doc>* Additional information about the opening custom document.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomEditorProvider" params="T" file="src/vscode/CustomEditorProvider.hx">
		<a>
			<saveCustomDocumentAs set="method">
				<f a="document:destination:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Save a custom document to a different location.
	 *
	 * This method is invoked by the editor when the user triggers 'save as' on a custom editor. The implementer must
	 * persist the custom editor to `destination`.
	 *
	 * When the user accepts save as, the current editor is be replaced by an non-dirty editor for the newly saved file.
	 *
	 * @param document Document to save.
	 * @param destination Location to save to.
	 * @param cancellation Token that signals the save is no longer required.
	 *
	 * @returns Thenable signaling that saving has completed.</haxe_doc>
			</saveCustomDocumentAs>
			<saveCustomDocument set="method">
				<f a="document:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Save a custom document.
	 *
	 * This method is invoked by the editor when the user saves a custom editor. This can happen when the user
	 * triggers save while the custom editor is active, by commands such as `save all`, or by auto save if enabled.
	 *
	 * To implement `save`, the implementer must persist the custom editor. This usually means writing the
	 * file data for the custom document to disk. After `save` completes, any associated editor instances will
	 * no longer be marked as dirty.
	 *
	 * @param document Document to save.
	 * @param cancellation Token that signals the save is no longer required (for example, if another save was triggered).
	 *
	 * @returns Thenable signaling that saving has completed.</haxe_doc>
			</saveCustomDocument>
			<revertCustomDocument set="method">
				<f a="document:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Revert a custom document to its last saved state.
	 *
	 * This method is invoked by the editor when the user triggers `File: Revert File` in a custom editor. (Note that
	 * this is only used using the editor's `File: Revert File` command and not on a `git revert` of the file).
	 *
	 * To implement `revert`, the implementer must make sure all editor instances (webviews) for `document`
	 * are displaying the document in the same state is saved in. This usually means reloading the file from the
	 * workspace.
	 *
	 * @param document Document to revert.
	 * @param cancellation Token that signals the revert is no longer required.
	 *
	 * @returns Thenable signaling that the change has completed.</haxe_doc>
			</revertCustomDocument>
			<resolveCustomEditor set="method">
				<f a="document:webviewPanel:token">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.WebviewPanel"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><x path="Void"/></x>
						<x path="Void"/>
					</x>
				</f>
				<haxe_doc>* Resolve a custom editor for a given resource.
	 *
	 * This is called whenever the user opens a new editor for this `CustomEditorProvider`.
	 *
	 * @param document Document for the resource being resolved.
	 *
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See {@linkcode WebviewPanel} for additional details.
	 *
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @returns Optional thenable indicating that the custom editor has been resolved.</haxe_doc>
			</resolveCustomEditor>
			<openCustomDocument set="method">
				<f a="uri:openContext:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CustomDocumentOpenContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><c path="vscode.CustomEditorProvider.T"/></x>
						<c path="vscode.CustomEditorProvider.T"/>
					</x>
				</f>
				<haxe_doc>* Create a new document for a given resource.
	 *
	 * `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened
	 * document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.
	 *
	 * Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a
	 * given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will
	 * trigger another call to `openCustomDocument`.
	 *
	 * @param uri Uri of the document to open.
	 * @param openContext Additional information about the opening custom document.
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @returns The custom document.</haxe_doc>
			</openCustomDocument>
			<onDidChangeCustomDocument final="1" set="null">
				<x path="haxe.extern.EitherType">
					<t path="vscode.Event"><t path="vscode.CustomDocumentEditEvent"><c path="vscode.CustomEditorProvider.T"/></t></t>
					<t path="vscode.Event"><t path="vscode.CustomDocumentContentChangeEvent"><c path="vscode.CustomEditorProvider.T"/></t></t>
				</x>
				<haxe_doc>* Signal that an edit has occurred inside a custom editor.
	 *
	 * This event must be fired by your extension whenever an edit happens in a custom editor. An edit can be
	 * anything from changing some text, to cropping an image, to reordering a list. Your extension is free to
	 * define what an edit is and what data is stored on each edit.
	 *
	 * Firing `onDidChange` causes the editors to be marked as being dirty. This is cleared when the user either
	 * saves or reverts the file.
	 *
	 * Editors that support undo/redo must fire a `CustomDocumentEditEvent` whenever an edit happens. This allows
	 * users to undo and redo the edit using the editor's standard keyboard shortcuts. The editor will also mark
	 * the editor as no longer being dirty if the user undoes all edits to the last saved state.
	 *
	 * Editors that support editing but cannot use the editor's standard undo/redo mechanism must fire a `CustomDocumentContentChangeEvent`.
	 * The only way for a user to clear the dirty state of an editor that does not support undo/redo is to either
	 * `save` or `revert` the file.
	 *
	 * An editor should only ever fire `CustomDocumentEditEvent` events, or only ever fire `CustomDocumentContentChangeEvent` events.</haxe_doc>
			</onDidChangeCustomDocument>
			<backupCustomDocument set="method">
				<f a="document:context:cancellation">
					<c path="vscode.CustomEditorProvider.T"/>
					<t path="vscode.CustomDocumentBackupContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><t path="vscode.CustomDocumentBackup"/></x>
				</f>
				<haxe_doc>* Back up a dirty custom document.
	 *
	 * Backups are used for hot exit and to prevent data loss. Your `backup` method should persist the resource in
	 * its current state, i.e. with the edits applied. Most commonly this means saving the resource to disk in
	 * the `ExtensionContext.storagePath`. When the editor reloads and your custom editor is opened for a resource,
	 * your extension should first check to see if any backups exist for the resource. If there is a backup, your
	 * extension should load the file contents from there instead of from the resource in the workspace.
	 *
	 * `backup` is triggered approximately one second after the user stops editing the document. If the user
	 * rapidly edits the document, `backup` will not be invoked until the editing stops.
	 *
	 * `backup` is not invoked when `auto save` is enabled (since auto save already persists the resource).
	 *
	 * @param document Document to backup.
	 * @param context Information that can be used to backup the document.
	 * @param cancellation Token that signals the current backup since a new backup is coming in. It is up to your
	 * extension to decided how to respond to cancellation. If for example your extension is backing up a large file
	 * in an operation that takes time to complete, your extension may decide to finish the ongoing backup rather
	 * than cancelling it to ensure that the editor has some valid backup.</haxe_doc>
			</backupCustomDocument>
		</a>
		<haxe_doc>* Provider for editable custom editors that use a custom document model.
 *
 * Custom editors use {@linkcode CustomDocument} as their document model instead of a {@linkcode TextDocument}.
 * This gives extensions full control over actions such as edit, save, and backup.
 *
 * You should use this type of custom editor when dealing with binary files or more complex scenarios. For simple
 * text based documents, use {@linkcode CustomTextEditorProvider} instead.
 *
 * @param T Type of the custom document returned by this provider.</haxe_doc>
	</typedef>
	<class path="vscode.CustomExecution" params="" file="src/vscode/CustomExecution.hx" extern="1">
		<new public="1" set="method">
			<f a="callback">
				<f a="resolvedDefinition">
					<t path="vscode.TaskDefinition"/>
					<x path="js.lib.Thenable"><t path="vscode.Pseudoterminal"/></x>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a CustomExecution task object. The callback will be executed when the task is run, at which point the
	 * extension should return the Pseudoterminal it will "run in". The task should wait to do further execution until
	 * {@link Pseudoterminal.open} is called. Task cancellation should be handled using
	 * {@link Pseudoterminal.close}. When the task is complete fire
	 * {@link Pseudoterminal.onDidClose}.
	 * @param callback The callback that will be called when the task is started by a user. Any ${} style variables that
	 * were in the task definition will be resolved and passed into the callback as `resolvedDefinition`.</haxe_doc>
		</new>
		<haxe_doc>* Class used to execute an extension callback as a task.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"CustomExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.CustomReadonlyEditorProvider" params="T" file="src/vscode/CustomReadonlyEditorProvider.hx">
		<a>
			<resolveCustomEditor set="method">
				<f a="document:webviewPanel:token">
					<c path="vscode.CustomReadonlyEditorProvider.T"/>
					<t path="vscode.WebviewPanel"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><x path="Void"/></x>
						<x path="Void"/>
					</x>
				</f>
				<haxe_doc>* Resolve a custom editor for a given resource.
	 *
	 * This is called whenever the user opens a new editor for this `CustomEditorProvider`.
	 *
	 * @param document Document for the resource being resolved.
	 *
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See {@linkcode WebviewPanel} for additional details.
	 *
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @returns Optional thenable indicating that the custom editor has been resolved.</haxe_doc>
			</resolveCustomEditor>
			<openCustomDocument set="method">
				<f a="uri:openContext:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CustomDocumentOpenContext"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<x path="js.lib.Thenable"><c path="vscode.CustomReadonlyEditorProvider.T"/></x>
						<c path="vscode.CustomReadonlyEditorProvider.T"/>
					</x>
				</f>
				<haxe_doc>* Create a new document for a given resource.
	 *
	 * `openCustomDocument` is called when the first time an editor for a given resource is opened. The opened
	 * document is then passed to `resolveCustomEditor` so that the editor can be shown to the user.
	 *
	 * Already opened `CustomDocument` are re-used if the user opened additional editors. When all editors for a
	 * given resource are closed, the `CustomDocument` is disposed of. Opening an editor at this point will
	 * trigger another call to `openCustomDocument`.
	 *
	 * @param uri Uri of the document to open.
	 * @param openContext Additional information about the opening custom document.
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @returns The custom document.</haxe_doc>
			</openCustomDocument>
		</a>
		<haxe_doc>* Provider for readonly custom editors that use a custom document model.
 *
 * Custom editors use {@linkcode CustomDocument} as their document model instead of a {@linkcode TextDocument}.
 *
 * You should use this type of custom editor when dealing with binary files or more complex scenarios. For simple
 * text based documents, use {@linkcode CustomTextEditorProvider} instead.
 *
 * @param T Type of the custom document returned by this provider.</haxe_doc>
	</typedef>
	<typedef path="vscode.CustomTextEditorProvider" params="" file="src/vscode/CustomTextEditorProvider.hx">
		<a><resolveCustomTextEditor set="method">
	<f a="document:webviewPanel:token">
		<c path="vscode.TextDocument"/>
		<t path="vscode.WebviewPanel"/>
		<t path="vscode.CancellationToken"/>
		<x path="haxe.extern.EitherType">
			<x path="js.lib.Thenable"><x path="Void"/></x>
			<x path="Void"/>
		</x>
	</f>
	<haxe_doc>* Resolve a custom editor for a given text resource.
	 *
	 * This is called when a user first opens a resource for a `CustomTextEditorProvider`, or if they reopen an
	 * existing editor using this `CustomTextEditorProvider`.
	 *
	 *
	 * @param document Document for the resource to resolve.
	 *
	 * @param webviewPanel The webview panel used to display the editor UI for this resource.
	 *
	 * During resolve, the provider must fill in the initial html for the content webview panel and hook up all
	 * the event listeners on it that it is interested in. The provider can also hold onto the `WebviewPanel` to
	 * use later for example in a command. See {@linkcode WebviewPanel} for additional details.
	 *
	 * @param token A cancellation token that indicates the result is no longer needed.
	 *
	 * @returns Thenable indicating that the custom editor has been resolved.</haxe_doc>
</resolveCustomTextEditor></a>
		<haxe_doc>* Provider for text based custom editors.
 *
 * Text based custom editors use a {@linkcode TextDocument} as their data model. This considerably simplifies
 * implementing a custom editor as it allows the editor to handle many common operations such as
 * undo and backup. The provider is responsible for synchronizing text changes between the webview and the `TextDocument`.</haxe_doc>
	</typedef>
	<class path="vscode.DataTransfer" params="" file="src/vscode/DataTransfer.hx" extern="1">
		<get public="1" set="method">
			<f a="mimeType">
				<c path="String"/>
				<x path="Null"><c path="vscode.DataTransferItem"/></x>
			</f>
			<haxe_doc>* Retrieves the data transfer item for a given mime type.
	 *
	 * @param mimeType The mime type to get the data transfer item for, such as `text/plain` or `image/png`.
	 * Mimes type look ups are case-insensitive.
	 *
	 * Special mime types:
	 * - `text/uri-list` — A string with `toString()`ed Uris separated by `\r\n`. To specify a cursor position in the file,
	 * set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.</haxe_doc>
		</get>
		<set public="1" set="method">
			<f a="mimeType:value">
				<c path="String"/>
				<c path="vscode.DataTransferItem"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Sets a mime type to data transfer item mapping.
	 *
	 * @param mimeType The mime type to set the data for. Mimes types stored in lower case, with case-insensitive looks up.
	 * @param value The data transfer item for the given mime type.</haxe_doc>
		</set>
		<forEach public="1" set="method">
			<f a="callbackfn:?thisArg">
				<f a="item:mimeType:dataTransfer">
					<c path="vscode.DataTransferItem"/>
					<c path="String"/>
					<c path="vscode.DataTransfer"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Allows iteration through the data transfer items.
	 *
	 * @param callbackfn Callback for iteration through the data transfer items.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
		</forEach>
		<haxe_doc>* A map containing a mapping of the mime type of the corresponding transferred data.
 *
 * Drag and drop controllers that implement {@link TreeDragAndDropController.handleDrag `handleDrag`} can add additional mime types to the
 * data transfer. These additional mime types will only be included in the `handleDrop` when the the drag was initiated from
 * an element in the same drag and drop controller.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DataTransfer"</e>
</m></meta>
	</class>
	<typedef path="vscode.DataTransferFile" params="" file="src/vscode/DataTransferFile.hx">
		<a>
			<uri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The full file path of the file.
	 *
	 * May be `undefined` on web.</haxe_doc>
			</uri>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of the file.</haxe_doc>
			</name>
			<data set="method">
				<f a=""><x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x></f>
				<haxe_doc>* The full file contents of the file.</haxe_doc>
			</data>
		</a>
		<haxe_doc>* A file associated with a {@linkcode DataTransferItem}.
 *
 * Instances of this type can only be created by the editor and not by extensions.</haxe_doc>
	</typedef>
	<class path="vscode.DataTransferItem" params="" file="src/vscode/DataTransferItem.hx" extern="1">
		<asString public="1" set="method">
			<f a=""><x path="js.lib.Thenable"><c path="String"/></x></f>
			<haxe_doc>* Get a string representation of this item.
	 *
	 * If {@linkcode DataTransferItem.value} is an object, this returns the result of json stringifying {@linkcode DataTransferItem.value} value.</haxe_doc>
		</asString>
		<asFile public="1" set="method">
			<f a=""><x path="Null"><t path="vscode.DataTransferFile"/></x></f>
			<haxe_doc>* Try getting the {@link DataTransferFile file} associated with this data transfer item.
	 *
	 * Note that the file object is only valid for the scope of the drag and drop operation.
	 *
	 * @returns The file for the data transfer or `undefined` if the item is either not a file or the
	 * file data cannot be accessed.</haxe_doc>
		</asFile>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>* Custom data stored on this item.
	 *
	 * You can use `value` to share data across operations. The original object can be retrieved so long as the extension that
	 * created the `DataTransferItem` runs in the same extension host.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param value Custom data stored on this item. Can be retrieved using {@linkcode DataTransferItem.value}.</haxe_doc>
		</new>
		<haxe_doc>* Encapsulates data transferred during drag and drop operations.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DataTransferItem"</e>
</m></meta>
	</class>
	<typedef path="vscode.DebugAdapter" params="" file="src/vscode/DebugAdapter.hx">
		<a>
			<onDidSendMessage set="null">
				<t path="vscode.Event"><t path="vscode.DebugProtocolMessage"/></t>
				<haxe_doc>* An event which fires after the debug adapter has sent a Debug Adapter Protocol message to the editor.
	 * Messages can be requests, responses, or events.</haxe_doc>
			</onDidSendMessage>
			<handleMessage set="method">
				<f a="message">
					<t path="vscode.DebugProtocolMessage"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Handle a Debug Adapter Protocol message.
	 * Messages can be requests, responses, or events.
	 * Results or errors are returned via onSendMessage events.
	 * @param message A Debug Adapter Protocol message</haxe_doc>
			</handleMessage>
		</a>
		<haxe_doc>* A debug adapter that implements the Debug Adapter Protocol can be registered with the editor if it implements the DebugAdapter interface.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapterDescriptor" params="" file="src/vscode/DebugAdapterDescriptor.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.DebugAdapterExecutable"/>
			<x path="haxe.extern.EitherType">
				<c path="vscode.DebugAdapterServer"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.DebugAdapterNamedPipeServer"/>
					<c path="vscode.DebugAdapterInlineImplementation"/>
				</x>
			</x>
		</x>
		<haxe_doc>* Represents the different types of debug adapters</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapterDescriptorFactory" params="" file="src/vscode/DebugAdapterDescriptorFactory.hx">
		<a><createDebugAdapterDescriptor set="method">
	<f a="session:?executable">
		<t path="vscode.DebugSession"/>
		<c path="vscode.DebugAdapterExecutable"/>
		<t path="vscode.ProviderResult"><t path="vscode.DebugAdapterDescriptor"/></t>
	</f>
	<haxe_doc>* 'createDebugAdapterDescriptor' is called at the start of a debug session to provide details about the debug adapter to use.
	 * These details must be returned as objects of type {@link DebugAdapterDescriptor}.
	 * Currently two types of debug adapters are supported:
	 * - a debug adapter executable is specified as a command path and arguments (see {@link DebugAdapterExecutable}),
	 * - a debug adapter server reachable via a communication port (see {@link DebugAdapterServer}).
	 * If the method is not implemented the default behavior is this:
	 *   createDebugAdapter(session: DebugSession, executable: DebugAdapterExecutable) {
	 *      if (typeof session.configuration.debugServer === 'number') {
	 *         return new DebugAdapterServer(session.configuration.debugServer);
	 *      }
	 *      return executable;
	 *   }
	 * @param session The {@link DebugSession debug session} for which the debug adapter will be used.
	 * @param executable The debug adapter's executable information as specified in the package.json (or undefined if no such information exists).
	 * @returns a {@link DebugAdapterDescriptor debug adapter descriptor} or undefined.</haxe_doc>
</createDebugAdapterDescriptor></a>
		<haxe_doc>* A debug adaper factory that creates {@link DebugAdapterDescriptor debug adapter descriptors}.</haxe_doc>
	</typedef>
	<class path="vscode.DebugAdapterExecutable" params="" file="src/vscode/DebugAdapterExecutable.hx" extern="1">
		<command public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The command or path of the debug adapter executable.
	 * A command must be either an absolute path of an executable or the name of an command to be looked up via the PATH environment variable.
	 * The special value 'node' will be mapped to the editor's built-in Node.js runtime.</haxe_doc>
		</command>
		<args public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The arguments passed to the debug adapter executable. Defaults to an empty array.</haxe_doc>
		</args>
		<options public="1" set="null">
			<x path="Null"><t path="vscode.DebugAdapterExecutableOptions"/></x>
			<haxe_doc>* Optional options to be used when the debug adapter is started.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="command:?args:?options">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
				<x path="Null"><t path="vscode.DebugAdapterExecutableOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a description for a debug adapter based on an executable program.
	 *
	 * @param command The command or executable path that implements the debug adapter.
	 * @param args Optional arguments to be passed to the command or executable.
	 * @param options Optional options to be used when starting the command or executable.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter executable and optional arguments and runtime options passed to it.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterExecutable"</e>
</m></meta>
	</class>
	<typedef path="vscode.DebugAdapterExecutableOptions" params="" file="src/vscode/DebugAdapterExecutableOptions.hx">
		<a>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed program or shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory for the executed debug adapter.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a debug adapter executable.</haxe_doc>
	</typedef>
	<class path="vscode.DebugAdapterInlineImplementation" params="" file="src/vscode/DebugAdapterInlineImplementation.hx" extern="1">
		<new public="1" set="method">
			<f a="implementation">
				<t path="vscode.DebugAdapter"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a descriptor for an inline implementation of a debug adapter.</haxe_doc>
		</new>
		<haxe_doc>* A debug adapter descriptor for an inline implementation.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterInlineImplementation"</e>
</m></meta>
	</class>
	<class path="vscode.DebugAdapterNamedPipeServer" params="" file="src/vscode/DebugAdapterNamedPipeServer.hx" extern="1">
		<path public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The path to the NamedPipe/UNIX Domain Socket.</haxe_doc>
		</path>
		<new public="1" set="method">
			<f a="path">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a description for a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter running as a Named Pipe (on Windows)/UNIX Domain Socket (on non-Windows) based server.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterNamedPipeServer"</e>
</m></meta>
	</class>
	<class path="vscode.DebugAdapterServer" params="" file="src/vscode/DebugAdapterServer.hx" extern="1">
		<port public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The port.</haxe_doc>
		</port>
		<host public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The host.</haxe_doc>
		</host>
		<new public="1" set="method">
			<f a="port:?host">
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a description for a debug adapter running as a socket based server.</haxe_doc>
		</new>
		<haxe_doc>* Represents a debug adapter running as a socket based server.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugAdapterServer"</e>
</m></meta>
	</class>
	<typedef path="vscode.DebugAdapterTracker" params="" file="src/vscode/DebugAdapterTracker.hx">
		<a>
			<onWillStopSession set="method">
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter session is about to be stopped.</haxe_doc>
			</onWillStopSession>
			<onWillStartSession set="method">
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A session with the debug adapter is about to be started.</haxe_doc>
			</onWillStartSession>
			<onWillReceiveMessage set="method">
				<x path="Null"><f a="message">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter is about to receive a Debug Adapter Protocol message from the editor.</haxe_doc>
			</onWillReceiveMessage>
			<onExit set="method">
				<x path="Null"><f a="?code:?signal">
	<x path="Int"/>
	<c path="String"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter has exited with the given exit code or signal.</haxe_doc>
			</onExit>
			<onError set="method">
				<x path="Null"><f a="error">
	<c path="js.lib.Error"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An error with the debug adapter has occurred.</haxe_doc>
			</onError>
			<onDidSendMessage set="method">
				<x path="Null"><f a="message">
	<x path="Any"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The debug adapter has sent a Debug Adapter Protocol message to the editor.</haxe_doc>
			</onDidSendMessage>
		</a>
		<haxe_doc>* A Debug Adapter Tracker is a means to track the communication between the editor and a Debug Adapter.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugAdapterTrackerFactory" params="" file="src/vscode/DebugAdapterTrackerFactory.hx">
		<a><createDebugAdapterTracker set="method">
	<f a="session">
		<t path="vscode.DebugSession"/>
		<t path="vscode.ProviderResult"><t path="vscode.DebugAdapterTracker"/></t>
	</f>
	<haxe_doc>* The method 'createDebugAdapterTracker' is called at the start of a debug session in order
	 * to return a "tracker" object that provides read-access to the communication between the editor and a debug adapter.
	 *
	 * @param session The {@link DebugSession debug session} for which the debug adapter tracker will be used.
	 * @returns A {@link DebugAdapterTracker debug adapter tracker} or undefined.</haxe_doc>
</createDebugAdapterTracker></a>
		<haxe_doc>* A debug adaper factory that creates {@link DebugAdapterTracker debug adapter trackers}.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugConfiguration" params="" file="src/vscode/DebugConfiguration.hx">
		<a>
			<type>
				<c path="String"/>
				<haxe_doc>* The type of the debug session.</haxe_doc>
			</type>
			<request>
				<c path="String"/>
				<haxe_doc>* The request type of the debug session.</haxe_doc>
			</request>
			<name>
				<c path="String"/>
				<haxe_doc>* The name of the debug session.</haxe_doc>
			</name>
		</a>
		<haxe_doc>* Configuration for a debug session.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugConfigurationProvider" params="" file="src/vscode/DebugConfigurationProvider.hx">
		<a>
			<resolveDebugConfigurationWithSubstitutedVariables set="method">
				<x path="Null"><f a="folder:debugConfiguration:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.DebugConfiguration"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><t path="vscode.DebugConfiguration"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This hook is directly called after 'resolveDebugConfiguration' but with all variables substituted.
	 * It can be used to resolve or verify a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.
	 * If more than one debug configuration provider is registered for the same type, the 'resolveDebugConfigurationWithSubstitutedVariables' calls are chained
	 * in arbitrary order and the initial debug configuration is piped through the chain.
	 * Returning the value 'undefined' prevents the debug session from starting.
	 * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.
	 *
	 * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.
	 * @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.
	 * @param token A cancellation token.
	 * @returns The resolved debug configuration or undefined or null.</haxe_doc>
			</resolveDebugConfigurationWithSubstitutedVariables>
			<resolveDebugConfiguration set="method">
				<x path="Null"><f a="folder:debugConfiguration:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.DebugConfiguration"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><t path="vscode.DebugConfiguration"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Resolves a {@link DebugConfiguration debug configuration} by filling in missing values or by adding/changing/removing attributes.
	 * If more than one debug configuration provider is registered for the same type, the resolveDebugConfiguration calls are chained
	 * in arbitrary order and the initial debug configuration is piped through the chain.
	 * Returning the value 'undefined' prevents the debug session from starting.
	 * Returning the value 'null' prevents the debug session from starting and opens the underlying debug configuration instead.
	 *
	 * @param folder The workspace folder from which the configuration originates from or `undefined` for a folderless setup.
	 * @param debugConfiguration The {@link DebugConfiguration debug configuration} to resolve.
	 * @param token A cancellation token.
	 * @returns The resolved debug configuration or undefined or null.</haxe_doc>
			</resolveDebugConfiguration>
			<provideDebugConfigurations set="method">
				<x path="Null"><f a="folder:?token">
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="Array"><t path="vscode.DebugConfiguration"/></c></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Provides {@link DebugConfiguration debug configuration} to the debug service. If more than one debug configuration provider is
	 * registered for the same type, debug configurations are concatenated in arbitrary order.
	 *
	 * @param folder The workspace folder for which the configurations are used or `undefined` for a folderless setup.
	 * @param token A cancellation token.
	 * @returns An array of {@link DebugConfiguration debug configurations}.</haxe_doc>
			</provideDebugConfigurations>
		</a>
		<haxe_doc>* A debug configuration provider allows to add debug configurations to the debug service
 * and to resolve launch configurations before they are used to start a debug session.
 * A debug configuration provider is registered via {@link debug.registerDebugConfigurationProvider}.</haxe_doc>
	</typedef>
	<abstract path="vscode.DebugConfigurationProviderTriggerKind" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A DebugConfigurationProviderTriggerKind specifies when the `provideDebugConfigurations` method of a `DebugConfigurationProvider` is triggered.
 * Currently there are two situations: to provide the initial debug configurations for a newly created launch.json or
 * to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).
 * A trigger kind is used when registering a `DebugConfigurationProvider` with {@link debug.registerDebugConfigurationProvider}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConfigurationProviderTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._DebugConfigurationProviderTriggerKind.DebugConfigurationProviderTriggerKind_Impl_" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx" private="1" module="vscode.DebugConfigurationProviderTriggerKind" extern="1" final="1">
	<Initial public="1" set="null" static="1">
		<x path="vscode.DebugConfigurationProviderTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>*	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.</haxe_doc>
	</Initial>
	<Dynamic public="1" set="null" static="1">
		<x path="vscode.DebugConfigurationProviderTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).</haxe_doc>
	</Dynamic>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DebugConfigurationProviderTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DebugConfigurationProviderTriggerKind.DebugConfigurationProviderTriggerKind_Impl_" params="" file="src/vscode/DebugConfigurationProviderTriggerKind.hx" private="1" module="vscode.DebugConfigurationProviderTriggerKind" extern="1" final="1">
		<Initial public="1" set="null" static="1">
			<x path="vscode.DebugConfigurationProviderTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>*	`DebugConfigurationProvider.provideDebugConfigurations` is called to provide the initial debug configurations for a newly created launch.json.</haxe_doc>
		</Initial>
		<Dynamic public="1" set="null" static="1">
			<x path="vscode.DebugConfigurationProviderTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* `DebugConfigurationProvider.provideDebugConfigurations` is called to provide dynamically generated debug configurations when the user asks for them through the UI (e.g. via the "Select and Start Debugging" command).</haxe_doc>
		</Dynamic>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConfigurationProviderTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DebugConsole" params="" file="src/vscode/DebugConsole.hx">
		<a>
			<appendLine set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value and a line feed character
	 * to the debug console.
	 *
	 * @param value A string, falsy values will be printed.</haxe_doc>
			</appendLine>
			<append set="method">
				<f a="value">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append the given value to the debug console.
	 *
	 * @param value A string, falsy values will not be printed.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* Represents the debug console.</haxe_doc>
	</typedef>
	<abstract path="vscode.DebugConsoleMode" params="" file="src/vscode/DebugConsoleMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Debug console mode used by debug session, see {@link DebugSessionOptions options}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConsoleMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._DebugConsoleMode.DebugConsoleMode_Impl_" params="" file="src/vscode/DebugConsoleMode.hx" private="1" module="vscode.DebugConsoleMode" extern="1" final="1">
	<Separate public="1" set="null" static="1">
		<x path="vscode.DebugConsoleMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Debug session should have a separate debug console.</haxe_doc>
	</Separate>
	<MergeWithParent public="1" set="null" static="1">
		<x path="vscode.DebugConsoleMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Debug session should share debug console with its parent session.
	 * This value has no effect for sessions which do not have a parent session.</haxe_doc>
	</MergeWithParent>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DebugConsoleMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DebugConsoleMode.DebugConsoleMode_Impl_" params="" file="src/vscode/DebugConsoleMode.hx" private="1" module="vscode.DebugConsoleMode" extern="1" final="1">
		<Separate public="1" set="null" static="1">
			<x path="vscode.DebugConsoleMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Debug session should have a separate debug console.</haxe_doc>
		</Separate>
		<MergeWithParent public="1" set="null" static="1">
			<x path="vscode.DebugConsoleMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Debug session should share debug console with its parent session.
	 * This value has no effect for sessions which do not have a parent session.</haxe_doc>
		</MergeWithParent>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DebugConsoleMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DebugProtocolBreakpoint" params="" file="src/vscode/DebugProtocolBreakpoint.hx">
		<a/>
		<haxe_doc>* A DebugProtocolBreakpoint is an opaque stand-in type for the [Breakpoint](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Breakpoint) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugProtocolMessage" params="" file="src/vscode/DebugProtocolMessage.hx">
		<a/>
		<haxe_doc>* A DebugProtocolMessage is an opaque stand-in type for the [ProtocolMessage](https://microsoft.github.io/debug-adapter-protocol/specification#Base_Protocol_ProtocolMessage) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugProtocolSource" params="" file="src/vscode/DebugProtocolSource.hx">
		<a/>
		<haxe_doc>* A DebugProtocolSource is an opaque stand-in type for the [Source](https://microsoft.github.io/debug-adapter-protocol/specification#Types_Source) type defined in the Debug Adapter Protocol.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSession" params="" file="src/vscode/DebugSession.hx">
		<a>
			<workspaceFolder set="null">
				<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The workspace folder of this session or `undefined` for a folderless setup.</haxe_doc>
			</workspaceFolder>
			<type set="null">
				<c path="String"/>
				<haxe_doc>* The debug session's type from the {@link DebugConfiguration debug configuration}.</haxe_doc>
			</type>
			<parentSession set="null">
				<x path="Null"><t path="vscode.DebugSession"/></x>
				<haxe_doc>* The parent session of this debug session, if it was created as a child.
	 * @see DebugSessionOptions.parentSession</haxe_doc>
			</parentSession>
			<name>
				<c path="String"/>
				<haxe_doc>* The debug session's name is initially taken from the {@link DebugConfiguration debug configuration}.
	 * Any changes will be properly reflected in the UI.</haxe_doc>
			</name>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The unique ID of this debug session.</haxe_doc>
			</id>
			<getDebugProtocolBreakpoint set="method">
				<f a="breakpoint">
					<c path="vscode.Breakpoint"/>
					<x path="js.lib.Thenable"><x path="Null"><t path="vscode.DebugProtocolBreakpoint"/></x></x>
				</f>
				<haxe_doc>* Maps a breakpoint in the editor to the corresponding Debug Adapter Protocol (DAP) breakpoint that is managed by the debug adapter of the debug session.
	 * If no DAP breakpoint exists (either because the editor breakpoint was not yet registered or because the debug adapter is not interested in the breakpoint), the value `undefined` is returned.
	 *
	 * @param breakpoint A {@link Breakpoint} in the editor.
	 * @returns A promise that resolves to the Debug Adapter Protocol breakpoint or `undefined`.</haxe_doc>
			</getDebugProtocolBreakpoint>
			<customRequest set="method">
				<f a="command:?args">
					<c path="String"/>
					<x path="Any"/>
					<x path="js.lib.Thenable"><x path="Any"/></x>
				</f>
				<haxe_doc>* Send a custom request to the debug adapter.</haxe_doc>
			</customRequest>
			<configuration set="null">
				<t path="vscode.DebugConfiguration"/>
				<haxe_doc>* The "resolved" {@link DebugConfiguration debug configuration} of this session.
	 * "Resolved" means that
	 * - all variables have been substituted and
	 * - platform specific attribute sections have been "flattened" for the matching platform and removed for non-matching platforms.</haxe_doc>
			</configuration>
		</a>
		<haxe_doc>* A debug session.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSessionCustomEvent" params="" file="src/vscode/DebugSessionCustomEvent.hx">
		<a>
			<session set="null">
				<t path="vscode.DebugSession"/>
				<haxe_doc>* The {@link DebugSession debug session} for which the custom event was received.</haxe_doc>
			</session>
			<event set="null">
				<c path="String"/>
				<haxe_doc>* Type of event.</haxe_doc>
			</event>
			<body set="null">
				<x path="Any"/>
				<haxe_doc>* Event specific information.</haxe_doc>
			</body>
		</a>
		<haxe_doc>* A custom Debug Adapter Protocol event received from a {@link DebugSession debug session}.</haxe_doc>
	</typedef>
	<typedef path="vscode.DebugSessionOptions" params="" file="src/vscode/DebugSessionOptions.hx">
		<a>
			<testRun>
				<x path="Null"><t path="vscode.TestRun"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Signals to the editor that the debug session was started from a test run
	 * request. This is used to link the lifecycle of the debug session and
	 * test run in UI actions.</haxe_doc>
			</testRun>
			<suppressSaveBeforeStart>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When true, a save will not be triggered for open editors when starting a debug session, regardless of the value of the `debug.saveBeforeStart` setting.</haxe_doc>
			</suppressSaveBeforeStart>
			<suppressDebugView>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When true, the debug viewlet will not be automatically revealed for this session.</haxe_doc>
			</suppressDebugView>
			<suppressDebugToolbar>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When true, the debug toolbar will not be shown for this session.</haxe_doc>
			</suppressDebugToolbar>
			<suppressDebugStatusbar>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When true, the window statusbar color will not be changed for this session.</haxe_doc>
			</suppressDebugStatusbar>
			<parentSession>
				<x path="Null"><t path="vscode.DebugSession"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When specified the newly created debug session is registered as a "child" session of this
	 * "parent" debug session.</haxe_doc>
			</parentSession>
			<noDebug>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether this session should run without debugging, thus ignoring breakpoints.
	 * When this property is not specified, the value from the parent session (if there is one) is used.</haxe_doc>
			</noDebug>
			<lifecycleManagedByParent>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether lifecycle requests like 'restart' are sent to the newly created session or its parent session.
	 * By default (if the property is false or missing), lifecycle requests are sent to the new session.
	 * This property is ignored if the session has no parent session.</haxe_doc>
			</lifecycleManagedByParent>
			<consoleMode>
				<x path="Null"><x path="vscode.DebugConsoleMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether this session should have a separate debug console or share it
	 * with the parent session. Has no effect for sessions which do not have a parent session.
	 * Defaults to Separate.</haxe_doc>
			</consoleMode>
			<compact>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the debug session's parent session is shown in the CALL STACK view even if it has only a single child.
	 * By default, the debug session will never hide its parent.
	 * If compact is true, debug sessions with a single child are hidden in the CALL STACK view to make the tree more compact.</haxe_doc>
			</compact>
		</a>
		<haxe_doc>* Options for {@link debug.startDebugging starting a debug session}.</haxe_doc>
	</typedef>
	<class path="vscode.DebugStackFrame" params="" file="src/vscode/DebugStackFrame.hx" extern="1">
		<session public="1" set="null">
			<t path="vscode.DebugSession"/>
			<haxe_doc>* Debug session for thread.</haxe_doc>
		</session>
		<threadId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* ID of the associated thread in the debug protocol.</haxe_doc>
		</threadId>
		<frameId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* ID of the stack frame in the debug protocol.</haxe_doc>
		</frameId>
		<new set="method">
			<f a="session:threadId:frameId">
				<t path="vscode.DebugSession"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Represents a stack frame in a debug session.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugStackFrame"</e>
</m></meta>
	</class>
	<class path="vscode.DebugThread" params="" file="src/vscode/DebugThread.hx" extern="1">
		<session public="1" set="null">
			<t path="vscode.DebugSession"/>
			<haxe_doc>* Debug session for thread.</haxe_doc>
		</session>
		<threadId public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* ID of the associated thread in the debug protocol.</haxe_doc>
		</threadId>
		<new set="method">
			<f a="session:threadId">
				<t path="vscode.DebugSession"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Represents a thread in a debug session.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DebugThread"</e>
</m></meta>
	</class>
	<typedef path="vscode.Declaration" params="" file="src/vscode/Declaration.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Location"/>
			<x path="haxe.extern.EitherType">
				<c path="Array"><c path="vscode.Location"/></c>
				<c path="Array"><t path="vscode.LocationLink"/></c>
			</x>
		</x>
		<haxe_doc>* The declaration of a symbol representation as one or many [locations](#Location)
 * or [location links](#LocationLink).</haxe_doc>
	</typedef>
	<class path="vscode.DeclarationCoverage" params="" file="src/vscode/DeclarationCoverage.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* Name of the declaration.</haxe_doc>
		</name>
		<executed public="1">
			<x path="haxe.extern.EitherType">
				<x path="Int"/>
				<x path="Bool"/>
			</x>
			<haxe_doc>* The number of times this declaration was executed, or a boolean
	 * indicating whether it was executed if the exact count is unknown. If
	 * zero or false, the declaration will be marked as un-covered.</haxe_doc>
		</executed>
		<location public="1">
			<x path="haxe.extern.EitherType">
				<c path="vscode.Position"/>
				<c path="vscode.Range"/>
			</x>
			<haxe_doc>* Declaration location.</haxe_doc>
		</location>
		<new public="1" set="method">
			<f a="name:executed:location">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<x path="Int"/>
					<x path="Bool"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="vscode.Position"/>
					<c path="vscode.Range"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param executed The number of times this declaration was executed, or a
	 * boolean indicating  whether it was executed if the exact count is
	 * unknown. If zero or false, the declaration will be marked as un-covered.
	 * @param location The declaration position.</haxe_doc>
		</new>
		<haxe_doc>* Contains coverage information for a declaration. Depending on the reporter
 * and language, this may be types such as functions, methods, or namespaces.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DeclarationCoverage"</e>
</m></meta>
	</class>
	<typedef path="vscode.DeclarationProvider" params="" file="src/vscode/DeclarationProvider.hx">
		<a><provideDeclaration set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><t path="vscode.Declaration"/></t>
	</f>
	<haxe_doc>* Provide the declaration of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A declaration or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideDeclaration></a>
		<haxe_doc>* The declaration provider interface defines the contract between extensions and
 * the go to declaration feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DecorationInstanceRenderOptions" params="" file="src/vscode/DecorationInstanceRenderOptions.hx">
		<a>
			<light>
				<x path="Null"><t path="vscode.ThemableDecorationInstanceRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for light themes.</haxe_doc>
			</light>
			<dark>
				<x path="Null"><t path="vscode.ThemableDecorationInstanceRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for dark themes.</haxe_doc>
			</dark>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents render options for decoration instances. See {@link DecorationOptions.renderOptions}.</haxe_doc>
	</typedef>
	<typedef path="vscode.DecorationOptions" params="" file="src/vscode/DecorationOptions.hx">
		<a>
			<renderOptions>
				<x path="Null"><t path="vscode.DecorationInstanceRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Render options applied to the current decoration. For performance reasons, keep the
	 * number of decoration specific options small, and use decoration types wherever possible.</haxe_doc>
			</renderOptions>
			<range>
				<c path="vscode.Range"/>
				<haxe_doc>* Range to which this decoration is applied. The range must not be empty.</haxe_doc>
			</range>
			<hoverMessage>
				<x path="haxe.extern.EitherType">
					<c path="vscode.MarkdownString"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.MarkedString"/>
						<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.MarkdownString"/>
	<t path="vscode.MarkedString"/>
</x></c>
					</x>
				</x>
				<haxe_doc>* A message that should be rendered when hovering over the decoration.</haxe_doc>
			</hoverMessage>
		</a>
		<haxe_doc>* Represents options for a specific decoration in a {@link TextEditorDecorationType decoration set}.</haxe_doc>
	</typedef>
	<abstract path="vscode.DecorationRangeBehavior" params="" file="src/vscode/DecorationRangeBehavior.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Describes the behavior of decorations when typing/editing at their edges.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DecorationRangeBehavior"</e>
			</m>
		</meta>
		<impl><class path="vscode._DecorationRangeBehavior.DecorationRangeBehavior_Impl_" params="" file="src/vscode/DecorationRangeBehavior.hx" private="1" module="vscode.DecorationRangeBehavior" extern="1" final="1">
	<OpenOpen public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the start or end.</haxe_doc>
	</OpenOpen>
	<ClosedClosed public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The decoration's range will not widen when edits occur at the start or end.</haxe_doc>
	</ClosedClosed>
	<OpenClosed public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the start, but not at the end.</haxe_doc>
	</OpenClosed>
	<ClosedOpen public="1" set="null" static="1">
		<x path="vscode.DecorationRangeBehavior"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The decoration's range will widen when edits occur at the end, but not at the start.</haxe_doc>
	</ClosedOpen>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DecorationRangeBehavior"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DecorationRangeBehavior.DecorationRangeBehavior_Impl_" params="" file="src/vscode/DecorationRangeBehavior.hx" private="1" module="vscode.DecorationRangeBehavior" extern="1" final="1">
		<OpenOpen public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the start or end.</haxe_doc>
		</OpenOpen>
		<ClosedClosed public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The decoration's range will not widen when edits occur at the start or end.</haxe_doc>
		</ClosedClosed>
		<OpenClosed public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the start, but not at the end.</haxe_doc>
		</OpenClosed>
		<ClosedOpen public="1" set="null" static="1">
			<x path="vscode.DecorationRangeBehavior"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The decoration's range will widen when edits occur at the end, but not at the start.</haxe_doc>
		</ClosedOpen>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DecorationRangeBehavior"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DecorationRenderOptions" params="" file="src/vscode/DecorationRenderOptions.hx">
		<a>
			<textDecoration>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</textDecoration>
			<rangeBehavior>
				<x path="Null"><x path="vscode.DecorationRangeBehavior"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Customize the growing behavior of the decoration when edits occur at the edges of the decoration's range.
	 * Defaults to `DecorationRangeBehavior.OpenOpen`.</haxe_doc>
			</rangeBehavior>
			<overviewRulerLane>
				<x path="Null"><x path="vscode.OverviewRulerLane"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The position in the overview ruler where the decoration should be rendered.</haxe_doc>
			</overviewRulerLane>
			<overviewRulerColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.</haxe_doc>
			</overviewRulerColor>
			<outlineWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineWidth>
			<outlineStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineStyle>
			<outlineColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineColor>
			<outline>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</outline>
			<opacity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</opacity>
			<light>
				<x path="Null"><t path="vscode.ThemableDecorationRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for light themes.</haxe_doc>
			</light>
			<letterSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</letterSpacing>
			<isWholeLine>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Should the decoration be rendered also on the whitespace after the line text.
	 * Defaults to `false`.</haxe_doc>
			</isWholeLine>
			<gutterIconSize>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Specifies the size of the gutter icon.
	 * Available values are 'auto', 'contain', 'cover' and any percentage value.
	 * For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx</haxe_doc>
			</gutterIconSize>
			<gutterIconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the gutter.</haxe_doc>
			</gutterIconPath>
			<fontWeight>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontWeight>
			<fontStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontStyle>
			<dark>
				<x path="Null"><t path="vscode.ThemableDecorationRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Overwrite options for dark themes.</haxe_doc>
			</dark>
			<cursor>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</cursor>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</color>
			<borderWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderWidth>
			<borderStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderStyle>
			<borderSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderSpacing>
			<borderRadius>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderRadius>
			<borderColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderColor>
			<border>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</border>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<backgroundColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.
	 * Alternatively a color from the color registry can be {@link ThemeColor referenced}.</haxe_doc>
			</backgroundColor>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents rendering styles for a {@link TextEditorDecorationType text editor decoration}.</haxe_doc>
	</typedef>
	<typedef path="vscode.Definition" params="" file="src/vscode/Definition.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Location"/>
			<c path="Array"><c path="vscode.Location"/></c>
		</x>
		<haxe_doc>* The definition of a symbol represented as one or many {@link Location locations}.
 * For most programming languages there is only one location at which a symbol is
 * defined.</haxe_doc>
	</typedef>
	<typedef path="vscode.DefinitionLink" params="" file="src/vscode/DefinitionLink.hx">
		<t path="vscode.LocationLink"/>
		<haxe_doc>* Information about where a symbol is defined.
 *
 * Provides additional metadata over normal {@link Location} definitions, including the range of
 * the defining symbol</haxe_doc>
	</typedef>
	<typedef path="vscode.DefinitionProvider" params="" file="src/vscode/DefinitionProvider.hx">
		<a><provideDefinition set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the definition of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideDefinition></a>
		<haxe_doc>* The definition provider interface defines the contract between extensions and
 * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)
 * and peek definition features.</haxe_doc>
	</typedef>
	<class path="vscode.Diagnostic" params="" file="src/vscode/Diagnostic.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range to which this diagnostic applies.</haxe_doc>
		</range>
		<message public="1">
			<c path="String"/>
			<haxe_doc>* The human-readable message.</haxe_doc>
		</message>
		<severity public="1">
			<x path="vscode.DiagnosticSeverity"/>
			<haxe_doc>* The severity, default is {@link DiagnosticSeverity.Error error}.</haxe_doc>
		</severity>
		<source public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable string describing the source of this
	 * diagnostic, e.g. 'typescript' or 'super lint'.</haxe_doc>
		</source>
		<code public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Int"/>
		<a>
			<value>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<x path="Int"/>
				</x>
				<haxe_doc>* A code or identifier for this diagnostic.
		 * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.</haxe_doc>
			</value>
			<target>
				<c path="vscode.Uri"/>
				<haxe_doc>* A target URI to open with more information about the diagnostic error.</haxe_doc>
			</target>
		</a>
	</x>
</x></x>
			<haxe_doc>* A code or identifier for this diagnostic.
	 * Should be used for later processing, e.g. when providing {@link CodeActionContext code actions}.</haxe_doc>
		</code>
		<relatedInformation public="1">
			<x path="Null"><c path="Array"><c path="vscode.DiagnosticRelatedInformation"/></c></x>
			<haxe_doc>* An array of related diagnostic information, e.g. when symbol-names within
	 * a scope collide all definitions can be marked via this property.</haxe_doc>
		</relatedInformation>
		<tags public="1">
			<x path="Null"><c path="Array"><x path="vscode.DiagnosticTag"/></c></x>
			<haxe_doc>* Additional metadata about the diagnostic.</haxe_doc>
		</tags>
		<new public="1" set="method">
			<f a="range:message:?severity">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="vscode.DiagnosticSeverity"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new diagnostic object.
	 *
	 * @param range The range to which this diagnostic applies.
	 * @param message The human-readable message.
	 * @param severity The severity, default is {@link DiagnosticSeverity.Error error}.</haxe_doc>
		</new>
		<haxe_doc>* Represents a diagnostic, such as a compiler error or warning. Diagnostic objects
 * are only valid in the scope of a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Diagnostic"</e>
</m></meta>
	</class>
	<typedef path="vscode.DiagnosticChangeEvent" params="" file="src/vscode/DiagnosticChangeEvent.hx">
		<a><uris set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* An array of resources for which diagnostics have changed.</haxe_doc>
</uris></a>
		<haxe_doc>* The event that is fired when diagnostics change.</haxe_doc>
	</typedef>
	<class path="vscode.DiagnosticCollection" params="" file="src/vscode/DiagnosticCollection.hx" extern="1">
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The name of this diagnostic collection, for instance `typescript`. Every diagnostic
	 * from this collection will be associated with this name. Also, the task framework uses this
	 * name when defining [problem matchers](https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher).</haxe_doc>
		</name>
		<set public="1" set="method">
			<f a="uri:diagnostics">
				<c path="vscode.Uri"/>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Assign diagnostics for given resource. Will replace
	 * existing diagnostics for that resource.
	 *
	 * @param uri A resource identifier.
	 * @param diagnostics Array of diagnostics or `undefined`</haxe_doc>
			<overloads><set public="1" set="method">
	<f a="entries">
		<x path="haxe.ds.ReadOnlyArray"><x path="haxe.ds.ReadOnlyArray"><x path="Any"/></x></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Replace diagnostics for multiple resources in this collection.
	 *
	 * _Note_ that multiple tuples of the same uri will be merged, e.g
	 * `[[file1, [d1]], [file1, [d2]]]` is equivalent to `[[file1, [d1, d2]]]`.
	 * If a diagnostics item is `undefined` as in `[file1, undefined]`
	 * all previous but not subsequent diagnostics are removed.
	 *
	 * @param entries An array of tuples, like `[[file1, [d1, d2]], [file2, [d3, d4, d5]]]`, or `undefined`.</haxe_doc>
</set></overloads>
		</set>
		<delete public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Remove all diagnostics from this collection that belong
	 * to the provided `uri`. The same as `#set(uri, undefined)`.
	 *
	 * @param uri A resource identifier.</haxe_doc>
		</delete>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Remove all diagnostics from this collection. The same
	 * as calling `#set(undefined)`;</haxe_doc>
		</clear>
		<forEach public="1" set="method">
			<f a="callback:?thisArg">
				<f a="::">
					<c path="vscode.Uri"/>
					<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x>
					<c path="vscode.DiagnosticCollection"/>
					<x path="Void"/>
				</f>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Iterate over each entry in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
		</forEach>
		<get public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Diagnostic"/></x></x>
			</f>
			<haxe_doc>* Get the diagnostics for a given resource. *Note* that you cannot
	 * modify the diagnostics-array returned from this call.
	 *
	 * @param uri A resource identifier.
	 * @returns An immutable array of {@link Diagnostic diagnostics} or `undefined`.</haxe_doc>
		</get>
		<has public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this collection contains diagnostics for a
	 * given resource.
	 *
	 * @param uri A resource identifier.
	 * @returns `true` if this collection has diagnostic for the given resource.</haxe_doc>
		</has>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose and free associated resources. Calls
	 * {@link DiagnosticCollection.clear clear}.</haxe_doc>
		</dispose>
		<haxe_doc>* A diagnostics collection is a container that manages a set of
 * {@link Diagnostic diagnostics}. Diagnostics are always scopes to a
 * diagnostics collection and a resource.
 *
 * To get an instance of a `DiagnosticCollection` use
 * {@link languages.createDiagnosticCollection createDiagnosticCollection}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DiagnosticCollection"</e>
</m></meta>
	</class>
	<class path="vscode.DiagnosticRelatedInformation" params="" file="src/vscode/DiagnosticRelatedInformation.hx" extern="1">
		<location public="1">
			<c path="vscode.Location"/>
			<haxe_doc>* The location of this related diagnostic information.</haxe_doc>
		</location>
		<message public="1">
			<c path="String"/>
			<haxe_doc>* The message of this related diagnostic information.</haxe_doc>
		</message>
		<new public="1" set="method">
			<f a="location:message">
				<c path="vscode.Location"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new related diagnostic information object.
	 *
	 * @param location The location.
	 * @param message The message.</haxe_doc>
		</new>
		<haxe_doc>* Represents a related message and source code location for a diagnostic. This should be
 * used to point to code locations that cause or related to a diagnostics, e.g. when duplicating
 * a symbol in a scope.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DiagnosticRelatedInformation"</e>
</m></meta>
	</class>
	<abstract path="vscode.DiagnosticSeverity" params="" file="src/vscode/DiagnosticSeverity.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the severity of diagnostics.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticSeverity"</e>
			</m>
		</meta>
		<impl><class path="vscode._DiagnosticSeverity.DiagnosticSeverity_Impl_" params="" file="src/vscode/DiagnosticSeverity.hx" private="1" module="vscode.DiagnosticSeverity" extern="1" final="1">
	<Error public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Something not allowed by the rules of a language or other means.</haxe_doc>
	</Error>
	<Warning public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Something suspicious but allowed.</haxe_doc>
	</Warning>
	<Information public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Something to inform about but not a problem.</haxe_doc>
	</Information>
	<Hint public="1" set="null" static="1">
		<x path="vscode.DiagnosticSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Something to hint to a better way of doing it, like proposing
	 * a refactoring.</haxe_doc>
	</Hint>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DiagnosticSeverity"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DiagnosticSeverity.DiagnosticSeverity_Impl_" params="" file="src/vscode/DiagnosticSeverity.hx" private="1" module="vscode.DiagnosticSeverity" extern="1" final="1">
		<Error public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Something not allowed by the rules of a language or other means.</haxe_doc>
		</Error>
		<Warning public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Something suspicious but allowed.</haxe_doc>
		</Warning>
		<Information public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Something to inform about but not a problem.</haxe_doc>
		</Information>
		<Hint public="1" set="null" static="1">
			<x path="vscode.DiagnosticSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Something to hint to a better way of doing it, like proposing
	 * a refactoring.</haxe_doc>
		</Hint>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticSeverity"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.DiagnosticTag" params="" file="src/vscode/DiagnosticTag.hx">
		<this><c path="String"/></this>
		<haxe_doc>* Additional metadata about the type of a diagnostic.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._DiagnosticTag.DiagnosticTag_Impl_" params="" file="src/vscode/DiagnosticTag.hx" private="1" module="vscode.DiagnosticTag" extern="1" final="1">
	<Unnecessary public="1" set="null" static="1">
		<x path="vscode.DiagnosticTag"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Unused or unnecessary code.
	 *
	 * Diagnostics with this tag are rendered faded out. The amount of fading
	 * is controlled by the `"editorUnnecessaryCode.opacity"` theme color. For
	 * example, `"editorUnnecessaryCode.opacity": "#000000c0"` will render the
	 * code with 75% opacity. For high contrast themes, use the
	 * `"editorUnnecessaryCode.border"` theme color to underline unnecessary code
	 * instead of fading it out.</haxe_doc>
	</Unnecessary>
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.DiagnosticTag"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Deprecated or obsolete code.
	 *
	 * Diagnostics with this tag are rendered with a strike through.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DiagnosticTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DiagnosticTag.DiagnosticTag_Impl_" params="" file="src/vscode/DiagnosticTag.hx" private="1" module="vscode.DiagnosticTag" extern="1" final="1">
		<Unnecessary public="1" set="null" static="1">
			<x path="vscode.DiagnosticTag"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Unused or unnecessary code.
	 *
	 * Diagnostics with this tag are rendered faded out. The amount of fading
	 * is controlled by the `"editorUnnecessaryCode.opacity"` theme color. For
	 * example, `"editorUnnecessaryCode.opacity": "#000000c0"` will render the
	 * code with 75% opacity. For high contrast themes, use the
	 * `"editorUnnecessaryCode.border"` theme color to underline unnecessary code
	 * instead of fading it out.</haxe_doc>
		</Unnecessary>
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.DiagnosticTag"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Deprecated or obsolete code.
	 *
	 * Diagnostics with this tag are rendered with a strike through.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DiagnosticTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.Disposable" params="" file="src/vscode/Disposable.hx" extern="1">
		<from public="1" set="method" static="1">
			<f a="disposableLikes">
				<t path="haxe.extern.Rest"><a><dispose set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>* Function to clean up resources.</haxe_doc>
</dispose></a></t>
				<c path="vscode.Disposable"/>
			</f>
			<haxe_doc>* Combine many disposable-likes into one. You can use this method when having objects with
	 * a dispose function which aren't instances of `Disposable`.
	 *
	 * @param disposableLikes Objects that have at least a `dispose`-function member. Note that asynchronous
	 * dispose-functions aren't awaited.
	 * @returns Returns a new disposable which, upon dispose, will
	 * dispose all provided disposables.</haxe_doc>
		</from>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose this object.</haxe_doc>
		</dispose>
		<new public="1" set="method">
			<f a="callOnDispose">
				<f a=""><x path="Any"/></f>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new disposable that calls the provided function
	 * on dispose.
	 *
	 * *Note* that an asynchronous function is not awaited.
	 *
	 * @param callOnDispose Function that disposes something.</haxe_doc>
		</new>
		<haxe_doc>* Represents a type which can release resources, such
 * as event listening or a timer.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Disposable"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentColorProvider" params="" file="src/vscode/DocumentColorProvider.hx">
		<a>
			<provideDocumentColors set="method">
				<f a="document:token">
					<c path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.ColorInformation"/></c></t>
				</f>
				<haxe_doc>* Provide colors for the given document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @returns An array of {@link ColorInformation color information} or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentColors>
			<provideColorPresentations set="method">
				<f a="color:context:token">
					<c path="vscode.Color"/>
					<a>
						<range><c path="vscode.Range"/></range>
						<document><c path="vscode.TextDocument"/></document>
					</a>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.ColorPresentation"/></c></t>
				</f>
				<haxe_doc>* Provide {@link ColorPresentation representations} for a color.
	 *
	 * @param color The color to show and insert.
	 * @param context A context object with additional information
	 * @param token A cancellation token.
	 * @returns An array of color presentations or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideColorPresentations>
		</a>
		<haxe_doc>* The document color provider defines the contract between extensions and feature of
 * picking and modifying colors in the editor.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentDropEdit" params="" file="src/vscode/DocumentDropEdit.hx" extern="1">
		<insertText public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="vscode.SnippetString"/>
			</x>
			<haxe_doc>* The text or snippet to insert at the drop location.</haxe_doc>
		</insertText>
		<additionalEdit public="1">
			<x path="Null"><c path="vscode.WorkspaceEdit"/></x>
			<haxe_doc>* An optional additional edit to apply on drop.</haxe_doc>
		</additionalEdit>
		<new public="1" set="method">
			<f a="insertText">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.SnippetString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param insertText The text or snippet to insert at the drop location.</haxe_doc>
		</new>
		<haxe_doc>* An edit operation applied {@link DocumentDropEditProvider on drop}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentDropEdit"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentDropEditProvider" params="" file="src/vscode/DocumentDropEditProvider.hx">
		<a><provideDocumentDropEdits set="method">
	<f a="document:position:dataTransfer:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<c path="vscode.DataTransfer"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.DocumentDropEdit"/></t>
	</f>
	<haxe_doc>* Provide edits which inserts the content being dragged and dropped into the document.
	 *
	 * @param document The document in which the drop occurred.
	 * @param position The position in the document where the drop occurred.
	 * @param dataTransfer A {@link DataTransfer} object that holds data about what is being dragged and dropped.
	 * @param token A cancellation token.
	 *
	 * @returns A {@link DocumentDropEdit} or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideDocumentDropEdits></a>
		<haxe_doc>* Provider which handles dropping of resources into a text editor.
 *
 * This allows users to drag and drop resources (including resources from external apps) into the editor. While dragging
 * and dropping files, users can hold down `shift` to drop the file into the editor instead of opening it.
 * Requires `editor.dropIntoEditor.enabled` to be on.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentFilter" params="" file="src/vscode/DocumentFilter.hx">
		<a>
			<scheme final="1" set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A Uri {@link Uri.scheme scheme}, like `file` or `untitled`.</haxe_doc>
			</scheme>
			<pattern final="1" set="null">
				<x path="Null"><t path="vscode.GlobPattern"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A {@link GlobPattern glob pattern} that is matched on the absolute path of the document. Use a {@link RelativePattern relative pattern}
	 * to filter documents to a {@link WorkspaceFolder workspace folder}.</haxe_doc>
			</pattern>
			<notebookType set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The {@link NotebookDocument.notebookType type} of a notebook, like `jupyter-notebook`. This allows
	 * to narrow down on the type of a notebook that a {@link NotebookCell.document cell document} belongs to.
	 *
	 * *Note* that setting the `notebookType`-property changes how `scheme` and `pattern` are interpreted. When set
	 * they are evaluated against the {@link NotebookDocument.uri notebook uri}, not the document uri.
	 *
	 * @example <caption>Match python document inside jupyter notebook that aren't stored yet (`untitled`)</caption>
	 * { language: 'python', notebookType: 'jupyter-notebook', scheme: 'untitled' }]]></haxe_doc>
			</notebookType>
			<language set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A language id, like `typescript`.</haxe_doc>
			</language>
		</a>
		<haxe_doc><![CDATA[* A document filter denotes a document by different properties like
 * the {@link TextDocument.languageId language}, the {@link Uri.scheme scheme} of
 * its resource, or a glob-pattern that is applied to the {@link TextDocument.fileName path}.
 *
 * @example <caption>A language filter that applies to typescript files on disk</caption>
 * { language: 'typescript', scheme: 'file' }
 *
 * @example <caption>A language filter that applies to all package.json paths</caption>
 * { language: 'json', pattern: '**​/package.json' }]]></haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentFormattingEditProvider" params="" file="src/vscode/DocumentFormattingEditProvider.hx">
		<a><provideDocumentFormattingEdits set="method">
	<f a="document:options:token">
		<c path="vscode.TextDocument"/>
		<t path="vscode.FormattingOptions"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
	</f>
	<haxe_doc>* Provide formatting edits for a whole document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @returns A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentFormattingEdits></a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentHighlight" params="" file="src/vscode/DocumentHighlight.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this highlight applies to.</haxe_doc>
		</range>
		<kind public="1">
			<x path="Null"><x path="vscode.DocumentHighlightKind"/></x>
			<haxe_doc>* The highlight kind, default is {@link DocumentHighlightKind.Text text}.</haxe_doc>
		</kind>
		<new public="1" set="method">
			<f a="range:?kind">
				<c path="vscode.Range"/>
				<x path="vscode.DocumentHighlightKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document highlight object.
	 *
	 * @param range The range the highlight applies to.
	 * @param kind The highlight kind, default is {@link DocumentHighlightKind.Text text}.</haxe_doc>
		</new>
		<haxe_doc>* A document highlight is a range inside a text document which deserves
 * special attention. Usually a document highlight is visualized by changing
 * the background color of its range.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentHighlight"</e>
</m></meta>
	</class>
	<abstract path="vscode.DocumentHighlightKind" params="" file="src/vscode/DocumentHighlightKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A document highlight kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DocumentHighlightKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._DocumentHighlightKind.DocumentHighlightKind_Impl_" params="" file="src/vscode/DocumentHighlightKind.hx" private="1" module="vscode.DocumentHighlightKind" extern="1" final="1">
	<Text public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A textual occurrence.</haxe_doc>
	</Text>
	<Read public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Read-access of a symbol, like reading a variable.</haxe_doc>
	</Read>
	<Write public="1" set="null" static="1">
		<x path="vscode.DocumentHighlightKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Write-access of a symbol, like writing to a variable.</haxe_doc>
	</Write>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"DocumentHighlightKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._DocumentHighlightKind.DocumentHighlightKind_Impl_" params="" file="src/vscode/DocumentHighlightKind.hx" private="1" module="vscode.DocumentHighlightKind" extern="1" final="1">
		<Text public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A textual occurrence.</haxe_doc>
		</Text>
		<Read public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Read-access of a symbol, like reading a variable.</haxe_doc>
		</Read>
		<Write public="1" set="null" static="1">
			<x path="vscode.DocumentHighlightKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Write-access of a symbol, like writing to a variable.</haxe_doc>
		</Write>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"DocumentHighlightKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.DocumentHighlightProvider" params="" file="src/vscode/DocumentHighlightProvider.hx">
		<a><provideDocumentHighlights set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.DocumentHighlight"/></c></t>
	</f>
	<haxe_doc>* Provide a set of document highlights, like all occurrences of a variable or
	 * all exit-points of a function.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentHighlights></a>
		<haxe_doc>* The document highlight provider interface defines the contract between extensions and
 * the word-highlight-feature.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentLink" params="" file="src/vscode/DocumentLink.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this link applies to.</haxe_doc>
		</range>
		<target public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The uri this link points to.</haxe_doc>
		</target>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The tooltip text when you hover over this link.
	 *
	 * If a tooltip is provided, is will be displayed in a string that includes instructions on how to
	 * trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary depending on OS,
	 * user settings, and localization.</haxe_doc>
		</tooltip>
		<new public="1" set="method">
			<f a="range:?target">
				<c path="vscode.Range"/>
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document link.
	 *
	 * @param range The range the document link applies to. Must not be empty.
	 * @param target The uri the document link points to.</haxe_doc>
		</new>
		<haxe_doc>* A document link is a range in a text document that links to an internal or external resource, like another
 * text document or a web site.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentLink"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentLinkProvider" params="T" file="src/vscode/DocumentLinkProvider.hx">
		<a>
			<resolveDocumentLink>
				<x path="Null"><f a="link:token">
	<c path="vscode.DocumentLinkProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.DocumentLinkProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a link fill in its {@link DocumentLink.target target}. This method is called when an incomplete
	 * link is selected in the UI. Providers can implement this method and return incomplete links
	 * (without target) from the {@linkcode DocumentLinkProvider.provideDocumentLinks provideDocumentLinks} method which
	 * often helps to improve performance.
	 *
	 * @param link The link that is to be resolved.
	 * @param token A cancellation token.</haxe_doc>
			</resolveDocumentLink>
			<provideDocumentLinks set="method">
				<f a="document:token">
					<c path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.DocumentLinkProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provide links for the given document. Note that the editor ships with a default provider that detects
	 * `http(s)` and `file` links.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @returns An array of {@link DocumentLink document links} or a thenable that resolves to such. The lack of a result
	 * can be signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentLinks>
		</a>
		<haxe_doc>* The document link provider defines the contract between extensions and feature of showing
 * links in the editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentRangeFormattingEditProvider" params="" file="src/vscode/DocumentRangeFormattingEditProvider.hx">
		<a>
			<provideDocumentRangesFormattingEdits set="method">
				<x path="Null"><f a="document:ranges:options:token">
	<c path="vscode.TextDocument"/>
	<c path="Array"><c path="vscode.Range"/></c>
	<t path="vscode.FormattingOptions"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Provide formatting edits for multiple ranges in a document.
	 *
	 * This function is optional but allows a formatter to perform faster when formatting only modified ranges or when
	 * formatting a large number of selections.
	 *
	 * The given ranges are hints and providers can decide to format a smaller
	 * or larger range. Often this is done by adjusting the start and end
	 * of the range to full syntax nodes.
	 *
	 * @param document The document in which the command was invoked.
	 * @param ranges The ranges which should be formatted.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @returns A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentRangesFormattingEdits>
			<provideDocumentRangeFormattingEdits set="method">
				<f a="document:range:options:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Range"/>
					<t path="vscode.FormattingOptions"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
				</f>
				<haxe_doc>* Provide formatting edits for a range in a document.
	 *
	 * The given range is a hint and providers can decide to format a smaller
	 * or larger range. Often this is done by adjusting the start and end
	 * of the range to full syntax nodes.
	 *
	 * @param document The document in which the command was invoked.
	 * @param range The range which should be formatted.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @returns A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideDocumentRangeFormattingEdits>
		</a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentRangeSemanticTokensProvider" params="" file="src/vscode/DocumentRangeSemanticTokensProvider.hx">
		<a><provideDocumentRangeSemanticTokens set="method">
	<f a="document:range:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Range"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.SemanticTokens"/></t>
	</f>
	<haxe_doc>* @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens}.</haxe_doc>
</provideDocumentRangeSemanticTokens></a>
		<haxe_doc>* The document range semantic tokens provider interface defines the contract between extensions and
 * semantic tokens.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSelector" params="" file="src/vscode/DocumentSelector.hx">
		<x path="haxe.extern.EitherType">
			<t path="vscode.DocumentSelectorSimple"/>
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.DocumentSelectorSimple"/></x>
		</x>
		<haxe_doc>* A language selector is the combination of one or many language identifiers
 * and {@link DocumentFilter language filters}.
 *
 * *Note* that a document selector that is just a language identifier selects *all*
 * documents, even those that are not saved on disk. Only use such selectors when
 * a feature works without further context, e.g. without the need to resolve related
 * 'files'.
 *
 * @example
 * let sel:DocumentSelector = { scheme: 'file', language: 'typescript' };</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSelectorSimple" params="" file="src/vscode/DocumentSelector.hx" module="vscode.DocumentSelector"><x path="haxe.extern.EitherType">
	<t path="vscode.DocumentFilter"/>
	<c path="String"/>
</x></typedef>
	<typedef path="vscode.DocumentSemanticTokensProvider" params="" file="src/vscode/DocumentSemanticTokensProvider.hx">
		<a>
			<provideDocumentSemanticTokensEdits set="method">
				<x path="Null"><f a="document:previousResultId:token">
	<c path="vscode.TextDocument"/>
	<c path="String"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.SemanticTokens"/>
	<c path="vscode.SemanticTokensEdits"/>
</x></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Instead of always returning all the tokens in a file, it is possible for a `DocumentSemanticTokensProvider` to implement
	 * this method (`provideDocumentSemanticTokensEdits`) and then return incremental updates to the previously provided semantic tokens.
	 *
	 * ---
	 * ### How tokens change when the document changes
	 *
	 * Suppose that `provideDocumentSemanticTokens` has previously returned the following semantic tokens:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 *
	 * Also suppose that after some edits, the new semantic tokens in a file are:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 * It is possible to express these new tokens in terms of an edit applied to the previous tokens:
	 * ```
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // old tokens
	 *    [  3,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ] // new tokens
	 *
	 *    edit: { start:  0, deleteCount: 1, data: [3] } // replace integer at offset 0 with 3
	 * ```
	 *
	 * *NOTE*: If the provider cannot compute `SemanticTokensEdits`, it can "give up" and return all the tokens in the document again.
	 * *NOTE*: All edits in `SemanticTokensEdits` contain indices in the old integers array, so they all refer to the previous result state.</haxe_doc>
			</provideDocumentSemanticTokensEdits>
			<provideDocumentSemanticTokens set="method">
				<f a="document:token">
					<c path="vscode.TextDocument"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.SemanticTokens"/></t>
				</f>
				<haxe_doc><![CDATA[* Tokens in a file are represented as an array of integers. The position of each token is expressed relative to
	 * the token before it, because most tokens remain stable relative to each other when edits are made in a file.
	 *
	 * ---
	 * In short, each token takes 5 integers to represent, so a specific token `i` in the file consists of the following array indices:
	 *  - at index `5*i`   - `deltaLine`: token line number, relative to the previous token
	 *  - at index `5*i+1` - `deltaStart`: token start character, relative to the previous token (relative to 0 or the previous token's start if they are on the same line)
	 *  - at index `5*i+2` - `length`: the length of the token. A token cannot be multiline.
	 *  - at index `5*i+3` - `tokenType`: will be looked up in `SemanticTokensLegend.tokenTypes`. We currently ask that `tokenType` < 65536.
	 *  - at index `5*i+4` - `tokenModifiers`: each set bit will be looked up in `SemanticTokensLegend.tokenModifiers`
	 *
	 * ---
	 * ### How to encode tokens
	 *
	 * Here is an example for encoding a file with 3 tokens in a uint32 array:
	 * ```
	 *    { line: 2, startChar:  5, length: 3, tokenType: "property",  tokenModifiers: ["private", "static"] },
	 *    { line: 2, startChar: 10, length: 4, tokenType: "type",      tokenModifiers: [] },
	 *    { line: 5, startChar:  2, length: 7, tokenType: "class",     tokenModifiers: [] }
	 * ```
	 *
	 * 1. First of all, a legend must be devised. This legend must be provided up-front and capture all possible token types.
	 * For this example, we will choose the following legend which must be passed in when registering the provider:
	 * ```
	 *    tokenTypes: ['property', 'type', 'class'],
	 *    tokenModifiers: ['private', 'static']
	 * ```
	 *
	 * 2. The first transformation step is to encode `tokenType` and `tokenModifiers` as integers using the legend. Token types are looked
	 * up by index, so a `tokenType` value of `1` means `tokenTypes[1]`. Multiple token modifiers can be set by using bit flags,
	 * so a `tokenModifier` value of `3` is first viewed as binary `0b00000011`, which means `[tokenModifiers[0], tokenModifiers[1]]` because
	 * bits 0 and 1 are set. Using this legend, the tokens now are:
	 * ```
	 *    { line: 2, startChar:  5, length: 3, tokenType: 0, tokenModifiers: 3 },
	 *    { line: 2, startChar: 10, length: 4, tokenType: 1, tokenModifiers: 0 },
	 *    { line: 5, startChar:  2, length: 7, tokenType: 2, tokenModifiers: 0 }
	 * ```
	 *
	 * 3. The next step is to represent each token relative to the previous token in the file. In this case, the second token
	 * is on the same line as the first token, so the `startChar` of the second token is made relative to the `startChar`
	 * of the first token, so it will be `10 - 5`. The third token is on a different line than the second token, so the
	 * `startChar` of the third token will not be altered:
	 * ```
	 *    { deltaLine: 2, deltaStartChar: 5, length: 3, tokenType: 0, tokenModifiers: 3 },
	 *    { deltaLine: 0, deltaStartChar: 5, length: 4, tokenType: 1, tokenModifiers: 0 },
	 *    { deltaLine: 3, deltaStartChar: 2, length: 7, tokenType: 2, tokenModifiers: 0 }
	 * ```
	 *
	 * 4. Finally, the last step is to inline each of the 5 fields for a token in a single array, which is a memory friendly representation:
	 * ```
	 *    // 1st token,  2nd token,  3rd token
	 *    [  2,5,3,0,3,  0,5,4,1,0,  3,2,7,2,0 ]
	 * ```
	 *
	 * @see {@link SemanticTokensBuilder} for a helper to encode tokens as integers.
	 * *NOTE*: When doing edits, it is possible that multiple edits occur until the editor decides to invoke the semantic tokens provider.
	 * *NOTE*: If the provider cannot temporarily compute semantic tokens, it can indicate this by throwing an error with the message 'Busy'.]]></haxe_doc>
			</provideDocumentSemanticTokens>
			<onDidChangeSemanticTokens>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the semantic tokens from this provider have changed.</haxe_doc>
			</onDidChangeSemanticTokens>
		</a>
		<haxe_doc>* The document semantic tokens provider interface defines the contract between extensions and
 * semantic tokens.</haxe_doc>
	</typedef>
	<class path="vscode.DocumentSymbol" params="" file="src/vscode/DocumentSymbol.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this symbol.</haxe_doc>
		</name>
		<detail public="1">
			<c path="String"/>
			<haxe_doc>* More detail for this symbol, e.g. the signature of a function.</haxe_doc>
		</detail>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this symbol.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this symbol.</haxe_doc>
		</tags>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.</haxe_doc>
		</range>
		<selectionRange public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range that should be selected and reveal when this symbol is being picked, e.g. the name of a function.
	 * Must be contained by the {@linkcode DocumentSymbol.range range}.</haxe_doc>
		</selectionRange>
		<children public="1">
			<c path="Array"><c path="vscode.DocumentSymbol"/></c>
			<haxe_doc>* Children of this symbol, e.g. properties of a class.</haxe_doc>
		</children>
		<new public="1" set="method">
			<f a="name:detail:kind:range:selectionRange">
				<c path="String"/>
				<c path="String"/>
				<x path="vscode.SymbolKind"/>
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new document symbol.
	 *
	 * @param name The name of the symbol.
	 * @param detail Details for the symbol.
	 * @param kind The kind of the symbol.
	 * @param range The full range of the symbol.
	 * @param selectionRange The range that should be reveal.</haxe_doc>
		</new>
		<haxe_doc>* Represents programming constructs like variables, classes, interfaces etc. that appear in a document. Document
 * symbols can be hierarchical and they have two ranges: one that encloses its definition and one that points to
 * its most interesting range, e.g. the range of an identifier.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"DocumentSymbol"</e>
</m></meta>
	</class>
	<typedef path="vscode.DocumentSymbolProvider" params="" file="src/vscode/DocumentSymbolProvider.hx">
		<a><provideDocumentSymbols set="method">
	<f a="document:token">
		<c path="vscode.TextDocument"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.SymbolInformation"/></c>
	<c path="Array"><c path="vscode.DocumentSymbol"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide symbol information for the given document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param token A cancellation token.
	 * @returns An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideDocumentSymbols></a>
		<haxe_doc>* The document symbol provider interface defines the contract between extensions and
 * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.DocumentSymbolProviderMetadata" params="" file="src/vscode/DocumentSymbolProviderMetadata.hx">
		<a><label>
	<x path="Null"><c path="String"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* A human-readable string that is shown when multiple outlines trees show for one document.</haxe_doc>
</label></a>
		<haxe_doc>* Metadata about a document symbol provider.</haxe_doc>
	</typedef>
	<abstract path="vscode.EndOfLine" params="" file="src/vscode/EndOfLine.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents an end of line character sequence in a {@link TextDocument document}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EndOfLine"</e>
			</m>
		</meta>
		<impl><class path="vscode._EndOfLine.EndOfLine_Impl_" params="" file="src/vscode/EndOfLine.hx" private="1" module="vscode.EndOfLine" extern="1" final="1">
	<LF public="1" set="null" static="1">
		<x path="vscode.EndOfLine"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The line feed `\n` character.</haxe_doc>
	</LF>
	<CRLF public="1" set="null" static="1">
		<x path="vscode.EndOfLine"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The carriage return line feed `\r\n` sequence.</haxe_doc>
	</CRLF>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"EndOfLine"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._EndOfLine.EndOfLine_Impl_" params="" file="src/vscode/EndOfLine.hx" private="1" module="vscode.EndOfLine" extern="1" final="1">
		<LF public="1" set="null" static="1">
			<x path="vscode.EndOfLine"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The line feed `\n` character.</haxe_doc>
		</LF>
		<CRLF public="1" set="null" static="1">
			<x path="vscode.EndOfLine"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The carriage return line feed `\r\n` sequence.</haxe_doc>
		</CRLF>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EndOfLine"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.EnterAction" params="" file="src/vscode/EnterAction.hx">
		<a>
			<removeText>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Describes the number of characters to remove from the new line's indentation.</haxe_doc>
			</removeText>
			<indentAction>
				<x path="vscode.IndentAction"/>
				<haxe_doc>* Describe what to do with the indentation.</haxe_doc>
			</indentAction>
			<appendText>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Describes text to be appended after the new line and after the indentation.</haxe_doc>
			</appendText>
		</a>
		<haxe_doc>* Describes what to do when pressing Enter.</haxe_doc>
	</typedef>
	<typedef path="vscode.EnvironmentVariableCollection" params="" file="src/vscode/EnvironmentVariableCollection.hx">
		<a>
			<replace set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replace an environment variable with a value.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to replace.
	 * @param value The value to replace the variable with.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</replace>
			<prepend set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Prepend a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to prepend.
	 * @param value The value to prepend to the variable.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</prepend>
			<persistent>
				<x path="Bool"/>
				<haxe_doc>* Whether the collection should be cached for the workspace and applied to the terminal
	 * across window reloads. When true the collection will be active immediately such when the
	 * window reloads. Additionally, this API will return the cached version if it exists. The
	 * collection will be invalidated when the extension is uninstalled or when the collection
	 * is cleared. Defaults to true.</haxe_doc>
			</persistent>
			<get set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Null"><t path="vscode.EnvironmentVariableMutator"/></x>
				</f>
				<haxe_doc>* Gets the mutator that this collection applies to a variable, if any.
	 *
	 * @param variable The variable to get the mutator for.</haxe_doc>
			</get>
			<forEach set="method">
				<f a="callback:?thisArg">
					<f a="variable:mutator:collection">
						<c path="String"/>
						<t path="vscode.EnvironmentVariableMutator"/>
						<t path="vscode.EnvironmentVariableCollection"/>
						<x path="Any"/>
					</f>
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Iterate over each mutator in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
			</forEach>
			<delete set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Deletes this collection's mutator for a variable.
	 *
	 * @param variable The variable to delete the mutator for.</haxe_doc>
			</delete>
			<clear set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Clears all mutators from this collection.</haxe_doc>
			</clear>
			<append set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to append to.
	 * @param value The value to append to the variable.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* A collection of mutations that an extension can apply to a process environment.</haxe_doc>
	</typedef>
	<typedef path="vscode.EnvironmentVariableMutator" params="" file="src/vscode/EnvironmentVariableMutator.hx">
		<a>
			<value final="1" set="null">
				<c path="String"/>
				<haxe_doc>* The value to use for the variable.</haxe_doc>
			</value>
			<type final="1" set="null">
				<x path="vscode.EnvironmentVariableMutatorType"/>
				<haxe_doc>* The type of mutation that will occur to the variable.</haxe_doc>
			</type>
			<options final="1" set="null">
				<t path="vscode.EnvironmentVariableMutatorOptions"/>
				<haxe_doc>* Options applied to the mutator.</haxe_doc>
			</options>
		</a>
		<haxe_doc>* A type of mutation and its value to be applied to an environment variable.</haxe_doc>
	</typedef>
	<typedef path="vscode.EnvironmentVariableMutatorOptions" params="" file="src/vscode/EnvironmentVariableMutatorOptions.hx">
		<a>
			<applyAtShellIntegration>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Apply to the environment in the shell integration script. Note that this _will not_ apply
	 * the mutator if shell integration is disabled or not working for some reason. Defaults to
	 * false.</haxe_doc>
			</applyAtShellIntegration>
			<applyAtProcessCreation>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Apply to the environment just before the process is created. Defaults to false.</haxe_doc>
			</applyAtProcessCreation>
		</a>
		<haxe_doc>* Options applied to the mutator.</haxe_doc>
	</typedef>
	<abstract path="vscode.EnvironmentVariableMutatorType" params="" file="src/vscode/EnvironmentVariableMutatorType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A type of mutation that can be applied to an environment variable.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EnvironmentVariableMutatorType"</e>
			</m>
		</meta>
		<impl><class path="vscode._EnvironmentVariableMutatorType.EnvironmentVariableMutatorType_Impl_" params="" file="src/vscode/EnvironmentVariableMutatorType.hx" private="1" module="vscode.EnvironmentVariableMutatorType" extern="1" final="1">
	<Replace public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Replace the variable's existing value.</haxe_doc>
	</Replace>
	<Append public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Append to the end of the variable's existing value.</haxe_doc>
	</Append>
	<Prepend public="1" set="null" static="1">
		<x path="vscode.EnvironmentVariableMutatorType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Prepend to the start of the variable's existing value.</haxe_doc>
	</Prepend>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"EnvironmentVariableMutatorType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._EnvironmentVariableMutatorType.EnvironmentVariableMutatorType_Impl_" params="" file="src/vscode/EnvironmentVariableMutatorType.hx" private="1" module="vscode.EnvironmentVariableMutatorType" extern="1" final="1">
		<Replace public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Replace the variable's existing value.</haxe_doc>
		</Replace>
		<Append public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Append to the end of the variable's existing value.</haxe_doc>
		</Append>
		<Prepend public="1" set="null" static="1">
			<x path="vscode.EnvironmentVariableMutatorType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Prepend to the start of the variable's existing value.</haxe_doc>
		</Prepend>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"EnvironmentVariableMutatorType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.EnvironmentVariableScope" params="" file="src/vscode/EnvironmentVariableScope.hx">
		<a><workspaceFolder>
	<x path="Null"><t path="vscode.WorkspaceFolder"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Any specific workspace folder to get collection for.</haxe_doc>
</workspaceFolder></a>
		<haxe_doc>* The scope object to which the environment variable collection applies.</haxe_doc>
	</typedef>
	<class path="vscode.EvaluatableExpression" params="" file="src/vscode/EvaluatableExpression.hx" extern="1">
		<range public="1" set="null"><c path="vscode.Range"/></range>
		<expression public="1" set="null"><x path="Null"><c path="String"/></x></expression>
		<new public="1" set="method">
			<f a="range:?expression">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new evaluatable expression object.
	 *
	 * @param range The range in the underlying document from which the evaluatable expression is extracted.
	 * @param expression If specified overrides the extracted expression.</haxe_doc>
		</new>
		<haxe_doc>* An EvaluatableExpression represents an expression in a document that can be evaluated by an active debugger or runtime.
 * The result of this evaluation is shown in a tooltip-like widget.
 * If only a range is specified, the expression will be extracted from the underlying document.
 * An optional expression can be used to override the extracted expression.
 * In this case the range is still used to highlight the range in the document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"EvaluatableExpression"</e>
</m></meta>
	</class>
	<typedef path="vscode.EvaluatableExpressionProvider" params="" file="src/vscode/EvaluatableExpressionProvider.hx">
		<a><provideEvaluatableExpression set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.EvaluatableExpression"/></t>
	</f>
	<haxe_doc>* Provide an evaluatable expression for the given document and position.
	 * The editor will evaluate this expression in the active debug session and will show the result in the debug hover.
	 * The expression can be implicitly specified by the range in the underlying document or by explicitly returning an expression.
	 *
	 * @param document The document for which the debug hover is about to appear.
	 * @param position The line and character position in the document where the debug hover is about to appear.
	 * @param token A cancellation token.
	 * @returns An EvaluatableExpression or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideEvaluatableExpression></a>
		<haxe_doc>* The evaluatable expression provider interface defines the contract between extensions and
 * the debug hover. In this contract the provider returns an evaluatable expression for a given position
 * in a document and the editor evaluates this expression in the active debug session and shows the result in a debug hover.</haxe_doc>
	</typedef>
	<typedef path="vscode.Event" params="T" file="src/vscode/Event.hx">
		<f a="listener:?thisArgs:?disposables">
			<f a="e">
				<c path="vscode.Event.T"/>
				<x path="Void"/>
			</f>
			<x path="Any"/>
			<c path="Array"><c path="vscode.Disposable"/></c>
			<c path="vscode.Disposable"/>
		</f>
		<haxe_doc>* Represents a typed event.
 *
 * A function that represents an event to which you subscribe by calling it with
 * a listener function as argument.
 *
 * @param listener The listener function will be called when the event happens.
 * @param thisArgs The `this`-argument which will be used when calling the event listener.
 * @param disposables An array to which a {@link Disposable} will be added.
 * @returns A disposable which unsubscribes the event listener.
 *
 * @example
 * item.onDidChange(function(event) { console.log("Event happened: " + event); });</haxe_doc>
	</typedef>
	<class path="vscode.EventEmitter" params="T" file="src/vscode/EventEmitter.hx" extern="1">
		<event public="1">
			<t path="vscode.Event"><c path="vscode.EventEmitter.T"/></t>
			<haxe_doc>* The event listeners can subscribe to.</haxe_doc>
		</event>
		<fire public="1" set="method">
			<f a="?data">
				<c path="vscode.EventEmitter.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Notify all subscribers of the {@link EventEmitter.event event}. Failure
	 * of one or more listener will not fail this function call.
	 *
	 * @param data The event object.</haxe_doc>
		</fire>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose this object and free resources.</haxe_doc>
		</dispose>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* An event emitter can be used to create and manage an {@link Event} for others
 * to subscribe to. One emitter always owns one event.
 *
 * Use this class if you want to provide event from within your extension, for instance
 * inside a {@link TextDocumentContentProvider} or when providing
 * API to other extensions.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"EventEmitter"</e>
</m></meta>
	</class>
	<typedef path="vscode.Extension" params="T" file="src/vscode/Extension.hx">
		<a>
			<packageJSON set="null">
				<x path="Any"/>
				<haxe_doc>* The parsed contents of the extension's package.json.</haxe_doc>
			</packageJSON>
			<isActive set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the extension has been activated.</haxe_doc>
			</isActive>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The canonical extension identifier in the form of: `publisher.name`.</haxe_doc>
			</id>
			<extensionUri set="null">
				<c path="String"/>
				<haxe_doc>* The uri of the directory containing the extension.</haxe_doc>
			</extensionUri>
			<extensionPath set="null">
				<c path="String"/>
				<haxe_doc>* The absolute file path of the directory containing this extension. Shorthand
	 * notation for {@link Extension.extensionUri Extension.extensionUri.fsPath} (independent of the uri scheme).</haxe_doc>
			</extensionPath>
			<extensionKind>
				<x path="vscode.ExtensionKind"/>
				<haxe_doc>* The extension kind describes if an extension runs where the UI runs
	 * or if an extension runs where the remote extension host runs. The extension kind
	 * is defined in the `package.json`-file of extensions but can also be refined
	 * via the `remote.extensionKind`-setting. When no remote extension host exists,
	 * the value is {@linkcode ExtensionKind.UI}.</haxe_doc>
			</extensionKind>
			<exports>
				<c path="vscode.Extension.T"/>
				<haxe_doc>* The public API exported by this extension (return value of `activate`).
	 * It is an invalid action to access this field before this extension has been activated.</haxe_doc>
			</exports>
			<activate set="method">
				<f a=""><x path="js.lib.Thenable"><c path="vscode.Extension.T"/></x></f>
				<haxe_doc>* Activates this extension and returns its public API.
	 *
	 * @returns A promise that will resolve when this extension has been activated.</haxe_doc>
			</activate>
		</a>
		<haxe_doc>* Represents an extension.
 *
 * To get an instance of an `Extension` use {@link extensions.getExtension getExtension}.</haxe_doc>
	</typedef>
	<typedef path="vscode.ExtensionContext" params="" file="src/vscode/ExtensionContext.hx">
		<a>
			<workspaceState set="null">
				<c path="vscode.Memento"/>
				<haxe_doc>* A memento object that stores state in the context
	 * of the currently opened {@link workspace.workspaceFolders workspace}.</haxe_doc>
			</workspaceState>
			<subscriptions set="null">
				<c path="Array"><a><dispose set="method">
	<f a=""><x path="Void"/></f>
	<haxe_doc>* Function to clean up resources.</haxe_doc>
</dispose></a></c>
				<haxe_doc>* An array to which disposables can be added. When this
	 * extension is deactivated the disposables will be disposed.
	 *
	 * *Note* that asynchronous dispose-functions aren't awaited.</haxe_doc>
			</subscriptions>
			<storageUri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* The uri of a workspace specific directory in which the extension
	 * can store private state. The directory might not exist and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 * The value is `undefined` when no workspace nor folder has been opened.
	 *
	 * Use {@linkcode ExtensionContext.workspaceState workspaceState} or
	 * {@linkcode ExtensionContext.globalState globalState} to store key value data.
	 *
	 * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</storageUri>
			<storagePath set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":deprecated"><e>"Use `ExtensionContext.storageUri` instead."</e></m></meta>
				<haxe_doc>* An absolute file path of a workspace specific directory in which the extension
	 * can store private state. The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use {@linkcode ExtensionContext.workspaceState workspaceState} or
	 * {@linkcode ExtensionContext.globalState globalState} to store key value data.
	 *
	 * @deprecated Use {@link ExtensionContext.storageUri storageUri} instead.</haxe_doc>
			</storagePath>
			<secrets set="null">
				<t path="vscode.SecretStorage"/>
				<haxe_doc>* A secret storage object that stores state independent
	 * of the current opened {@link workspace.workspaceFolders workspace}.</haxe_doc>
			</secrets>
			<logUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of a directory in which the extension can create log files.
	 * The directory might not exist on disk and creation is up to the extension. However,
	 * the parent directory is guaranteed to be existent.
	 *
	 * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</logUri>
			<logPath set="null">
				<c path="String"/>
				<meta><m n=":deprecated"><e>"Use `ExtensionContext.logUri` instead."</e></m></meta>
				<haxe_doc>* An absolute file path of a directory in which the extension can create log files.
	 * The directory might not exist on disk and creation is up to the extension. However,
	 * the parent directory is guaranteed to be existent.
	 *
	 * @deprecated Use {@link ExtensionContext.logUri logUri} instead.</haxe_doc>
			</logPath>
			<languageModelAccessInformation set="null">
				<t path="vscode.LanguageModelAccessInformation"/>
				<haxe_doc>* An object that keeps information about how this extension can use language models.
	 *
	 * @see {@link LanguageModelChat.sendRequest}</haxe_doc>
			</languageModelAccessInformation>
			<globalStorageUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of a directory in which the extension can store global state.
	 * The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use {@linkcode ExtensionContext.globalState globalState} to store key value data.
	 *
	 * @see {@linkcode FileSystem workspace.fs} for how to read and write files and folders from
	 *  an uri.</haxe_doc>
			</globalStorageUri>
			<globalStoragePath set="null">
				<c path="String"/>
				<meta><m n=":deprecated"><e>"Use `ExtensionContext.globalStorageUri` instead."</e></m></meta>
				<haxe_doc>* An absolute file path in which the extension can store global state.
	 * The directory might not exist on disk and creation is
	 * up to the extension. However, the parent directory is guaranteed to be existent.
	 *
	 * Use {@linkcode ExtensionContext.globalState globalState} to store key value data.
	 *
	 * @deprecated Use {@link ExtensionContext.globalStorageUri globalStorageUri} instead.</haxe_doc>
			</globalStoragePath>
			<globalState set="null">
				<c path="vscode.MementoKeysForSync"/>
				<haxe_doc>* A memento object that stores state independent
	 * of the current opened {@link workspace.workspaceFolders workspace}.</haxe_doc>
			</globalState>
			<extensionUri set="null">
				<c path="String"/>
				<haxe_doc>* The uri of the directory containing the extension.</haxe_doc>
			</extensionUri>
			<extensionPath set="null">
				<c path="String"/>
				<haxe_doc>* The absolute file path of the directory containing the extension. Shorthand
	 * notation for {@link TextDocument.uri ExtensionContext.extensionUri.fsPath} (independent of the uri scheme).</haxe_doc>
			</extensionPath>
			<extensionMode set="null">
				<x path="vscode.ExtensionMode"/>
				<haxe_doc>* The mode the extension is running in. See {@link ExtensionMode}
	 * for possible values and scenarios.</haxe_doc>
			</extensionMode>
			<extension set="null">
				<t path="vscode.Extension"><d/></t>
				<haxe_doc>* The current `Extension` instance.</haxe_doc>
			</extension>
			<environmentVariableCollection set="null">
				<t path="vscode.GlobalEnvironmentVariableCollection"/>
				<haxe_doc>* Gets the extension's global environment variable collection for this workspace, enabling changes to be
	 * applied to terminal environment variables.</haxe_doc>
			</environmentVariableCollection>
			<asAbsolutePath set="method">
				<f a="relativePath">
					<c path="String"/>
					<c path="String"/>
				</f>
				<haxe_doc>* Get the absolute path of a resource contained in the extension.
	 *
	 * *Note* that an absolute uri can be constructed via {@linkcode Uri.joinPath} and
	 * {@linkcode ExtensionContext.extensionUri extensionUri}, e.g. `vscode.Uri.joinPath(context.extensionUri, relativePath);`
	 *
	 * @param relativePath A relative path to a resource contained in the extension.
	 * @returns The absolute path of the resource.</haxe_doc>
			</asAbsolutePath>
		</a>
		<haxe_doc>* An extension context is a collection of utilities private to an
 * extension.
 *
 * An instance of an `ExtensionContext` is provided as the first
 * parameter to the `activate`-call of an extension.</haxe_doc>
	</typedef>
	<class path="vscode.Memento" params="" file="src/vscode/Memento.hx" extern="1">
		<keys public="1" set="method">
			<f a=""><x path="haxe.ds.ReadOnlyArray"><c path="String"/></x></f>
			<haxe_doc>* Returns the stored keys.
	 *
	 * @returns The stored keys.</haxe_doc>
		</keys>
		<get public="1" params="T" set="method">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="get.T"/></x>
			</f>
			<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @returns The stored value or `undefined`.</haxe_doc>
			<overloads><get public="1" params="T" set="method">
	<f a="key:defaultValue">
		<c path="String"/>
		<c path="get.T"/>
		<c path="get.T"/>
	</f>
	<haxe_doc>* Return a value.
	 *
	 * @param key A string.
	 * @param defaultValue A value that should be returned when there is no
	 * value (`undefined`) with the given key.
	 * @returns The stored value or the defaultValue.</haxe_doc>
</get></overloads>
		</get>
		<update public="1" set="method">
			<f a="key:value">
				<c path="String"/>
				<x path="Any"/>
				<x path="js.lib.Thenable"><x path="Void"/></x>
			</f>
			<haxe_doc>* Store a value. The value must be JSON-stringifyable.
	 *
	 * *Note* that using `undefined` as value removes the key from the underlying
	 * storage.
	 *
	 * @param key A string.
	 * @param value A value. MUST not contain cyclic references.</haxe_doc>
		</update>
		<haxe_doc>* A memento represents a storage utility. It can store and retrieve
 * values.</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"Memento"</e>
			</m>
		</meta>
	</class>
	<class path="vscode.MementoKeysForSync" params="" file="src/vscode/ExtensionContext.hx" module="vscode.ExtensionContext" abstract="1">
		<extends path="vscode.Memento"/>
		<setKeysForSync abstract="1" set="method">
			<f a="keys">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set the keys whose values should be synchronized across devices when synchronizing user-data
	 * like configuration, extensions, and mementos.
	 *
	 * Note that this function defines the whole set of keys whose values are synchronized:
	 *  - calling it with an empty array stops synchronization for this memento
	 *  - calling it with a non-empty array replaces all keys whose values are synchronized
	 *
	 * For any given set of keys this function needs to be called only once but there is no harm in
	 * repeatedly calling it.
	 *
	 * @param keys The set of keys whose values are synced.</haxe_doc>
		</setKeysForSync>
	</class>
	<abstract path="vscode.ExtensionKind" params="" file="src/vscode/ExtensionKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* In a remote window the extension kind describes if an extension
 * runs where the UI (window) runs or if an extension runs remotely.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._ExtensionKind.ExtensionKind_Impl_" params="" file="src/vscode/ExtensionKind.hx" private="1" module="vscode.ExtensionKind" extern="1" final="1">
	<UI public="1" set="null" static="1">
		<x path="vscode.ExtensionKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Extension runs where the UI runs.</haxe_doc>
	</UI>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.ExtensionKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Extension runs where the remote extension host runs.</haxe_doc>
	</Workspace>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ExtensionKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ExtensionKind.ExtensionKind_Impl_" params="" file="src/vscode/ExtensionKind.hx" private="1" module="vscode.ExtensionKind" extern="1" final="1">
		<UI public="1" set="null" static="1">
			<x path="vscode.ExtensionKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Extension runs where the UI runs.</haxe_doc>
		</UI>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.ExtensionKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Extension runs where the remote extension host runs.</haxe_doc>
		</Workspace>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.ExtensionMode" params="" file="src/vscode/ExtensionMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The ExtensionMode is provided on the `ExtensionContext` and indicates the
 * mode the specific extension is running in.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._ExtensionMode.ExtensionMode_Impl_" params="" file="src/vscode/ExtensionMode.hx" private="1" module="vscode.ExtensionMode" extern="1" final="1">
	<Production public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The extension is installed normally (for example, from the marketplace
	 * or VSIX) in the editor.</haxe_doc>
	</Production>
	<Development public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The extension is running from an `--extensionDevelopmentPath` provided
	 * when launching the editor.</haxe_doc>
	</Development>
	<Test public="1" set="null" static="1">
		<x path="vscode.ExtensionMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The extension is running from an `--extensionTestsPath` and
	 * the extension host is running unit tests.</haxe_doc>
	</Test>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ExtensionMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ExtensionMode.ExtensionMode_Impl_" params="" file="src/vscode/ExtensionMode.hx" private="1" module="vscode.ExtensionMode" extern="1" final="1">
		<Production public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The extension is installed normally (for example, from the marketplace
	 * or VSIX) in the editor.</haxe_doc>
		</Production>
		<Development public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The extension is running from an `--extensionDevelopmentPath` provided
	 * when launching the editor.</haxe_doc>
		</Development>
		<Test public="1" set="null" static="1">
			<x path="vscode.ExtensionMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The extension is running from an `--extensionTestsPath` and
	 * the extension host is running unit tests.</haxe_doc>
		</Test>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ExtensionMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ExtensionTerminalOptions" params="" file="src/vscode/ExtensionTerminalOptions.hx">
		<a>
			<pty>
				<t path="vscode.Pseudoterminal"/>
				<haxe_doc>* An implementation of {@link Pseudoterminal} that allows an extension to
	 * control a terminal.</haxe_doc>
			</pty>
			<name>
				<c path="String"/>
				<haxe_doc>* A human-readable string which will be used to represent the terminal in the UI.</haxe_doc>
			</name>
			<location>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="vscode.TerminalLocation"/>
	<x path="haxe.extern.EitherType">
		<t path="vscode.TerminalEditorLocationOptions"/>
		<t path="vscode.TerminalSplitLocationOptions"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.</haxe_doc>
			</location>
			<isTransient>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Opt-out of the default terminal persistence on restart and reload.
	 * This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.</haxe_doc>
			</isTransient>
			<iconPath>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path or {@link ThemeIcon} for the terminal.</haxe_doc>
			</iconPath>
			<color>
				<x path="Null"><c path="vscode.ThemeColor"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon {@link ThemeColor} for the terminal.
	 * The standard `terminal.ansi*` theme keys are
	 * recommended for the best contrast and consistency across themes.</haxe_doc>
			</color>
		</a>
		<haxe_doc>* Value-object describing what options a virtual process terminal should use.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileChangeEvent" params="" file="src/vscode/FileChangeEvent.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The uri of the file that has changed.</haxe_doc>
			</uri>
			<type set="null">
				<x path="vscode.FileChangeType"/>
				<haxe_doc>* The type of change.</haxe_doc>
			</type>
		</a>
		<haxe_doc>* The event filesystem providers must use to signal a file change.</haxe_doc>
	</typedef>
	<abstract path="vscode.FileChangeType" params="" file="src/vscode/FileChangeType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enumeration of file change types.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileChangeType"</e>
			</m>
		</meta>
		<impl><class path="vscode._FileChangeType.FileChangeType_Impl_" params="" file="src/vscode/FileChangeType.hx" private="1" module="vscode.FileChangeType" extern="1" final="1">
	<Changed public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The contents or metadata of a file have changed.</haxe_doc>
	</Changed>
	<Created public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A file has been created.</haxe_doc>
	</Created>
	<Deleted public="1" set="null" static="1">
		<x path="vscode.FileChangeType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A file has been deleted.</haxe_doc>
	</Deleted>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FileChangeType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FileChangeType.FileChangeType_Impl_" params="" file="src/vscode/FileChangeType.hx" private="1" module="vscode.FileChangeType" extern="1" final="1">
		<Changed public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The contents or metadata of a file have changed.</haxe_doc>
		</Changed>
		<Created public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A file has been created.</haxe_doc>
		</Created>
		<Deleted public="1" set="null" static="1">
			<x path="vscode.FileChangeType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A file has been deleted.</haxe_doc>
		</Deleted>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileChangeType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.FileCoverage" params="" file="src/vscode/FileCoverage.hx" extern="1">
		<fromDetails public="1" set="method" static="1">
			<f a="uri:details">
				<c path="vscode.Uri"/>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.FileCoverageDetail"/></x>
				<c path="vscode.FileCoverage"/>
			</f>
			<haxe_doc>* Creates a {@link FileCoverage} instance with counts filled in from
	 * the coverage details.
	 * @param uri Covered file URI
	 * @param detailed Detailed coverage information</haxe_doc>
		</fromDetails>
		<uri public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* File URI.</haxe_doc>
		</uri>
		<statementCoverage public="1">
			<c path="vscode.TestCoverageCount"/>
			<haxe_doc>* Statement coverage information. If the reporter does not provide statement
	 * coverage information, this can instead be used to represent line coverage.</haxe_doc>
		</statementCoverage>
		<branchCoverage public="1">
			<x path="Null"><c path="vscode.TestCoverageCount"/></x>
			<haxe_doc>* Branch coverage information.</haxe_doc>
		</branchCoverage>
		<declarationCoverage public="1">
			<x path="Null"><c path="vscode.TestCoverageCount"/></x>
			<haxe_doc>* Declaration coverage information. Depending on the reporter and
	 * language, this may be types such as functions, methods, or namespaces.</haxe_doc>
		</declarationCoverage>
		<includesTests public="1">
			<x path="Null"><c path="Array"><t path="vscode.TestItem"/></c></x>
			<haxe_doc>* A list of {@link TestItem test cases} that generated coverage in this
	 * file. If set, then {@link TestRunProfile.loadDetailedCoverageForTest}
	 * should also be defined in order to retrieve detailed coverage information.</haxe_doc>
		</includesTests>
		<new public="1" set="method">
			<f a="uri:statementCoverage:?branchCoverage:?declarationCoverage:?includesTests">
				<c path="vscode.Uri"/>
				<c path="vscode.TestCoverageCount"/>
				<c path="vscode.TestCoverageCount"/>
				<c path="vscode.TestCoverageCount"/>
				<c path="Array"><t path="vscode.TestItem"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param uri Covered file URI
	 * @param statementCoverage Statement coverage information. If the reporter
	 * does not provide statement coverage information, this can instead be
	 * used to represent line coverage.
	 * @param branchCoverage Branch coverage information
	 * @param declarationCoverage Declaration coverage information
	 * @param includesTests Test cases included in this coverage report, see {@link includesTests}</haxe_doc>
		</new>
		<haxe_doc>* Contains coverage metadata for a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileCoverage"</e>
</m></meta>
	</class>
	<typedef path="vscode.FileCoverageDetail" params="" file="src/vscode/FileCoverageDetail.hx"><x path="haxe.extern.EitherType">
	<c path="vscode.StatementCoverage"/>
	<c path="vscode.DeclarationCoverage"/>
</x></typedef>
	<typedef path="vscode.FileCreateEvent" params="" file="src/vscode/FileCreateEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* The files that got created.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are created.</haxe_doc>
	</typedef>
	<class path="vscode.FileDecoration" params="" file="src/vscode/FileDecoration.hx" extern="1">
		<badge public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A very short string that represents this decoration.</haxe_doc>
		</badge>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A human-readable tooltip for this decoration.</haxe_doc>
		</tooltip>
		<color public="1">
			<x path="Null"><c path="vscode.ThemeColor"/></x>
			<haxe_doc>* The color of this decoration.</haxe_doc>
		</color>
		<propagate public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* A flag expressing that this decoration should be
	 * propagated to its parents.</haxe_doc>
		</propagate>
		<new public="1" set="method">
			<f a="?badge:?tooltip:?color">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.ThemeColor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new decoration.
	 *
	 * @param badge A letter that represents the decoration.
	 * @param tooltip The tooltip of the decoration.
	 * @param color The color of the decoration.</haxe_doc>
		</new>
		<haxe_doc>* A file decoration represents metadata that can be rendered with a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileDecoration"</e>
</m></meta>
	</class>
	<typedef path="vscode.FileDecorationProvider" params="" file="src/vscode/FileDecorationProvider.hx">
		<a>
			<provideFileDecoration set="method">
				<f a="uri:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.FileDecoration"/></t>
				</f>
				<haxe_doc>* Provide decorations for a given uri.
	 *
	 * *Note* that this function is only called when a file gets rendered in the UI.
	 * This means a decoration from a descendent that propagates upwards must be signaled
	 * to the editor via the {@link FileDecorationProvider.onDidChangeFileDecorations onDidChangeFileDecorations}-event.
	 *
	 * @param uri The uri of the file to provide a decoration for.
	 * @param token A cancellation token.
	 * @returns A decoration or a thenable that resolves to such.</haxe_doc>
			</provideFileDecoration>
			<onDidChangeFileDecorations>
				<x path="Null"><t path="vscode.Event"><x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Uri"/>
	<c path="Array"><c path="vscode.Uri"/></c>
</x></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that decorations for one or many files have changed.
	 *
	 * *Note* that this event should be used to propagate information about children.
	 *
	 * @see {@link EventEmitter}</haxe_doc>
			</onDidChangeFileDecorations>
		</a>
		<haxe_doc>* The decoration provider interfaces defines the contract between extensions and
 * file decorations.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileDeleteEvent" params="" file="src/vscode/FileDeleteEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
	<haxe_doc>* The files that got deleted.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are deleted.</haxe_doc>
	</typedef>
	<abstract path="vscode.FilePermission" params="" file="src/vscode/FilePermission.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Permissions of a file.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FilePermission"</e>
			</m>
		</meta>
		<impl><class path="vscode._FilePermission.FilePermission_Impl_" params="" file="src/vscode/FilePermission.hx" private="1" module="vscode.FilePermission" extern="1" final="1">
	<Readonly public="1" set="null" static="1">
		<x path="vscode.FilePermission"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The file is readonly.
	 *
	 * *Note:* All `FileStat` from a `FileSystemProvider` that is registered with
	 * the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`
	 * is set. As a consequence, it is not possible to have a readonly file system provider
	 * registered where some `FileStat` are not readonly.</haxe_doc>
	</Readonly>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FilePermission"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FilePermission.FilePermission_Impl_" params="" file="src/vscode/FilePermission.hx" private="1" module="vscode.FilePermission" extern="1" final="1">
		<Readonly public="1" set="null" static="1">
			<x path="vscode.FilePermission"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The file is readonly.
	 *
	 * *Note:* All `FileStat` from a `FileSystemProvider` that is registered with
	 * the option `isReadonly: true` will be implicitly handled as if `FilePermission.Readonly`
	 * is set. As a consequence, it is not possible to have a readonly file system provider
	 * registered where some `FileStat` are not readonly.</haxe_doc>
		</Readonly>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FilePermission"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.FileRenameEvent" params="" file="src/vscode/FileRenameEvent.hx">
		<a><files set="null">
	<x path="haxe.ds.ReadOnlyArray"><a>
	<oldUri final="1" set="null">
		<c path="vscode.Uri"/>
		<haxe_doc>* The old uri of a file.</haxe_doc>
	</oldUri>
	<newUri final="1" set="null">
		<c path="vscode.Uri"/>
		<haxe_doc>* The new uri of a file.</haxe_doc>
	</newUri>
</a></x>
	<haxe_doc>* The files that got renamed.</haxe_doc>
</files></a>
		<haxe_doc>* An event that is fired after files are renamed.</haxe_doc>
	</typedef>
	<typedef path="vscode.FileStat" params="" file="src/vscode/FileStat.hx">
		<a>
			<type>
				<x path="vscode.FileType"/>
				<haxe_doc>* The type of the file, e.g. is a regular file, a directory, or symbolic link
	 * to a file.
	 *
	 * *Note:* This value might be a bitmask, e.g. `FileType.File | FileType.SymbolicLink`.</haxe_doc>
			</type>
			<size>
				<x path="Int"/>
				<haxe_doc>* The size in bytes.
	 *
	 * *Note:* If the file changed, it is important to provide an updated `size`. Otherwise there
	 * may be optimizations in place that will not show the updated file contents in an editor for
	 * example.</haxe_doc>
			</size>
			<permissions>
				<x path="Null"><x path="vscode.FilePermission"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The permissions of the file, e.g. whether the file is readonly.
	 *
	 * *Note:* This value might be a bitmask, e.g. `FilePermission.Readonly | FilePermission.Other`.</haxe_doc>
			</permissions>
			<mtime>
				<x path="Int"/>
				<haxe_doc>* The modification timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.
	 *
	 * *Note:* If the file changed, it is important to provide an updated `mtime` that advanced
	 * from the previous value. Otherwise there may be optimizations in place that will not show
	 * the updated file contents in an editor for example.</haxe_doc>
			</mtime>
			<ctime>
				<x path="Int"/>
				<haxe_doc>* The creation timestamp in milliseconds elapsed since January 1, 1970 00:00:00 UTC.</haxe_doc>
			</ctime>
		</a>
		<haxe_doc>* The `FileStat`-type represents metadata about a file</haxe_doc>
	</typedef>
	<typedef path="vscode.FileSystem" params="" file="src/vscode/FileSystem.hx">
		<a>
			<writeFile set="method">
				<f a="uri:content">
					<c path="vscode.Uri"/>
					<c path="js.lib.Uint8Array"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Write data to a file, replacing its entire contents.
	 *
	 * @param uri The uri of the file.
	 * @param content The new content of the file.</haxe_doc>
			</writeFile>
			<stat set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><t path="vscode.FileStat"/></x>
				</f>
				<haxe_doc>* Retrieve metadata about a file.
	 *
	 * @param uri The uri of the file to retrieve metadata about.
	 * @returns The file metadata about the file.</haxe_doc>
			</stat>
			<rename set="method">
				<f a="source:target:?options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</overwrite></a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Rename a file or folder.
	 *
	 * @param source The existing file.
	 * @param target The new location.
	 * @param options Defines if existing files should be overwritten.</haxe_doc>
			</rename>
			<readFile set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x>
				</f>
				<haxe_doc>* Read the entire contents of a file.
	 *
	 * @param uri The uri of the file.
	 * @returns An array of bytes or a thenable that resolves to such.</haxe_doc>
			</readFile>
			<readDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><c path="Array"><x path="vscode.FileSystemReadDirectoryTuple"/></c></x>
				</f>
				<haxe_doc>* Retrieve all entries of a {@link FileType.Directory directory}.
	 *
	 * @param uri The uri of the folder.
	 * @returns An array of name/type-tuples or a thenable that resolves to such.</haxe_doc>
			</readDirectory>
			<isWritableFileSystem set="method">
				<f a="scheme">
					<c path="String"/>
					<x path="Null"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Check if a given file system supports writing files.
	 *
	 * Keep in mind that just because a file system supports writing, that does
	 * not mean that writes will always succeed. There may be permissions issues
	 * or other errors that prevent writing a file.
	 *
	 * @param scheme The scheme of the filesystem, for example `file` or `git`.
	 *
	 * @returns `true` if the file system supports writing, `false` if it does not
	 * support writing (i.e. it is readonly), and `undefined` if the editor does not
	 * know about the filesystem.</haxe_doc>
			</isWritableFileSystem>
			<delete set="method">
				<f a="uri:?options">
					<c path="vscode.Uri"/>
					<a>
						<useTrash>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</useTrash>
						<recursive>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</recursive>
					</a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Delete a file.
	 *
	 * @param uri The resource that is to be deleted.
	 * @param options Defines if trash can should be used and if deletion of folders is recursive</haxe_doc>
			</delete>
			<createDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Create a new directory (Note, that new files are created via `write`-calls).
	 *
	 * *Note* that missing directories are created automatically, e.g this call has
	 * `mkdirp` semantics.
	 *
	 * @param uri The uri of the new folder.</haxe_doc>
			</createDirectory>
			<copy set="method">
				<f a="source:target:?options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
</overwrite></a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Copy files or folders.
	 *
	 * @param source The existing file.
	 * @param target The destination location.
	 * @param options Defines if existing files should be overwritten.</haxe_doc>
			</copy>
		</a>
		<haxe_doc>* The file system interface exposes the editor's built-in and contributed
 * {@link FileSystemProvider file system providers}. It allows extensions to work
 * with files from the local disk as well as files from remote places, like the
 * remote extension host or ftp-servers.
 *
 * *Note* that an instance of this interface is available as {@linkcode workspace.fs}.</haxe_doc>
	</typedef>
	<abstract path="vscode.FileSystemReadDirectoryTuple" params="" file="src/vscode/FileSystem.hx" module="vscode.FileSystem">
		<this><c path="Array"><d/></c></this>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._FileSystem.FileSystemReadDirectoryTuple_Impl_" params="" file="src/vscode/FileSystem.hx" private="1" module="vscode.FileSystem" final="1">
	<name public="1" get="accessor" set="null" static="1"><c path="String"/></name>
	<type public="1" get="accessor" set="null" static="1"><x path="vscode.FileType"/></type>
	<_new public="1" get="inline" set="null" line="122" static="1">
		<f a="name:type">
			<c path="String"/>
			<x path="vscode.FileType"/>
			<x path="vscode.FileSystemReadDirectoryTuple"/>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_name get="inline" set="null" line="127" static="1"><f a="this">
	<c path="Array"><d/></c>
	<c path="String"/>
</f></get_name>
	<get_type get="inline" set="null" line="130" static="1"><f a="this">
	<c path="Array"><d/></c>
	<x path="vscode.FileType"/>
</f></get_type>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FileSystem.FileSystemReadDirectoryTuple_Impl_" params="" file="src/vscode/FileSystem.hx" private="1" module="vscode.FileSystem" final="1">
		<name public="1" get="accessor" set="null" static="1"><c path="String"/></name>
		<type public="1" get="accessor" set="null" static="1"><x path="vscode.FileType"/></type>
		<_new public="1" get="inline" set="null" line="122" static="1">
			<f a="name:type">
				<c path="String"/>
				<x path="vscode.FileType"/>
				<x path="vscode.FileSystemReadDirectoryTuple"/>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_name get="inline" set="null" line="127" static="1"><f a="this">
	<c path="Array"><d/></c>
	<c path="String"/>
</f></get_name>
		<get_type get="inline" set="null" line="130" static="1"><f a="this">
	<c path="Array"><d/></c>
	<x path="vscode.FileType"/>
</f></get_type>
		<meta>
			<m n=":keep"/>
			<m n=":dce"/>
			<m n=":dce"/>
		</meta>
	</class>
	<class path="vscode.FileSystemError" params="" file="src/vscode/FileSystemError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<FileNotFound public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file or folder wasn't found.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileNotFound>
		<FileExists public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file or folder already exists, e.g. when
	 * creating but not overwriting a file.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileExists>
		<FileNotADirectory public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file is not a folder.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileNotADirectory>
		<FileIsADirectory public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that a file is a folder.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</FileIsADirectory>
		<NoPermissions public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that an operation lacks required permissions.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</NoPermissions>
		<Unavailable public="1" set="method" static="1">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<c path="vscode.FileSystemError"/>
			</f>
			<haxe_doc>* Create an error to signal that the file system is unavailable or too busy to
	 * complete a request.
	 * @param messageOrUri Message or uri.</haxe_doc>
		</Unavailable>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A code that identifies this error.
	 *
	 * Possible values are names of errors, like {@linkcode FileSystemError.FileNotFound FileNotFound},
	 * or `Unknown` for unspecified errors.</haxe_doc>
		</code>
		<new public="1" set="method">
			<f a="?messageOrUri">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.Uri"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new filesystem error.
	 *
	 * @param messageOrUri Message or uri.</haxe_doc>
		</new>
		<haxe_doc>* A type that filesystem providers should use to signal errors.
 *
 * This class has factory methods for common error-cases, like `FileNotFound` when
 * a file or folder doesn't exist, use them like so: `throw vscode.FileSystemError.FileNotFound(someUri);`</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileSystemError"</e>
</m></meta>
	</class>
	<typedef path="vscode.FileSystemProvider" params="" file="src/vscode/FileSystemProvider.hx">
		<a>
			<writeFile set="method">
				<f a="uri:content:options">
					<c path="vscode.Uri"/>
					<c path="js.lib.Uint8Array"/>
					<a>
						<overwrite><x path="Bool"/></overwrite>
						<create><x path="Bool"/></create>
					</a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Write data to a file, replacing its entire contents.
	 *
	 * @param uri The uri of the file.
	 * @param content The new content of the file.
	 * @param options Defines if missing files should or must be created.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist and `create` is not set.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist and `create` is set, e.g. no mkdirp-logic required.
	 * @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists, `create` is set but `overwrite` is not set.
	 * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.</haxe_doc>
			</writeFile>
			<watch set="method">
				<f a="uri:options">
					<c path="vscode.Uri"/>
					<a>
						<recursive><x path="Bool"/></recursive>
						<excludes><c path="Array"><c path="String"/></c></excludes>
					</a>
					<c path="vscode.Disposable"/>
				</f>
				<haxe_doc>* Subscribes to file change events in the file or folder denoted by `uri`. For folders,
	 * the option `recursive` indicates whether subfolders, sub-subfolders, etc. should
	 * be watched for file changes as well. With `recursive: false`, only changes to the
	 * files that are direct children of the folder should trigger an event.
	 *
	 * The `excludes` array is used to indicate paths that should be excluded from file
	 * watching. It is typically derived from the `files.watcherExclude` setting that
	 * is configurable by the user. Each entry can be be:
	 * - the absolute path to exclude
	 * - a relative path to exclude (for example `build/output`)
	 * - a simple glob pattern (for example `**​/build`, `output/**`)
	 *
	 * It is the file system provider's job to call {@linkcode FileSystemProvider.onDidChangeFile onDidChangeFile}
	 * for every change given these rules. No event should be emitted for files that match any of the provided
	 * excludes.
	 *
	 * @param uri The uri of the file or folder to be watched.
	 * @param options Configures the watch.
	 * @returns A disposable that tells the provider to stop watching the `uri`.</haxe_doc>
			</watch>
			<stat set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.FileStat"/>
						<x path="js.lib.Thenable"><t path="vscode.FileStat"/></x>
					</x>
				</f>
				<haxe_doc>* Retrieve metadata about a file.
	 *
	 * Note that the metadata for symbolic links should be the metadata of the file they refer to.
	 * Still, the {@link FileType.SymbolicLink SymbolicLink}-type must be used in addition to the actual type, e.g.
	 * `FileType.SymbolicLink | FileType.Directory`.
	 *
	 * @param uri The uri of the file to retrieve metadata about.
	 * @returns The file metadata about the file.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.</haxe_doc>
			</stat>
			<rename set="method">
				<f a="oldUri:newUri:options">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
					<a><overwrite><x path="Bool"/></overwrite></a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Rename a file or folder.
	 *
	 * @param oldUri The existing file.
	 * @param newUri The new location.
	 * @param options Defines if existing files should be overwritten.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `oldUri` doesn't exist.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `newUri` doesn't exist, e.g. no mkdirp-logic required.
	 * @throws {@linkcode FileSystemError.FileExists FileExists} when `newUri` exists and when the `overwrite` option is not `true`.
	 * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.</haxe_doc>
			</rename>
			<readFile set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<c path="js.lib.Uint8Array"/>
						<x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x>
					</x>
				</f>
				<haxe_doc>* Read the entire contents of a file.
	 *
	 * @param uri The uri of the file.
	 * @returns An array of bytes or a thenable that resolves to such.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.</haxe_doc>
			</readFile>
			<readDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<c path="Array"><x path="vscode.FileSystemReadDirectoryTuple"/></c>
						<x path="js.lib.Thenable"><c path="Array"><x path="vscode.FileSystemReadDirectoryTuple"/></c></x>
					</x>
				</f>
				<haxe_doc>* Retrieve all entries of a {@link FileType.Directory directory}.
	 *
	 * @param uri The uri of the folder.
	 * @returns An array of name/type-tuples or a thenable that resolves to such.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.</haxe_doc>
			</readDirectory>
			<onDidChangeFile set="null">
				<t path="vscode.Event"><c path="Array"><t path="vscode.FileChangeEvent"/></c></t>
				<haxe_doc>* An event to signal that a resource has been created, changed, or deleted. This
	 * event should fire for resources that are being {@link FileSystemProvider.watch watched}
	 * by clients of this provider.
	 *
	 * *Note:* It is important that the metadata of the file that changed provides an
	 * updated `mtime` that advanced from the previous value in the {@link FileStat stat} and a
	 * correct `size` value. Otherwise there may be optimizations in place that will not show
	 * the change in an editor for example.</haxe_doc>
			</onDidChangeFile>
			<delete set="method">
				<f a="uri:options">
					<c path="vscode.Uri"/>
					<a><recursive><x path="Bool"/></recursive></a>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Delete a file.
	 *
	 * @param uri The resource that is to be deleted.
	 * @param options Defines if deletion of folders is recursive.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `uri` doesn't exist.
	 * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.</haxe_doc>
			</delete>
			<createDirectory set="method">
				<f a="uri">
					<c path="vscode.Uri"/>
					<x path="haxe.extern.EitherType">
						<x path="Void"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</x>
				</f>
				<haxe_doc>* Create a new directory (Note, that new files are created via `write`-calls).
	 *
	 * @param uri The uri of the new folder.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when the parent of `uri` doesn't exist, e.g. no mkdirp-logic required.
	 * @throws {@linkcode FileSystemError.FileExists FileExists} when `uri` already exists.
	 * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.</haxe_doc>
			</createDirectory>
			<copy>
				<x path="Null"><f a="source:destination:options">
	<c path="vscode.Uri"/>
	<c path="vscode.Uri"/>
	<a><overwrite><x path="Bool"/></overwrite></a>
	<x path="haxe.extern.EitherType">
		<x path="Void"/>
		<x path="js.lib.Thenable"><x path="Void"/></x>
	</x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Copy files or folders. Implementing this function is optional but it will speedup
	 * the copy operation.
	 *
	 * @param source The existing file.
	 * @param destination The destination location.
	 * @param options Defines if existing files should be overwritten.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when `source` doesn't exist.
	 * @throws {@linkcode FileSystemError.FileNotFound FileNotFound} when parent of `destination` doesn't exist, e.g. no mkdirp-logic required.
	 * @throws {@linkcode FileSystemError.FileExists FileExists} when `destination` exists and when the `overwrite` option is not `true`.
	 * @throws {@linkcode FileSystemError.NoPermissions NoPermissions} when permissions aren't sufficient.</haxe_doc>
			</copy>
		</a>
		<haxe_doc><![CDATA[* The filesystem provider defines what the editor needs to read, write, discover,
 * and to manage files and folders. It allows extensions to serve files from remote places,
 * like ftp-servers, and to seamlessly integrate those into the editor.
 *
 * * *Note 1:* The filesystem provider API works with {@link Uri uris} and assumes hierarchical
 * paths, e.g. `foo:/my/path` is a child of `foo:/my/` and a parent of `foo:/my/path/deeper`.
 * * *Note 2:* There is an activation event `onFileSystem:<scheme>` that fires when a file
 * or folder is being accessed.
 * * *Note 3:* The word 'file' is often used to denote all {@link FileType kinds} of files, e.g.
 * folders, symbolic links, and regular files.]]></haxe_doc>
	</typedef>
	<class path="vscode.FileSystemWatcher" params="" file="src/vscode/FileSystemWatcher.hx" extern="1">
		<extends path="vscode.Disposable"/>
		<ignoreCreateEvents public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores creation file system events.</haxe_doc>
		</ignoreCreateEvents>
		<ignoreChangeEvents public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores change file system events.</haxe_doc>
		</ignoreChangeEvents>
		<ignoreDeleteEvents public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* true if this file system watcher has been created such that
	 * it ignores delete file system events.</haxe_doc>
		</ignoreDeleteEvents>
		<onDidCreate public="1" set="null">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder creation.</haxe_doc>
		</onDidCreate>
		<onDidChange public="1" set="null">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder change.</haxe_doc>
		</onDidChange>
		<onDidDelete public="1" set="null">
			<t path="vscode.Event"><c path="vscode.Uri"/></t>
			<haxe_doc>* An event which fires on file/folder deletion.</haxe_doc>
		</onDidDelete>
		<haxe_doc>* A file system watcher notifies about changes to files and folders
 * on disk or from other {@link FileSystemProvider FileSystemProviders}.
 *
 * To get an instance of a `FileSystemWatcher` use
 * {@link workspace.createFileSystemWatcher createFileSystemWatcher}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileSystemWatcher"</e>
</m></meta>
	</class>
	<abstract path="vscode.FileType" params="" file="src/vscode/FileType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enumeration of file types. The types `File` and `Directory` can also be
 * a symbolic links, in that case use `FileType.File | FileType.SymbolicLink` and
 * `FileType.Directory | FileType.SymbolicLink`.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileType"</e>
			</m>
		</meta>
		<impl><class path="vscode._FileType.FileType_Impl_" params="" file="src/vscode/FileType.hx" private="1" module="vscode.FileType" extern="1" final="1">
	<Unknown public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The file type is unknown.</haxe_doc>
	</Unknown>
	<File public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A regular file.</haxe_doc>
	</File>
	<Directory public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A directory.</haxe_doc>
	</Directory>
	<SymbolicLink public="1" set="null" static="1">
		<x path="vscode.FileType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A symbolic link to a file.</haxe_doc>
	</SymbolicLink>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FileType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FileType.FileType_Impl_" params="" file="src/vscode/FileType.hx" private="1" module="vscode.FileType" extern="1" final="1">
		<Unknown public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The file type is unknown.</haxe_doc>
		</Unknown>
		<File public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A regular file.</haxe_doc>
		</File>
		<Directory public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A directory.</haxe_doc>
		</Directory>
		<SymbolicLink public="1" set="null" static="1">
			<x path="vscode.FileType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A symbolic link to a file.</haxe_doc>
		</SymbolicLink>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FileType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.FileWillCreateEvent" params="" file="src/vscode/FileWillCreateEvent.hx" extern="1">
		<token public="1" set="null">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* A cancellation token.</haxe_doc>
		</token>
		<files public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
			<haxe_doc>* The files that are going to be created.</haxe_doc>
		</files>
		<waitUntil public="1" set="method">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
			<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch.
	 *
	 * @param thenable A thenable that delays saving.</haxe_doc>
</waitUntil></overloads>
		</waitUntil>
		<haxe_doc>* An event that is fired when files are going to be created.
 *
 * To make modifications to the workspace before the files are created,
 * call the {@linkcode FileWillCreateEvent.waitUntil waitUntil}-function with a
 * thenable that resolves to a {@link WorkspaceEdit workspace edit}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileWillCreateEvent"</e>
</m></meta>
	</class>
	<class path="vscode.FileWillDeleteEvent" params="" file="src/vscode/FileWillDeleteEvent.hx" extern="1">
		<token public="1" set="null">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* A cancellation token.</haxe_doc>
		</token>
		<files public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x>
			<haxe_doc>* The files that are going to be deleted.</haxe_doc>
		</files>
		<waitUntil public="1" set="method">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
			<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch.
	 *
	 * @param thenable A thenable that delays saving.</haxe_doc>
</waitUntil></overloads>
		</waitUntil>
		<haxe_doc>* An event that is fired when files are going to be deleted.
 *
 * To make modifications to the workspace before the files are deleted,
 * call the {@link FileWillCreateEvent.waitUntil `waitUntil`}-function with a
 * thenable that resolves to a {@link WorkspaceEdit workspace edit}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileWillDeleteEvent"</e>
</m></meta>
	</class>
	<class path="vscode.FileWillRenameEvent" params="" file="src/vscode/FileWillRenameEvent.hx" extern="1">
		<token public="1" set="null">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* A cancellation token.</haxe_doc>
		</token>
		<files public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><a>
	<oldUri final="1" set="null">
		<c path="vscode.Uri"/>
		<haxe_doc>* The old uri of a file.</haxe_doc>
	</oldUri>
	<newUri final="1" set="null">
		<c path="vscode.Uri"/>
		<haxe_doc>* The new uri of a file.</haxe_doc>
	</newUri>
</a></x>
			<haxe_doc>* The files that are going to be renamed.</haxe_doc>
		</files>
		<waitUntil public="1" set="method">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Allows to pause the event and to apply a {@link WorkspaceEdit workspace edit}.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillCreateFiles(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that delays saving.]]></haxe_doc>
			<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Allows to pause the event until the provided thenable resolves.
	 *
	 * *Note:* This function can only be called during event dispatch.
	 *
	 * @param thenable A thenable that delays saving.</haxe_doc>
</waitUntil></overloads>
		</waitUntil>
		<haxe_doc>* An event that is fired when files are going to be renamed.
 *
 * To make modifications to the workspace before the files are renamed,
 * call the {@link FileWillCreateEvent.waitUntil `waitUntil`}-function with a
 * thenable that resolves to a {@link WorkspaceEdit workspace edit}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FileWillRenameEvent"</e>
</m></meta>
	</class>
	<typedef path="vscode.FoldingContext" params="" file="src/vscode/FoldingContext.hx">
		<a/>
		<haxe_doc>* Folding context (for future use)</haxe_doc>
	</typedef>
	<class path="vscode.FoldingRange" params="" file="src/vscode/FoldingRange.hx" extern="1">
		<start public="1">
			<x path="Int"/>
			<haxe_doc>* The zero-based start line of the range to fold. The folded area starts after the line's last character.
	 * To be valid, the end must be zero or larger and smaller than the number of lines in the document.</haxe_doc>
		</start>
		<end public="1">
			<x path="Int"/>
			<haxe_doc>* The zero-based end line of the range to fold. The folded area ends with the line's last character.
	 * To be valid, the end must be zero or larger and smaller than the number of lines in the document.</haxe_doc>
		</end>
		<kind public="1">
			<x path="Null"><x path="vscode.FoldingRangeKind"/></x>
			<haxe_doc>* Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or
	 * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands
	 * like 'Fold all comments'. See
	 * {@link FoldingRangeKind} for an enumeration of all kinds.
	 * If not set, the range is originated from a syntax element.</haxe_doc>
		</kind>
		<new public="1" set="method">
			<f a="start:end:?kind">
				<x path="Int"/>
				<x path="Int"/>
				<x path="vscode.FoldingRangeKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new folding range.
	 *
	 * @param start The start line of the folded range.
	 * @param end The end line of the folded range.
	 * @param kind The kind of the folding range.</haxe_doc>
		</new>
		<haxe_doc>* A line based folding range. To be valid, start and end line must be bigger than zero and smaller than the number of lines in the document.
 * Invalid ranges will be ignored.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FoldingRange"</e>
</m></meta>
	</class>
	<abstract path="vscode.FoldingRangeKind" params="" file="src/vscode/FoldingRangeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* An enumeration of specific folding range kinds. The kind is an optional field of a {@link FoldingRange}
 * and is used to distinguish specific folding ranges such as ranges originated from comments. The kind is used by commands like
 * `Fold all comments` or `Fold all regions`.
 * If the kind is not set on the range, the range originated from a syntax element other than comments, imports or region markers.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FoldingRangeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._FoldingRangeKind.FoldingRangeKind_Impl_" params="" file="src/vscode/FoldingRangeKind.hx" private="1" module="vscode.FoldingRangeKind" extern="1" final="1">
	<Comment public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Kind for folding range representing a comment.</haxe_doc>
	</Comment>
	<Imports public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Kind for folding range representing a import.</haxe_doc>
	</Imports>
	<Region public="1" set="null" static="1">
		<x path="vscode.FoldingRangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.</haxe_doc>
	</Region>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"FoldingRangeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._FoldingRangeKind.FoldingRangeKind_Impl_" params="" file="src/vscode/FoldingRangeKind.hx" private="1" module="vscode.FoldingRangeKind" extern="1" final="1">
		<Comment public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Kind for folding range representing a comment.</haxe_doc>
		</Comment>
		<Imports public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Kind for folding range representing a import.</haxe_doc>
		</Imports>
		<Region public="1" set="null" static="1">
			<x path="vscode.FoldingRangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Kind for folding range representing regions originating from folding markers like `#region` and `#endregion`.</haxe_doc>
		</Region>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"FoldingRangeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.FoldingRangeProvider" params="" file="src/vscode/FoldingRangeProvider.hx">
		<a>
			<provideFoldingRanges set="method">
				<f a="document:context:token">
					<c path="vscode.TextDocument"/>
					<t path="vscode.FoldingContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.FoldingRange"/></c></t>
				</f>
				<haxe_doc>* Returns a list of folding ranges or null and undefined if the provider
	 * does not want to participate or was cancelled.
	 * @param document The document in which the command was invoked.
	 * @param context Additional context information (for future use)
	 * @param token A cancellation token.</haxe_doc>
			</provideFoldingRanges>
			<onDidChangeFoldingRanges>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that the folding ranges from this provider have changed.</haxe_doc>
			</onDidChangeFoldingRanges>
		</a>
		<haxe_doc>* The folding range provider interface defines the contract between extensions and
 * [Folding](https://code.visualstudio.com/docs/editor/codebasics#_folding) in the editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.FormattingOptions" params="" file="src/vscode/FormattingOptions.hx">
		<a>
			<tabSize>
				<x path="Int"/>
				<haxe_doc>* Size of a tab in spaces.</haxe_doc>
			</tabSize>
			<insertSpaces>
				<x path="Bool"/>
				<haxe_doc>* Prefer spaces over tabs.</haxe_doc>
			</insertSpaces>
		</a>
		<haxe_doc>* Value-object describing what options formatting should use.</haxe_doc>
	</typedef>
	<class path="vscode.FunctionBreakpoint" params="" file="src/vscode/FunctionBreakpoint.hx" extern="1">
		<extends path="vscode.Breakpoint"/>
		<functionName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The name of the function to which this breakpoint is attached.</haxe_doc>
		</functionName>
		<new public="1" set="method">
			<f a="functionName:?enabled:?condition:?hitCondition:?logMessage">
				<c path="String"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new function breakpoint.</haxe_doc>
		</new>
		<haxe_doc>* A breakpoint specified by a function name.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"FunctionBreakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.GlobPattern" params="" file="src/vscode/GlobPattern.hx">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<c path="vscode.RelativePattern"/>
		</x>
		<haxe_doc>* A file glob pattern to match file paths against. This can either be a glob pattern string
 * (like `**​/*.{ts,js}` or `*.{ts,js}`) or a {@link RelativePattern relative pattern}.
 *
 * Glob patterns can have the following syntax:
 * * `*` to match zero or more characters in a path segment
 * * `?` to match on one character in a path segment
 * * `**` to match any number of path segments, including none
 * * `{}` to group conditions (e.g. `**​/*.{ts,js}` matches all TypeScript and JavaScript files)
 * * `[]` to declare a range of characters to match in a path segment (e.g., `example.[0-9]` to match on `example.0`, `example.1`, …)
 * * `[!...]` to negate a range of characters to match in a path segment (e.g., `example.[!0-9]` to match on `example.a`, `example.b`, but not `example.0`)
 *
 * Note: a backslash (`\`) is not valid within a glob pattern. If you have an existing file
 * path to match against, consider to use the {@link RelativePattern relative pattern} support
 * that takes care of converting any backslash into slash. Otherwise, make sure to convert
 * any backslash to slash when creating the glob pattern.</haxe_doc>
	</typedef>
	<typedef path="vscode.GlobalEnvironmentVariableCollection" params="" file="src/vscode/GlobalEnvironmentVariableCollection.hx">
		<a>
			<replace set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replace an environment variable with a value.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to replace.
	 * @param value The value to replace the variable with.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</replace>
			<prepend set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Prepend a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to prepend.
	 * @param value The value to prepend to the variable.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</prepend>
			<persistent>
				<x path="Bool"/>
				<haxe_doc>* Whether the collection should be cached for the workspace and applied to the terminal
	 * across window reloads. When true the collection will be active immediately such when the
	 * window reloads. Additionally, this API will return the cached version if it exists. The
	 * collection will be invalidated when the extension is uninstalled or when the collection
	 * is cleared. Defaults to true.</haxe_doc>
			</persistent>
			<getScoped set="method">
				<f a="scope">
					<t path="vscode.EnvironmentVariableScope"/>
					<t path="vscode.EnvironmentVariableCollection"/>
				</f>
				<haxe_doc>* Gets scope-specific environment variable collection for the extension. This enables alterations to
	 * terminal environment variables solely within the designated scope, and is applied in addition to (and
	 * after) the global collection.
	 *
	 * Each object obtained through this method is isolated and does not impact objects for other scopes,
	 * including the global collection.
	 *
	 * @param scope The scope to which the environment variable collection applies to.
	 *
	 * If a scope parameter is omitted, collection applicable to all relevant scopes for that parameter is
	 * returned. For instance, if the 'workspaceFolder' parameter is not specified, the collection that applies
	 * across all workspace folders will be returned.
	 *
	 * @returns Environment variable collection for the passed in scope.</haxe_doc>
			</getScoped>
			<get set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Null"><t path="vscode.EnvironmentVariableMutator"/></x>
				</f>
				<haxe_doc>* Gets the mutator that this collection applies to a variable, if any.
	 *
	 * @param variable The variable to get the mutator for.</haxe_doc>
			</get>
			<forEach set="method">
				<f a="callback:?thisArg">
					<f a="variable:mutator:collection">
						<c path="String"/>
						<t path="vscode.EnvironmentVariableMutator"/>
						<t path="vscode.EnvironmentVariableCollection"/>
						<x path="Any"/>
					</f>
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Iterate over each mutator in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
			</forEach>
			<delete set="method">
				<f a="variable">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Deletes this collection's mutator for a variable.
	 *
	 * @param variable The variable to delete the mutator for.</haxe_doc>
			</delete>
			<clear set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Clears all mutators from this collection.</haxe_doc>
			</clear>
			<append set="method">
				<f a="variable:value">
					<c path="String"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Append a value to an environment variable.
	 *
	 * Note that an extension can only make a single change to any one variable, so this will
	 * overwrite any previous calls to replace, append or prepend.
	 *
	 * @param variable The variable to append to.
	 * @param value The value to append to the variable.
	 * @param options Options applied to the mutator, when no options are provided this will
	 * default to `{ applyAtProcessCreation: true }`.</haxe_doc>
			</append>
		</a>
		<haxe_doc>* Value-object describing what options formatting should use.</haxe_doc>
	</typedef>
	<class path="vscode.Hover" params="" file="src/vscode/Hover.hx" extern="1">
		<contents public="1">
			<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.MarkdownString"/>
	<t path="vscode.MarkedString"/>
</x></c>
			<haxe_doc>* The contents of this hover.</haxe_doc>
		</contents>
		<range public="1">
			<x path="Null"><c path="vscode.Range"/></x>
			<haxe_doc>* The range to which this hover applies. When missing, the
	 * editor will use the range at the current position or the
	 * current position itself.</haxe_doc>
		</range>
		<new public="1" set="method">
			<f a="contents:?range">
				<x path="haxe.extern.EitherType">
					<c path="vscode.MarkdownString"/>
					<x path="haxe.extern.EitherType">
						<t path="vscode.MarkedString"/>
						<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.MarkdownString"/>
	<t path="vscode.MarkedString"/>
</x></c>
					</x>
				</x>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new hover object.
	 *
	 * @param contents The contents of the hover.
	 * @param range The range to which the hover applies.</haxe_doc>
		</new>
		<haxe_doc>* A hover represents additional information for a symbol or word. Hovers are
 * rendered in a tooltip-like widget.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Hover"</e>
</m></meta>
	</class>
	<typedef path="vscode.HoverProvider" params="" file="src/vscode/HoverProvider.hx">
		<a><provideHover set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.Hover"/></t>
	</f>
	<haxe_doc>* Provide a hover for the given position and document. Multiple hovers at the same
	 * position will be merged by the editor. A hover can have a range which defaults
	 * to the word range at the position when omitted.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A hover or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideHover></a>
		<haxe_doc>* The hover provider interface defines the contract between extensions and
 * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.IconPath" params="" file="src/vscode/IconPath.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.Uri"/>
			<x path="haxe.extern.EitherType">
				<a>
					<light>
						<c path="vscode.Uri"/>
						<haxe_doc>* The icon path for the light theme.</haxe_doc>
					</light>
					<dark>
						<c path="vscode.Uri"/>
						<haxe_doc>* The icon path for the dark theme.</haxe_doc>
					</dark>
				</a>
				<c path="vscode.ThemeIcon"/>
			</x>
		</x>
		<haxe_doc>* Represents an icon in the UI. This is either an uri, separate uris for the light- and dark-themes,
 * or a {@link ThemeIcon theme icon}.</haxe_doc>
	</typedef>
	<typedef path="vscode.ImplementationProvider" params="" file="src/vscode/ImplementationProvider.hx">
		<a><provideImplementation set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the implementations of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideImplementation></a>
		<haxe_doc>* The implementation provider interface defines the contract between extensions and
 * the go to implementation feature.</haxe_doc>
	</typedef>
	<abstract path="vscode.IndentAction" params="" file="src/vscode/IndentAction.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Describes what to do with the indentation when pressing Enter.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"IndentAction"</e>
			</m>
		</meta>
		<impl><class path="vscode._IndentAction.IndentAction_Impl_" params="" file="src/vscode/IndentAction.hx" private="1" module="vscode.IndentAction" extern="1" final="1">
	<None public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Insert new line and copy the previous line's indentation.</haxe_doc>
	</None>
	<Indent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Insert new line and indent once (relative to the previous line's indentation).</haxe_doc>
	</Indent>
	<IndentOutdent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Insert two new lines:
	 *  - the first one indented which will hold the cursor
	 *  - the second one at the same indentation level</haxe_doc>
	</IndentOutdent>
	<Outdent public="1" set="null" static="1">
		<x path="vscode.IndentAction"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Insert new line and outdent once (relative to the previous line's indentation).</haxe_doc>
	</Outdent>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"IndentAction"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._IndentAction.IndentAction_Impl_" params="" file="src/vscode/IndentAction.hx" private="1" module="vscode.IndentAction" extern="1" final="1">
		<None public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Insert new line and copy the previous line's indentation.</haxe_doc>
		</None>
		<Indent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Insert new line and indent once (relative to the previous line's indentation).</haxe_doc>
		</Indent>
		<IndentOutdent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Insert two new lines:
	 *  - the first one indented which will hold the cursor
	 *  - the second one at the same indentation level</haxe_doc>
		</IndentOutdent>
		<Outdent public="1" set="null" static="1">
			<x path="vscode.IndentAction"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Insert new line and outdent once (relative to the previous line's indentation).</haxe_doc>
		</Outdent>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"IndentAction"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.IndentationRule" params="" file="src/vscode/IndentationRule.hx">
		<a>
			<unIndentedLinePattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.</haxe_doc>
			</unIndentedLinePattern>
			<indentNextLinePattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If a line matches this pattern, then **only the next line** after it should be indented once.</haxe_doc>
			</indentNextLinePattern>
			<increaseIndentPattern>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).</haxe_doc>
			</increaseIndentPattern>
			<decreaseIndentPattern>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).</haxe_doc>
			</decreaseIndentPattern>
		</a>
		<haxe_doc>* Describes indentation rules for a language.</haxe_doc>
	</typedef>
	<class path="vscode.InlayHint" params="" file="src/vscode/InlayHint.hx" extern="1">
		<position public="1">
			<c path="vscode.Position"/>
			<haxe_doc>* The position of this hint.</haxe_doc>
		</position>
		<label public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="Array"><c path="vscode.InlayHintLabelPart"/></c>
			</x>
			<haxe_doc>* The label of this hint. A human readable string or an array of {@link InlayHintLabelPart label parts}.
	 *
	 * *Note* that neither the string nor the label part can be empty.</haxe_doc>
		</label>
		<tooltip public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The tooltip text when you hover over this item.
	 *
	 * *Note* that this property can be set late during
	 * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.</haxe_doc>
		</tooltip>
		<kind public="1">
			<x path="Null"><x path="vscode.InlayHintKind"/></x>
			<haxe_doc>* The kind of this hint. The inlay hint kind defines the appearance of this inlay hint.</haxe_doc>
		</kind>
		<textEdits public="1">
			<x path="Null"><c path="Array"><c path="vscode.TextEdit"/></c></x>
			<haxe_doc>* Optional {@link TextEdit text edits} that are performed when accepting this inlay hint. The default
	 * gesture for accepting an inlay hint is the double click.
	 *
	 * *Note* that edits are expected to change the document so that the inlay hint (or its nearest variant) is
	 * now part of the document and the inlay hint itself is now obsolete.
	 *
	 * *Note* that this property can be set late during
	 * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.</haxe_doc>
		</textEdits>
		<paddingLeft public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Render padding before the hint. Padding will use the editor's background color,
	 * not the background color of the hint itself. That means padding can be used to visually
	 * align/separate an inlay hint.</haxe_doc>
		</paddingLeft>
		<paddingRight public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Render padding after the hint. Padding will use the editor's background color,
	 * not the background color of the hint itself. That means padding can be used to visually
	 * align/separate an inlay hint.</haxe_doc>
		</paddingRight>
		<new public="1" set="method">
			<f a="position:label:?kind">
				<c path="vscode.Position"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="vscode.InlayHintLabelPart"/></c>
				</x>
				<x path="vscode.InlayHintKind"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new inlay hint.
	 *
	 * @param position The position of the hint.
	 * @param label The label of the hint.
	 * @param kind The {@link InlayHintKind kind} of the hint.</haxe_doc>
		</new>
		<haxe_doc>* Inlay hint information.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlayHint"</e>
</m></meta>
	</class>
	<abstract path="vscode.InlayHintKind" params="" file="src/vscode/InlayHintKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Inlay hint kinds.
 *
 * The kind of an inline hint defines its appearance, e.g the corresponding foreground and background colors are being
 * used.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InlayHintKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._InlayHintKind.InlayHintKind_Impl_" params="" file="src/vscode/InlayHintKind.hx" private="1" module="vscode.InlayHintKind" extern="1" final="1">
	<Type public="1" set="null" static="1">
		<x path="vscode.InlayHintKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* An inlay hint that for a type annotation.</haxe_doc>
	</Type>
	<Parameter public="1" set="null" static="1">
		<x path="vscode.InlayHintKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* An inlay hint that is for a parameter.</haxe_doc>
	</Parameter>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"InlayHintKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._InlayHintKind.InlayHintKind_Impl_" params="" file="src/vscode/InlayHintKind.hx" private="1" module="vscode.InlayHintKind" extern="1" final="1">
		<Type public="1" set="null" static="1">
			<x path="vscode.InlayHintKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* An inlay hint that for a type annotation.</haxe_doc>
		</Type>
		<Parameter public="1" set="null" static="1">
			<x path="vscode.InlayHintKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* An inlay hint that is for a parameter.</haxe_doc>
		</Parameter>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InlayHintKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.InlayHintLabelPart" params="" file="src/vscode/InlayHintLabelPart.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The value of this label part.</haxe_doc>
		</value>
		<tooltip public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The tooltip text when you hover over this label part.
	 *
	 * *Note* that this property can be set late during
	 * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.</haxe_doc>
		</tooltip>
		<location public="1">
			<x path="Null"><c path="vscode.Location"/></x>
			<haxe_doc>* An optional {@link Location source code location} that represents this label
	 * part.
	 *
	 * The editor will use this location for the hover and for code navigation features: This
	 * part will become a clickable link that resolves to the definition of the symbol at the
	 * given location (not necessarily the location itself), it shows the hover that shows at
	 * the given location, and it shows a context menu with further code navigation commands.
	 *
	 * *Note* that this property can be set late during
	 * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.</haxe_doc>
		</location>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* An optional command for this label part.
	 *
	 * The editor renders parts with commands as clickable links. The command is added to the context menu
	 * when a label part defines {@link InlayHintLabelPart.location location} and {@link InlayHintLabelPart.command command} .
	 *
	 * *Note* that this property can be set late during
	 * {@link InlayHintsProvider.resolveInlayHint resolving} of inlay hints.</haxe_doc>
		</command>
		<new public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new inlay hint label part.
	 *
	 * @param value The value of the part.</haxe_doc>
		</new>
		<haxe_doc>* An inlay hint label part allows for interactive and composite labels of inlay hints.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlayHintLabelPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.InlayHintsProvider" params="T" file="src/vscode/InlayHintsProvider.hx">
		<a>
			<resolveInlayHint set="method">
				<f a="hint:token">
					<c path="vscode.InlayHintsProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.InlayHintsProvider.T"/></t>
				</f>
				<haxe_doc>* Given an inlay hint fill in {@link InlayHint.tooltip tooltip}, {@link InlayHint.textEdits text edits},
	 * or complete label {@link InlayHintLabelPart parts}.
	 *
	 * *Note* that the editor will resolve an inlay hint at most once.
	 *
	 * @param hint An inlay hint.
	 * @param token A cancellation token.
	 * @returns The resolved inlay hint or a thenable that resolves to such. It is OK to return the given `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveInlayHint>
			<provideInlayHints set="method">
				<f a="document:range:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Range"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.InlayHintsProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provide inlay hints for the given range and document.
	 *
	 * *Note* that inlay hints that are not {@link Range.contains contained} by the given range are ignored.
	 *
	 * @param document The document in which the command was invoked.
	 * @param range The range for which inlay hints should be computed.
	 * @param token A cancellation token.
	 * @returns An array of inlay hints or a thenable that resolves to such.</haxe_doc>
			</provideInlayHints>
			<onDidChangeInlayHints>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that inlay hints from this provider have changed.</haxe_doc>
			</onDidChangeInlayHints>
		</a>
		<haxe_doc>* The inlay hints provider interface defines the contract between extensions and
 * the inlay hints feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.InlineCompletionContext" params="" file="src/vscode/InlineCompletionContext.hx">
		<a>
			<triggerKind set="null">
				<x path="vscode.InlineCompletionTriggerKind"/>
				<haxe_doc>* Describes how the inline completion was triggered.</haxe_doc>
			</triggerKind>
			<selectedCompletionInfo set="null">
				<x path="Null"><t path="vscode.SelectedCompletionInfo"/></x>
				<haxe_doc>* Provides information about the currently selected item in the autocomplete widget if it is visible.
	 *
	 * If set, provided inline completions must extend the text of the selected item
	 * and use the same range, otherwise they are not shown as preview.
	 * As an example, if the document text is `console.` and the selected item is `.log` replacing the `.` in the document,
	 * the inline completion must also replace `.` and start with `.log`, for example `.log()`.
	 *
	 * Inline completion providers are requested again whenever the selected item changes.</haxe_doc>
			</selectedCompletionInfo>
		</a>
		<haxe_doc>* Provides information about the context in which an inline completion was requested.</haxe_doc>
	</typedef>
	<class path="vscode.InlineCompletionItem" params="" file="src/vscode/InlineCompletionItem.hx" extern="1">
		<insertText public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="vscode.SnippetString"/>
			</x>
			<haxe_doc>* The text to replace the range with. Must be set.
	 * Is used both for the preview and the accept operation.</haxe_doc>
		</insertText>
		<filterText public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A text that is used to decide if this inline completion should be shown. When `falsy`
	 * the {@link InlineCompletionItem.insertText} is used.
	 *
	 * An inline completion is shown if the text to replace is a prefix of the filter text.</haxe_doc>
		</filterText>
		<range public="1">
			<x path="Null"><c path="vscode.Range"/></x>
			<haxe_doc>* The range to replace.
	 * Must begin and end on the same line.
	 *
	 * Prefer replacements over insertions to provide a better experience when the user deletes typed text.</haxe_doc>
		</range>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* An optional {@link Command} that is executed *after* inserting this completion.</haxe_doc>
		</command>
		<new public="1" set="method">
			<f a="insertText:?range:?command">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.SnippetString"/>
				</x>
				<c path="vscode.Range"/>
				<x path="Null"><t path="vscode.Command"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new inline completion item.
	 *
	 * @param insertText The text to replace the range with.
	 * @param range The range to replace. If not set, the word at the requested position will be used.
	 * @param command An optional {@link Command} that is executed *after* inserting this completion.</haxe_doc>
		</new>
		<haxe_doc>* An inline completion item represents a text snippet that is proposed inline to complete text that is being typed.
 *
 * @see {@link InlineCompletionItemProvider.provideInlineCompletionItems}</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineCompletionItem"</e>
</m></meta>
	</class>
	<typedef path="vscode.InlineCompletionItemProvider" params="" file="src/vscode/InlineCompletionItemProvider.hx">
		<a><provideInlineCompletionItems set="method">
	<f a="document:position:context:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.InlineCompletionContext"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="vscode.InlineCompletionItem"/></c>
	<c path="vscode.InlineCompletionList"/>
</x></t>
	</f>
	<haxe_doc>* Provides inline completion items for the given position and document.
	 * If inline completions are enabled, this method will be called whenever the user stopped typing.
	 * It will also be called when the user explicitly triggers inline completions or explicitly asks for the next or previous inline completion.
	 * In that case, all available inline completions should be returned.
	 * `context.triggerKind` can be used to distinguish between these scenarios.
	 *
	 * @param document The document inline completions are requested for.
	 * @param position The position inline completions are requested for.
	 * @param context A context object with additional information.
	 * @param token A cancellation token.
	 * @returns An array of completion items or a thenable that resolves to an array of completion items.</haxe_doc>
</provideInlineCompletionItems></a>
		<haxe_doc>* The inline completion item provider interface defines the contract between extensions and
 * the inline completion feature.
 *
 * Providers are asked for completions either explicitly by a user gesture or implicitly when typing.</haxe_doc>
	</typedef>
	<class path="vscode.InlineCompletionList" params="" file="src/vscode/InlineCompletionList.hx" extern="1">
		<items public="1">
			<c path="Array"><c path="vscode.InlineCompletionItem"/></c>
			<haxe_doc>* The inline completion items.</haxe_doc>
		</items>
		<new public="1" set="method">
			<f a="items">
				<c path="Array"><c path="vscode.InlineCompletionItem"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new list of inline completion items.</haxe_doc>
		</new>
		<haxe_doc>* Represents a collection of {@link InlineCompletionItem inline completion items} to be presented
 * in the editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineCompletionList"</e>
</m></meta>
	</class>
	<abstract path="vscode.InlineCompletionTriggerKind" params="" file="src/vscode/InlineCompletionTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InlineCompletionTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._InlineCompletionTriggerKind.InlineCompletionTriggerKind_Impl_" params="" file="src/vscode/InlineCompletionTriggerKind.hx" private="1" module="vscode.InlineCompletionTriggerKind" extern="1" final="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.InlineCompletionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Completion was triggered explicitly by a user gesture.
	 * Return multiple completion items to enable cycling through them.</haxe_doc>
	</Invoke>
	<Automatic public="1" set="null" static="1">
		<x path="vscode.InlineCompletionTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Completion was triggered automatically while editing.
	 * It is sufficient to return a single completion item in this case.</haxe_doc>
	</Automatic>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"InlineCompletionTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._InlineCompletionTriggerKind.InlineCompletionTriggerKind_Impl_" params="" file="src/vscode/InlineCompletionTriggerKind.hx" private="1" module="vscode.InlineCompletionTriggerKind" extern="1" final="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.InlineCompletionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Completion was triggered explicitly by a user gesture.
	 * Return multiple completion items to enable cycling through them.</haxe_doc>
		</Invoke>
		<Automatic public="1" set="null" static="1">
			<x path="vscode.InlineCompletionTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Completion was triggered automatically while editing.
	 * It is sufficient to return a single completion item in this case.</haxe_doc>
		</Automatic>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InlineCompletionTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.InlineValue" params="" file="src/vscode/InlineValue.hx">
		<from>
			<icast><c path="vscode.InlineValueText"/></icast>
			<icast><c path="vscode.InlineValueVariableLookup"/></icast>
			<icast><c path="vscode.InlineValueEvaluatableExpression"/></icast>
		</from>
		<this><d/></this>
		<to>
			<icast><c path="vscode.InlineValueText"/></icast>
			<icast><c path="vscode.InlineValueVariableLookup"/></icast>
			<icast><c path="vscode.InlineValueEvaluatableExpression"/></icast>
		</to>
		<haxe_doc>* Inline value information can be provided by different means:
 * - directly as a text value (class InlineValueText).
 * - as a name to use for a variable lookup (class InlineValueVariableLookup)
 * - as an evaluatable expression (class InlineValueEvaluatableExpression)
 * The InlineValue types combines all inline value types into one type.</haxe_doc>
		<impl><class path="vscode._InlineValue.InlineValue_Impl_" params="" file="src/vscode/InlineValue.hx" private="1" module="vscode.InlineValue" extern="1" final="1"/></impl>
	</abstract>
	<class path="vscode._InlineValue.InlineValue_Impl_" params="" file="src/vscode/InlineValue.hx" private="1" module="vscode.InlineValue" extern="1" final="1"/>
	<typedef path="vscode.InlineValueContext" params="" file="src/vscode/InlineValueContext.hx">
		<a>
			<stoppedLocation set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The document range where execution has stopped.
	 * Typically the end position of the range denotes the line where the inline values are shown.</haxe_doc>
			</stoppedLocation>
			<frameId set="null">
				<x path="Int"/>
				<haxe_doc>* The stack frame (as a DAP Id) where the execution has stopped.</haxe_doc>
			</frameId>
		</a>
		<haxe_doc>* A value-object that contains contextual information when requesting inline values from a InlineValuesProvider.</haxe_doc>
	</typedef>
	<class path="vscode.InlineValueEvaluatableExpression" params="" file="src/vscode/InlineValueEvaluatableExpression.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.
	 * The range is used to extract the evaluatable expression from the underlying document.</haxe_doc>
		</range>
		<expression public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* If specified the expression overrides the extracted expression.</haxe_doc>
		</expression>
		<new public="1" set="method">
			<f a="range:?expression">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueEvaluatableExpression object.
	 *
	 * @param range The range in the underlying document from which the evaluatable expression is extracted.
	 * @param expression If specified overrides the extracted expression.</haxe_doc>
		</new>
		<haxe_doc>* Provide an inline value through an expression evaluation.
 * If only a range is specified, the expression will be extracted from the underlying document.
 * An optional expression can be used to override the extracted expression.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueEvaluatableExpression"</e>
</m></meta>
	</class>
	<class path="vscode.InlineValueText" params="" file="src/vscode/InlineValueText.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.</haxe_doc>
		</range>
		<text public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The text of the inline value.</haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="range:text">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueText object.
	 *
	 * @param range The document line where to show the inline value.
	 * @param text The value to be shown for the line.</haxe_doc>
		</new>
		<haxe_doc>* Provide inline value as text.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueText"</e>
</m></meta>
	</class>
	<class path="vscode.InlineValueVariableLookup" params="" file="src/vscode/InlineValueVariableLookup.hx" extern="1">
		<range public="1" set="null">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range for which the inline value applies.
	 * The range is used to extract the variable name from the underlying document.</haxe_doc>
		</range>
		<variableName public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* If specified the name of the variable to look up.</haxe_doc>
		</variableName>
		<caseSensitiveLookup public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* How to perform the lookup.</haxe_doc>
		</caseSensitiveLookup>
		<new public="1" set="method">
			<f a="range:?variableName:?caseSensitiveLookup">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new InlineValueVariableLookup object.
	 *
	 * @param range The document line where to show the inline value.
	 * @param variableName The name of the variable to look up.
	 * @param caseSensitiveLookup How to perform the lookup. If missing lookup is case sensitive.</haxe_doc>
		</new>
		<haxe_doc>* Provide inline value through a variable lookup.
 * If only a range is specified, the variable name will be extracted from the underlying document.
 * An optional variable name can be used to override the extracted name.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"InlineValueVariableLookup"</e>
</m></meta>
	</class>
	<typedef path="vscode.InlineValuesProvider" params="" file="src/vscode/InlineValuesProvider.hx">
		<a>
			<provideInlineValues set="method">
				<f a="document:viewPort:context:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Range"/>
					<t path="vscode.InlineValueContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><x path="vscode.InlineValue"/></c></t>
				</f>
				<haxe_doc>* Provide "inline value" information for a given document and range.
	 * The editor calls this method whenever debugging stops in the given document.
	 * The returned inline values information is rendered in the editor at the end of lines.
	 *
	 * @param document The document for which the inline values information is needed.
	 * @param viewPort The visible document range for which inline values should be computed.
	 * @param context A bag containing contextual information like the current location.
	 * @param token A cancellation token.
	 * @returns An array of InlineValueDescriptors or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideInlineValues>
			<onDidChangeInlineValues>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that inline values have changed.
	 * @see {@link EventEmitter}</haxe_doc>
			</onDidChangeInlineValues>
		</a>
		<haxe_doc>* The inline values provider interface defines the contract between extensions and the editor's debugger inline values feature.
 * In this contract the provider returns inline value information for a given document range
 * and the editor shows this information in the editor at the end of lines.</haxe_doc>
	</typedef>
	<typedef path="vscode.InputBox" params="" file="src/vscode/InputBox.hx">
		<a>
			<valueSelection>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="Array"><x path="Int"/></c></x></x>
				<haxe_doc>* Selection range in the input value. Defined as tuple of two number where the
	 * first is the inclusive start index and the second the exclusive end index. When `undefined` the whole
	 * pre-filled value will be selected, when empty (start equals end) only the cursor will be set,
	 * otherwise the defined range will be selected.
	 *
	 * This property does not get updated when the user types or makes a selection,
	 * but it can be updated by the extension.</haxe_doc>
			</valueSelection>
			<value>
				<c path="String"/>
				<haxe_doc>* Current input value.</haxe_doc>
			</value>
			<validationMessage>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.InputBoxValidationMessage"/>
</x></x>
				<haxe_doc>* An optional validation message indicating a problem with the current input value.
	 * By returning a string, the InputBox will use a default {@link InputBoxValidationSeverity} of Error.
	 * Returning undefined clears the validation message.</haxe_doc>
			</validationMessage>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an {@link QuickInput.onDidHide} event.</haxe_doc>
			</show>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional prompt text providing some ask or explanation to the user.</haxe_doc>
			</prompt>
			<placeholder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional placeholder in the filter text.</haxe_doc>
			</placeholder>
			<password>
				<x path="Bool"/>
				<haxe_doc>* If the input value should be hidden. Defaults to false.</haxe_doc>
			</password>
			<onDidTriggerButton set="null">
				<t path="vscode.Event"><t path="vscode.QuickInputButton"/></t>
				<haxe_doc>* An event signaling when a button was triggered.</haxe_doc>
			</onDidTriggerButton>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through {@link QuickInput.onDidHide}.
	 * (Examples include: an explicit call to {@link QuickInput.hide},
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<onDidChangeValue set="null">
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc>* An event signaling when the value has changed.</haxe_doc>
			</onDidChangeValue>
			<onDidAccept set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when the user indicated acceptance of the input value.</haxe_doc>
			</onDidAccept>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an {@link QuickInput.onDidHide}
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<buttons>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.QuickInputButton"/></x>
				<haxe_doc>* Buttons for actions in the UI.</haxe_doc>
			</buttons>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
		</a>
		<haxe_doc>* A concrete {@link QuickInput} to let the user input a text value.
 *
 * Note that in many cases the more convenient {@link window.showInputBox}
 * is easier to use. {@link window.createInputBox} should be used
 * when {@link window.showInputBox} does not offer the required flexibility.</haxe_doc>
	</typedef>
	<typedef path="vscode.InputBoxOptions" params="" file="src/vscode/InputBoxOptions.hx">
		<a>
			<valueSelection>
				<x path="Null"><c path="Array"><x path="Int"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Selection of the pre-filled {@linkcode InputBoxOptions.value value}. Defined as tuple of two number where the
	 * first is the inclusive start index and the second the exclusive end index. When `undefined` the whole
	 * pre-filled value will be selected, when empty (start equals end) only the cursor will be set,
	 * otherwise the defined range will be selected.</haxe_doc>
			</valueSelection>
			<value>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The value to pre-fill in the input box.</haxe_doc>
			</value>
			<validateInput>
				<x path="Null"><f a="">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<x path="Null"><c path="String"/></x>
		<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
	</x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional function that will be called to validate input and to give a hint
	 * to the user.
	 *
	 * @param value The current value of the input box.
	 * @returns Either a human-readable string which is presented as an error message or an {@link InputBoxValidationMessage}
	 *  which can provide a specific message severity. Return `undefined`, `null`, or the empty string when 'value' is valid.</haxe_doc>
			</validateInput>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string that represents the title of the input box.</haxe_doc>
			</title>
			<prompt>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The text to display underneath the input box.</haxe_doc>
			</prompt>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to type.</haxe_doc>
			</placeHolder>
			<password>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a password input is shown. Password input hides the typed text.</haxe_doc>
			</password>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the input box open when focus moves to another part of the editor or to another window.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
		</a>
		<haxe_doc>* Options to configure the behavior of the input box UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.InputBoxValidationMessage" params="" file="src/vscode/InputBoxValidationMessage.hx">
		<a>
			<severity set="null">
				<x path="vscode.InputBoxValidationSeverity"/>
				<haxe_doc>* The severity of the validation message.
	 * NOTE: When using `InputBoxValidationSeverity.Error`, the user will not be allowed to accept (hit ENTER) the input.
	 * `Info` and `Warning` will still allow the InputBox to accept the input.</haxe_doc>
			</severity>
			<message set="null">
				<c path="String"/>
				<haxe_doc>* The validation message to display.</haxe_doc>
			</message>
		</a>
		<haxe_doc>* Object to configure the behavior of the validation message.</haxe_doc>
	</typedef>
	<abstract path="vscode.InputBoxValidationSeverity" params="" file="src/vscode/InputBoxValidationSeverity.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The severity level for input box validation.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InputBoxValidationSeverity"</e>
			</m>
		</meta>
		<impl><class path="vscode._InputBoxValidationSeverity.InputBoxValidationSeverity_Impl_" params="" file="src/vscode/InputBoxValidationSeverity.hx" private="1" module="vscode.InputBoxValidationSeverity" extern="1" final="1">
	<Info public="1" set="null" static="1">
		<x path="vscode.InputBoxValidationSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Informational severity level.</haxe_doc>
	</Info>
	<Warning public="1" set="null" static="1">
		<x path="vscode.InputBoxValidationSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Warning severity level.</haxe_doc>
	</Warning>
	<Error public="1" set="null" static="1">
		<x path="vscode.InputBoxValidationSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Error severity level.</haxe_doc>
	</Error>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"InputBoxValidationSeverity"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._InputBoxValidationSeverity.InputBoxValidationSeverity_Impl_" params="" file="src/vscode/InputBoxValidationSeverity.hx" private="1" module="vscode.InputBoxValidationSeverity" extern="1" final="1">
		<Info public="1" set="null" static="1">
			<x path="vscode.InputBoxValidationSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Informational severity level.</haxe_doc>
		</Info>
		<Warning public="1" set="null" static="1">
			<x path="vscode.InputBoxValidationSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Warning severity level.</haxe_doc>
		</Warning>
		<Error public="1" set="null" static="1">
			<x path="vscode.InputBoxValidationSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Error severity level.</haxe_doc>
		</Error>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"InputBoxValidationSeverity"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.LanguageConfiguration" params="" file="src/vscode/LanguageConfiguration.hx">
		<a>
			<wordPattern>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The language's word definition.
	 * If the language supports Unicode identifiers (e.g. JavaScript), it is preferable
	 * to provide a word definition that uses exclusion of known separators.
	 * e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):
	 * ```
	 * /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g
	 * ```]]></haxe_doc>
			</wordPattern>
			<onEnterRules>
				<x path="Null"><c path="Array"><t path="vscode.OnEnterRule"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's rules to be evaluated when pressing Enter.</haxe_doc>
			</onEnterRules>
			<indentationRules>
				<x path="Null"><t path="vscode.IndentationRule"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's indentation settings.</haxe_doc>
			</indentationRules>
			<comments>
				<x path="Null"><t path="vscode.CommentRule"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's comment settings.</haxe_doc>
			</comments>
			<brackets>
				<x path="Null"><c path="Array"><t path="vscode.CharacterPair"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's brackets.
	 * This configuration implicitly affects pressing Enter around these brackets.</haxe_doc>
			</brackets>
			<autoClosingPairs>
				<x path="Null"><c path="Array"><t path="vscode.AutoClosingPair"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The language's auto closing pairs.</haxe_doc>
			</autoClosingPairs>
			<__electricCharacterSupport>
				<x path="Null"><a>
	<docComment>
		<x path="Null"><a>
	<scope>
		<c path="String"/>
		<haxe_doc>* @deprecated</haxe_doc>
	</scope>
	<open>
		<c path="String"/>
		<haxe_doc>* @deprecated</haxe_doc>
	</open>
	<lineStart>
		<c path="String"/>
		<haxe_doc>* @deprecated</haxe_doc>
	</lineStart>
	<close>
		<x path="Null"><c path="String"/></x>
		<meta><m n=":optional"/></meta>
		<haxe_doc>* @deprecated</haxe_doc>
	</close>
</a></x>
		<meta>
			<m n=":optional"/>
			<m n=":deprecated"/>
		</meta>
		<haxe_doc>* This property is deprecated and not fully supported anymore by
		 * the editor (scope and lineStart are ignored).
		 * Use the autoClosingPairs property in the language configuration file instead.
		 * @deprecated</haxe_doc>
	</docComment>
	<brackets>
		<x path="Null"><x path="Any"/></x>
		<meta>
			<m n=":optional"/>
			<m n=":deprecated"/>
		</meta>
		<haxe_doc>* This property is deprecated and will be **ignored** from
		 * the editor.
		 * @deprecated</haxe_doc>
	</brackets>
</a></x>
				<meta>
					<m n=":optional"/>
					<m n=":deprecated"><e>"Will be replaced by a better API soon."</e></m>
				</meta>
				<haxe_doc>* **Deprecated** Do not use.
	 *
	 * @deprecated Will be replaced by a better API soon.</haxe_doc>
			</__electricCharacterSupport>
			<__characterPairSupport>
				<x path="Null"><a><autoClosingPairs>
	<c path="Array"><a>
	<open><c path="String"/></open>
	<notIn>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</notIn>
	<close><c path="String"/></close>
</a></c>
	<haxe_doc>* @deprecated</haxe_doc>
</autoClosingPairs></a></x>
				<meta>
					<m n=":optional"/>
					<m n=":deprecated"><e>"Use the autoClosingPairs property in the language configuration file instead."</e></m>
				</meta>
				<haxe_doc>* **Deprecated** Do not use.
	 *
	 * @deprecated * Use the autoClosingPairs property in the language configuration file instead.</haxe_doc>
			</__characterPairSupport>
		</a>
		<haxe_doc>* The language configuration interfaces defines the contract between extensions
 * and various editor features, like automatic bracket insertion, automatic indentation etc.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelAccessInformation" params="" file="src/vscode/LanguageModelAccessInformation.hx">
		<a>
			<onDidChange>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event that fires when access information changes.</haxe_doc>
			</onDidChange>
			<canSendRequest set="method">
				<f a="chat">
					<t path="vscode.LanguageModelChat"/>
					<x path="Null"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Checks if a request can be made to a language model.
	 *
	 * *Note* that calling this function will not trigger a consent UI but just checks for a persisted state.
	 *
	 * @param chat A language model chat object.
	 * @return `true` if a request can be made, `false` if not, `undefined` if the language
	 * model does not exist or consent hasn't been asked for.</haxe_doc>
			</canSendRequest>
		</a>
		<haxe_doc>* Represents extension specific information about the access to language models.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelChat" params="" file="src/vscode/LanguageModelChat.hx">
		<a>
			<version set="null">
				<c path="String"/>
				<haxe_doc>* Opaque version string of the model. This is defined by the extension contributing the language model
	 * and subject to change.</haxe_doc>
			</version>
			<vendor set="null">
				<c path="String"/>
				<haxe_doc>* A well-known identifier of the vendor of the language model. An example is `copilot`, but
	 * values are defined by extensions contributing chat models and need to be looked up with them.</haxe_doc>
			</vendor>
			<sendRequest set="method">
				<f a="messages:?options:?token">
					<c path="Array"><c path="vscode.LanguageModelChatMessage"/></c>
					<t path="vscode.LanguageModelChatRequestOptions"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><t path="vscode.LanguageModelChatResponse"/></x>
				</f>
				<haxe_doc>* Make a chat request using a language model.
	 *
	 * *Note* that language model use may be subject to access restrictions and user consent. Calling this function
	 * for the first time (for an extension) will show a consent dialog to the user and because of that this function
	 * must _only be called in response to a user action!_ Extensions can use {@link LanguageModelAccessInformation.canSendRequest}
	 * to check if they have the necessary permissions to make a request.
	 *
	 * This function will return a rejected promise if making a request to the language model is not
	 * possible. Reasons for this can be:
	 *
	 * - user consent not given, see {@link LanguageModelError.NoPermissions `NoPermissions`}
	 * - model does not exist anymore, see {@link LanguageModelError.NotFound `NotFound`}
	 * - quota limits exceeded, see {@link LanguageModelError.Blocked `Blocked`}
	 * - other issues in which case extension must check {@link LanguageModelError.cause `LanguageModelError.cause`}
	 *
	 * An extension can make use of language model tool calling by passing a set of tools to
	 * {@link LanguageModelChatRequestOptions.tools}. The language model will return a {@link LanguageModelToolCallPart} and
	 * the extension can invoke the tool and make another request with the result.
	 *
	 * @param messages An array of message instances.
	 * @param options Options that control the request.
	 * @param token A cancellation token which controls the request. See {@link CancellationTokenSource} for how to create one.
	 * @returns A thenable that resolves to a {@link LanguageModelChatResponse}. The promise will reject when the request couldn't be made.</haxe_doc>
			</sendRequest>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* Human-readable name of the language model.</haxe_doc>
			</name>
			<maxInputTokens set="null">
				<x path="Int"/>
				<haxe_doc>* The maximum number of tokens that can be sent to the model in a single request.</haxe_doc>
			</maxInputTokens>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* Opaque identifier of the language model.</haxe_doc>
			</id>
			<family set="null">
				<c path="String"/>
				<haxe_doc>* Opaque family-name of the language model. Values might be `gpt-3.5-turbo`, `gpt4`, `phi2`, or `llama`
	 * but they are defined by extensions contributing languages and subject to change.</haxe_doc>
			</family>
			<countTokens set="method">
				<f a="text:?token">
					<x path="haxe.extern.EitherType">
						<c path="String"/>
						<c path="vscode.LanguageModelChatMessage"/>
					</x>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Int"/></x>
				</f>
				<haxe_doc>* Count the number of tokens in a message using the model specific tokenizer-logic.

		* @param text A string or a message instance.
		* @param token Optional cancellation token.  See {@link CancellationTokenSource} for how to create one.
		* @returns A thenable that resolves to the number of tokens.</haxe_doc>
			</countTokens>
		</a>
		<haxe_doc>* Represents a language model for making chat requests.
 *
 * @see {@link lm.selectChatModels}</haxe_doc>
	</typedef>
	<class path="vscode.LanguageModelChatMessage" params="" file="src/vscode/LanguageModelChatMessage.hx" extern="1">
		<User public="1" set="method" static="1">
			<f a="content:?name">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelToolResultPart"/>
</x></c>
				</x>
				<c path="String"/>
				<c path="vscode.LanguageModelChatMessage"/>
			</f>
			<haxe_doc>* Utility to create a new user message.
	 *
	 * @param content The content of the message.
	 * @param name The optional name of a user for the message.</haxe_doc>
		</User>
		<Assistant public="1" set="method" static="1">
			<f a="content:?name">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelToolCallPart"/>
</x></c>
				</x>
				<c path="String"/>
				<c path="vscode.LanguageModelChatMessage"/>
			</f>
			<haxe_doc>* Utility to create a new assistant message.
	 *
	 * @param content The content of the message.
	 * @param name The optional name of a user for the message.</haxe_doc>
		</Assistant>
		<role public="1">
			<x path="vscode.LanguageModelChatMessageRole"/>
			<haxe_doc>* The role of this message.</haxe_doc>
		</role>
		<content public="1">
			<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.LanguageModelToolResultPart"/>
		<c path="vscode.LanguageModelToolCallPart"/>
	</x>
</x></c>
			<haxe_doc>* A string or heterogeneous array of things that a message can contain as content. Some parts may be message-type
	 * specific for some models.</haxe_doc>
		</content>
		<name public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The optional name of a user for this message.</haxe_doc>
		</name>
		<new public="1" set="method">
			<f a="role:content:?name">
				<x path="vscode.LanguageModelChatMessageRole"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.LanguageModelToolResultPart"/>
		<c path="vscode.LanguageModelToolCallPart"/>
	</x>
</x></c>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new user message.
	 *
	 * @param role The role of the message.
	 * @param content The content of the message.
	 * @param name The optional name of a user for the message.</haxe_doc>
		</new>
		<haxe_doc>* Represents a message in a chat. Can assume different roles, like user or assistant.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelChatMessage"</e>
</m></meta>
	</class>
	<abstract path="vscode.LanguageModelChatMessageRole" params="" file="src/vscode/LanguageModelChatMessageRole.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the role of a chat message. This is either the user or the assistant.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageModelChatMessageRole"</e>
			</m>
		</meta>
		<impl><class path="vscode._LanguageModelChatMessageRole.LanguageModelChatMessageRole_Impl_" params="" file="src/vscode/LanguageModelChatMessageRole.hx" private="1" module="vscode.LanguageModelChatMessageRole" extern="1" final="1">
	<User public="1" set="null" static="1">
		<x path="vscode.LanguageModelChatMessageRole"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The user role, e.g the human interacting with a language model.</haxe_doc>
	</User>
	<Assistant public="1" set="null" static="1">
		<x path="vscode.LanguageModelChatMessageRole"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The assistant role, e.g. the language model generating responses.</haxe_doc>
	</Assistant>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"LanguageModelChatMessageRole"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._LanguageModelChatMessageRole.LanguageModelChatMessageRole_Impl_" params="" file="src/vscode/LanguageModelChatMessageRole.hx" private="1" module="vscode.LanguageModelChatMessageRole" extern="1" final="1">
		<User public="1" set="null" static="1">
			<x path="vscode.LanguageModelChatMessageRole"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The user role, e.g the human interacting with a language model.</haxe_doc>
		</User>
		<Assistant public="1" set="null" static="1">
			<x path="vscode.LanguageModelChatMessageRole"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The assistant role, e.g. the language model generating responses.</haxe_doc>
		</Assistant>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageModelChatMessageRole"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.LanguageModelChatRequestOptions" params="" file="src/vscode/LanguageModelChatRequestOptions.hx">
		<a>
			<tools>
				<x path="Null"><c path="Array"><t path="vscode.LanguageModelChatTool"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional list of tools that are available to the language model. These could be registered tools available via
	 * {@link lm.tools}, or private tools that are just implemented within the calling extension.
	 *
	 * If the LLM requests to call one of these tools, it will return a {@link LanguageModelToolCallPart} in
	 * {@link LanguageModelChatResponse.stream}. It's the caller's responsibility to invoke the tool. If it's a tool
	 * registered in {@link lm.tools}, that means calling {@link lm.invokeTool}.
	 *
	 * Then, the tool result can be provided to the LLM by creating an Assistant-type {@link LanguageModelChatMessage} with a
	 * {@link LanguageModelToolCallPart}, followed by a User-type message with a {@link LanguageModelToolResultPart}.</haxe_doc>
			</tools>
			<toolMode>
				<x path="Null"><x path="vscode.LanguageModelChatToolMode"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* 	The tool-selecting mode to use. {@link LanguageModelChatToolMode.Auto} by default.</haxe_doc>
			</toolMode>
			<modelOptions>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of options that control the behavior of the language model. These options are specific to the language model
	 * and need to be lookup in the respective documentation.</haxe_doc>
			</modelOptions>
			<justification>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable message that explains why access to a language model is needed and what feature is enabled by it.</haxe_doc>
			</justification>
		</a>
		<haxe_doc>* Options for making a chat request using a language model.
 *
 * @see {@link LanguageModelChat.sendRequest}</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelChatResponse" params="" file="src/vscode/LanguageModelChatResponse.hx">
		<a>
			<text>
				<t path="vscode.AsyncIterable"><c path="String"/></t>
				<haxe_doc>* This is equivalent to filtering everything except for text parts from a {@link LanguageModelChatResponse.stream}.
	 *
	 * @see {@link LanguageModelChatResponse.stream}</haxe_doc>
			</text>
			<stream>
				<t path="vscode.AsyncIterable"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelToolCallPart"/>
</x></t>
				<haxe_doc>* An async iterable that is a stream of text and tool-call parts forming the overall response. A
	 * {@link LanguageModelTextPart} is part of the assistant's response to be shown to the user. A
	 * {@link LanguageModelToolCallPart} is a request from the language model to call a tool. The latter will
	 * only be returned if tools were passed in the request via {@link LanguageModelChatRequestOptions.tools}. The
	 * `unknown`-type is used as a placeholder for future parts, like image data parts.
	 *
	 * *Note* that this stream will error when during data receiving an error occurs. Consumers of the stream should handle
	 * the errors accordingly.
	 *
	 * To cancel the stream, the consumer can {@link CancellationTokenSource.cancel cancel} the token that was used to make
	 * the request or break from the for-loop.
	 *
	 * @example
	 * ```ts
	 * try {
	 *   // consume stream
	 *   for await (const chunk of response.stream) {
	 *      if (chunk instanceof LanguageModelTextPart) {
	 *        console.log("TEXT", chunk);
	 *      } else if (chunk instanceof LanguageModelToolCallPart) {
	 *        console.log("TOOL CALL", chunk);
	 *      }
	 *   }
	 *
	 * } catch(e) {
	 *   // stream ended with an error
	 *   console.error(e);
	 * }
	 * ```</haxe_doc>
			</stream>
		</a>
		<haxe_doc>* Represents a language model response.
 *
 * @see {@link LanguageModelAccess.chatRequest}</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelChatSelector" params="" file="src/vscode/LanguageModelChatSelector.hx">
		<a>
			<version>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The version of a language model.
	 * @see {@link LanguageModelChat.version}</haxe_doc>
			</version>
			<vendor>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A vendor of language models.
	 * @see {@link LanguageModelChat.vendor}</haxe_doc>
			</vendor>
			<id>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The identifier of a language model.
	 * @see {@link LanguageModelChat.id}</haxe_doc>
			</id>
			<family>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A family of language models.
	 * @see {@link LanguageModelChat.family}</haxe_doc>
			</family>
		</a>
		<haxe_doc>* Describes how to select language models for chat requests.
 *
 * @see {@link lm.selectChatModels}</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelChatTool" params="" file="src/vscode/LanguageModelChatTool.hx">
		<a>
			<name>
				<c path="String"/>
				<haxe_doc>* The name of the tool.</haxe_doc>
			</name>
			<inputSchema>
				<a/>
				<haxe_doc>* A JSON schema for the input this tool accepts.</haxe_doc>
			</inputSchema>
			<description>
				<c path="String"/>
				<haxe_doc>* The description of the tool.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* A tool that is available to the language model via {@link LanguageModelChatRequestOptions}. A language model uses all the
 * properties of this interface to decide which tool to call, and how to call it.</haxe_doc>
	</typedef>
	<abstract path="vscode.LanguageModelChatToolMode" params="" file="src/vscode/LanguageModelChatToolMode.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A tool-calling mode for the language model to use.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageModelChatToolMode"</e>
			</m>
		</meta>
		<impl><class path="vscode._LanguageModelChatToolMode.LanguageModelChatToolMode_Impl_" params="" file="src/vscode/LanguageModelChatToolMode.hx" private="1" module="vscode.LanguageModelChatToolMode" extern="1" final="1">
	<Auto public="1" set="null" static="1">
		<x path="vscode.LanguageModelChatToolMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The language model can choose to call a tool or generate a message. Is the default.</haxe_doc>
	</Auto>
	<Required public="1" set="null" static="1">
		<x path="vscode.LanguageModelChatToolMode"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The language model must call one of the provided tools. Note- some models only support a single tool when using this
	 * mode.</haxe_doc>
	</Required>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"LanguageModelChatToolMode"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._LanguageModelChatToolMode.LanguageModelChatToolMode_Impl_" params="" file="src/vscode/LanguageModelChatToolMode.hx" private="1" module="vscode.LanguageModelChatToolMode" extern="1" final="1">
		<Auto public="1" set="null" static="1">
			<x path="vscode.LanguageModelChatToolMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The language model can choose to call a tool or generate a message. Is the default.</haxe_doc>
		</Auto>
		<Required public="1" set="null" static="1">
			<x path="vscode.LanguageModelChatToolMode"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The language model must call one of the provided tools. Note- some models only support a single tool when using this
	 * mode.</haxe_doc>
		</Required>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageModelChatToolMode"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.LanguageModelError" params="" file="src/vscode/LanguageModelError.hx" extern="1">
		<extends path="js.lib.Error"/>
		<NoPermissions public="1" set="method" static="1">
			<f a="?message">
				<c path="String"/>
				<c path="vscode.LanguageModelError"/>
			</f>
			<haxe_doc>* The requestor does not have permissions to use this
	 * language model</haxe_doc>
		</NoPermissions>
		<Blocked public="1" set="method" static="1">
			<f a="?message">
				<c path="String"/>
				<c path="vscode.LanguageModelError"/>
			</f>
			<haxe_doc>* The requestor is blocked from using this language model.</haxe_doc>
		</Blocked>
		<NotFound public="1" set="method" static="1">
			<f a="?message">
				<c path="String"/>
				<c path="vscode.LanguageModelError"/>
			</f>
			<haxe_doc>* The language model does not exist.</haxe_doc>
		</NotFound>
		<code public="1" set="null">
			<c path="String"/>
			<haxe_doc>* A code that identifies this error.
	 *
	 * Possible values are names of errors, like {@linkcode LanguageModelError.NotFound NotFound},
	 * or `Unknown` for unspecified errors from the language model itself. In the latter case the
	 * `cause`-property will contain the actual error.</haxe_doc>
		</code>
		<haxe_doc>* An error type for language model specific errors.
 *
 * Consumers of language models should check the code property to determine specific
 * failure causes, like `if(someError.code === vscode.LanguageModelError.NotFound.name) {...}`
 * for the case of referring to an unknown language model. For unspecified errors the `cause`-property
 * will contain the actual error.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelError"</e>
</m></meta>
	</class>
	<class path="vscode.LanguageModelPromptTsxPart" params="" file="src/vscode/LanguageModelPromptTsxPart.hx" extern="1">
		<value public="1">
			<x path="Any"/>
			<haxe_doc>* The value of the part.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Construct a prompt-tsx part with the given content.
	 * @param value The value of the part, the result of `renderPromptElementJSON` from `@vscode/prompt-tsx`.</haxe_doc>
		</new>
		<haxe_doc>* A language model response part containing a PromptElementJSON from `@vscode/prompt-tsx`.
 * @see {@link LanguageModelToolResult}</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelPromptTsxPart"</e>
</m></meta>
	</class>
	<class path="vscode.LanguageModelTextPart" params="" file="src/vscode/LanguageModelTextPart.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The text content of the part.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Construct a text part with the given content.
	 * @param value The text content of the part.</haxe_doc>
		</new>
		<haxe_doc>* A language model response part containing a piece of text, returned from a {@link LanguageModelChatResponse}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelTextPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.LanguageModelTool" params="T" file="src/vscode/LanguageModelTool.hx">
		<a>
			<prepareInvocation set="method">
				<f a="options:token">
					<t path="vscode.LanguageModelToolInvocationPrepareOptions"><c path="vscode.LanguageModelTool.T"/></t>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><t path="vscode.PreparedToolInvocation"/></t>
				</f>
				<haxe_doc>* Called once before a tool is invoked. It's recommended to implement this to customize the progress message that appears
	 * while the tool is running, and to provide a more useful message with context from the invocation input. Can also
	 * signal that a tool needs user confirmation before running, if appropriate.
	 *
	 * * *Note 1:* Must be free of side-effects.
	 * * *Note 2:* A call to `prepareInvocation` is not necessarily followed by a call to `invoke`.</haxe_doc>
			</prepareInvocation>
			<invoke set="method">
				<f a="options:token">
					<t path="vscode.LanguageModelToolInvocationOptions"><c path="vscode.LanguageModelTool.T"/></t>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.LanguageModelToolResult"/></t>
				</f>
				<haxe_doc>* Invoke the tool with the given input and return a result.
	 *
	 * The provided {@link LanguageModelToolInvocationOptions.input} has been validated against the declared schema.</haxe_doc>
			</invoke>
		</a>
		<haxe_doc>* A tool that can be invoked by a call to a {@link LanguageModelChat}.</haxe_doc>
	</typedef>
	<class path="vscode.LanguageModelToolCallPart" params="" file="src/vscode/LanguageModelToolCallPart.hx" extern="1">
		<callId public="1">
			<c path="String"/>
			<haxe_doc>* The ID of the tool call. This is a unique identifier for the tool call within the chat request.</haxe_doc>
		</callId>
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of the tool to call.</haxe_doc>
		</name>
		<input public="1">
			<a/>
			<haxe_doc>* The input with which to call the tool.</haxe_doc>
		</input>
		<new public="1" set="method">
			<f a="callId:name:input">
				<c path="String"/>
				<c path="String"/>
				<a/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new LanguageModelToolCallPart.
	 *
	 * @param callId The ID of the tool call.
	 * @param name The name of the tool to call.
	 * @param input The input with which to call the tool.</haxe_doc>
		</new>
		<haxe_doc>* A language model response part indicating a tool call, returned from a {@link LanguageModelChatResponse}, and also can be
 * included as a content part on a {@link LanguageModelChatMessage}, to represent a previous tool call in a chat request.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelToolCallPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.LanguageModelToolConfirmationMessages" params="" file="src/vscode/LanguageModelToolConfirmationMessages.hx">
		<a>
			<title>
				<c path="String"/>
				<haxe_doc>* The title of the confirmation message.</haxe_doc>
			</title>
			<message>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<haxe_doc>* The body of the confirmation message.</haxe_doc>
			</message>
		</a>
		<haxe_doc>* When this is returned in {@link PreparedToolInvocation}, the user will be asked to confirm before running the tool. These
 * messages will be shown with buttons that say "Continue" and "Cancel".</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelToolInformation" params="" file="src/vscode/LanguageModelToolInformation.hx">
		<a>
			<tags set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* A set of tags, declared by the tool, that roughly describe the tool's capabilities. A tool user may use these to filter
	 * the set of tools to just ones that are relevant for the task at hand.</haxe_doc>
			</tags>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* A unique name for the tool.</haxe_doc>
			</name>
			<inputSchema set="null">
				<x path="Null"><a/></x>
				<haxe_doc>* A JSON schema for the input this tool accepts.</haxe_doc>
			</inputSchema>
			<description set="null">
				<c path="String"/>
				<haxe_doc>* A description of this tool that may be passed to a language model.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* Information about a registered tool available in {@link lm.tools}.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelToolInvocationOptions" params="T" file="src/vscode/LanguageModelToolInvocationOptions.hx">
		<a>
			<toolInvocationToken>
				<x path="Null"><t path="vscode.ChatParticipantToolToken"/></x>
				<haxe_doc>* An opaque object that ties a tool invocation to a chat request from a {@link ChatParticipant chat participant}.
	 *
	 * The _only_ way to get a valid tool invocation token is using the provided {@link ChatRequest.toolInvocationToken toolInvocationToken}
	 * from a chat request. In that case, a progress bar will be automatically shown for the tool invocation in the chat response view, and if
	 * the tool requires user confirmation, it will show up inline in the chat view.
	 *
	 * If the tool is being invoked outside of a chat request, `undefined` should be passed instead, and no special UI except for
	 * confirmations will be shown.
	 *
	 * *Note* that a tool that invokes another tool during its invocation, can pass along the `toolInvocationToken` that it received.</haxe_doc>
			</toolInvocationToken>
			<tokenizationOptions>
				<x path="Null"><t path="vscode.LanguageModelToolTokenizationOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Options to hint at how many tokens the tool should return in its response, and enable the tool to count tokens
	 * accurately.</haxe_doc>
			</tokenizationOptions>
			<input>
				<c path="vscode.LanguageModelToolInvocationOptions.T"/>
				<haxe_doc>* The input with which to invoke the tool. The input must match the schema defined in
	 * {@link LanguageModelToolInformation.inputSchema}</haxe_doc>
			</input>
		</a>
		<haxe_doc>* Options provided for tool invocation.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageModelToolInvocationPrepareOptions" params="T" file="src/vscode/LanguageModelToolInvocationPrepareOptions.hx">
		<a><input>
	<c path="vscode.LanguageModelToolInvocationPrepareOptions.T"/>
	<haxe_doc>* The input that the tool is being invoked with.</haxe_doc>
</input></a>
		<haxe_doc>* Options for {@link LanguageModelTool.prepareInvocation}.</haxe_doc>
	</typedef>
	<class path="vscode.LanguageModelToolResult" params="" file="src/vscode/LanguageModelToolResult.hx" extern="1">
		<content public="1">
			<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelPromptTsxPart"/>
</x></c>
			<haxe_doc>* A list of tool result content parts. Includes `unknown` becauses this list may be extended with new content types in
	 * the future.
	 * @see {@link lm.invokeTool}.</haxe_doc>
		</content>
		<new public="1" set="method">
			<f a="content">
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelPromptTsxPart"/>
</x></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a LanguageModelToolResult
	 * @param content A list of tool result content parts</haxe_doc>
		</new>
		<haxe_doc>* A result returned from a tool invocation. If using `@vscode/prompt-tsx`, this result may be rendered using a `ToolResult`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelToolResult"</e>
</m></meta>
	</class>
	<class path="vscode.LanguageModelToolResultPart" params="" file="src/vscode/LanguageModelToolResultPart.hx" extern="1">
		<callId public="1">
			<c path="String"/>
			<haxe_doc>* The ID of the tool call.
	 *
	 * *Note* that this should match the {@link LanguageModelToolCallPart.callId callId} of a tool call part.</haxe_doc>
		</callId>
		<content public="1">
			<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelPromptTsxPart"/>
</x></c>
			<haxe_doc>* The value of the tool result.</haxe_doc>
		</content>
		<new public="1" set="method">
			<f a="callId:content">
				<c path="String"/>
				<c path="Array"><x path="haxe.extern.EitherType">
	<c path="vscode.LanguageModelTextPart"/>
	<c path="vscode.LanguageModelPromptTsxPart"/>
</x></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param callId The ID of the tool call.
	 * @param content The content of the tool result.</haxe_doc>
		</new>
		<haxe_doc>* The result of a tool call. This is the counterpart of a {@link LanguageModelToolCallPart tool call} and
 * it can only be included in the content of a User message</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LanguageModelToolResultPart"</e>
</m></meta>
	</class>
	<typedef path="vscode.LanguageModelToolTokenizationOptions" params="" file="src/vscode/LanguageModelToolTokenizationOptions.hx">
		<a>
			<tokenBudget>
				<x path="Int"/>
				<haxe_doc>* If known, the maximum number of tokens the tool should emit in its result.</haxe_doc>
			</tokenBudget>
			<countTokens set="method">
				<f a="text:?token">
					<c path="String"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Int"/></x>
				</f>
				<haxe_doc>* Count the number of tokens in a message using the model specific tokenizer-logic.
	 * @param text A string.
	 * @param token Optional cancellation token.  See {@link CancellationTokenSource} for how to create one.
	 * @returns A thenable that resolves to the number of tokens.</haxe_doc>
			</countTokens>
		</a>
		<haxe_doc>* Options related to tokenization for a tool invocation.</haxe_doc>
	</typedef>
	<typedef path="vscode.LanguageStatusItem" params="" file="src/vscode/LanguageStatusItem.hx">
		<a>
			<text>
				<c path="String"/>
				<haxe_doc>* The text to show for the entry. You can embed icons in the text by leveraging the syntax:
	 *
	 * `My text $(icon-name) contains icons like $(icon-name) this one.`
	 *
	 * Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.
	 * `light-bulb`, `thumbsup`, `zap` etc.</haxe_doc>
			</text>
			<severity>
				<x path="vscode.LanguageStatusSeverity"/>
				<haxe_doc>* The severity of this item.
	 *
	 * Defaults to {@link LanguageStatusSeverity.Information information}. You can use this property to
	 * signal to users that there is a problem that needs attention, like a missing executable or an
	 * invalid configuration.</haxe_doc>
			</severity>
			<selector>
				<t path="vscode.DocumentSelector"/>
				<haxe_doc>* A {@link DocumentSelector selector} that defines for what editors
	 * this item shows.</haxe_doc>
			</selector>
			<name>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The short name of this item, like 'Java Language Status', etc.</haxe_doc>
			</name>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of this item.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources.</haxe_doc>
			</dispose>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional, human-readable details for this item.</haxe_doc>
			</detail>
			<command>
				<x path="Null"><t path="vscode.Command"/></x>
				<haxe_doc>* A {@linkcode Command command} for this item.</haxe_doc>
			</command>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* Controls whether the item is shown as "busy". Defaults to `false`.</haxe_doc>
			</busy>
			<accessibilityInformation>
				<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Accessibility information used when a screen reader interacts with this item</haxe_doc>
			</accessibilityInformation>
		</a>
		<haxe_doc>* A language status item is the preferred way to present language status reports for the active text editors,
 * such as selected linter or notifying about a configuration problem.</haxe_doc>
	</typedef>
	<abstract path="vscode.LanguageStatusSeverity" params="" file="src/vscode/LanguageStatusSeverity.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the severity level of a language status.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageStatusSeverity"</e>
			</m>
		</meta>
		<impl><class path="vscode._LanguageStatusSeverity.LanguageStatusSeverity_Impl_" params="" file="src/vscode/LanguageStatusSeverity.hx" private="1" module="vscode.LanguageStatusSeverity" extern="1" final="1">
	<Information public="1" set="null" static="1">
		<x path="vscode.LanguageStatusSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Informational severity level.</haxe_doc>
	</Information>
	<Warning public="1" set="null" static="1">
		<x path="vscode.LanguageStatusSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Warning severity level.</haxe_doc>
	</Warning>
	<Error public="1" set="null" static="1">
		<x path="vscode.LanguageStatusSeverity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Error severity level.</haxe_doc>
	</Error>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"LanguageStatusSeverity"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._LanguageStatusSeverity.LanguageStatusSeverity_Impl_" params="" file="src/vscode/LanguageStatusSeverity.hx" private="1" module="vscode.LanguageStatusSeverity" extern="1" final="1">
		<Information public="1" set="null" static="1">
			<x path="vscode.LanguageStatusSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Informational severity level.</haxe_doc>
		</Information>
		<Warning public="1" set="null" static="1">
			<x path="vscode.LanguageStatusSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Warning severity level.</haxe_doc>
		</Warning>
		<Error public="1" set="null" static="1">
			<x path="vscode.LanguageStatusSeverity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Error severity level.</haxe_doc>
		</Error>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LanguageStatusSeverity"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.LinkedEditingRangeProvider" params="" file="src/vscode/LinkedEditingRangeProvider.hx">
		<a><provideLinkedEditingRanges set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.LinkedEditingRanges"/></t>
	</f>
	<haxe_doc>* For a given position in a document, returns the range of the symbol at the position and all ranges
	 * that have the same content. A change to one of the ranges can be applied to all other ranges if the new content
	 * is valid. An optional word pattern can be returned with the result to describe valid contents.
	 * If no result-specific word pattern is provided, the word pattern from the language configuration is used.
	 *
	 * @param document The document in which the provider was invoked.
	 * @param position The position at which the provider was invoked.
	 * @param token A cancellation token.
	 * @returns A list of ranges that can be edited together</haxe_doc>
</provideLinkedEditingRanges></a>
		<haxe_doc>* The linked editing range provider interface defines the contract between extensions and
 * the linked editing feature.</haxe_doc>
	</typedef>
	<class path="vscode.LinkedEditingRanges" params="" file="src/vscode/LinkedEditingRanges.hx" extern="1">
		<ranges public="1" set="null">
			<c path="Array"><c path="vscode.Range"/></c>
			<haxe_doc>* A list of ranges that can be edited together. The ranges must have
	 * identical length and text content. The ranges cannot overlap.</haxe_doc>
		</ranges>
		<wordPattern public="1" set="null">
			<x path="Null"><c path="js.lib.RegExp"/></x>
			<haxe_doc>* An optional word pattern that describes valid contents for the given ranges.
	 * If no pattern is provided, the language configuration's word pattern will be used.</haxe_doc>
		</wordPattern>
		<new public="1" set="method">
			<f a="ranges:?wordPattern">
				<c path="Array"><c path="vscode.Range"/></c>
				<c path="js.lib.RegExp"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new linked editing ranges object.
	 *
	 * @param ranges A list of ranges that can be edited together
	 * @param wordPattern An optional word pattern that describes valid contents for the given ranges</haxe_doc>
		</new>
		<haxe_doc>* Represents a list of ranges that can be edited together along with a word pattern to describe valid range contents.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"LinkedEditingRanges"</e>
</m></meta>
	</class>
	<class path="vscode.Location" params="" file="src/vscode/Location.hx" extern="1">
		<uri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The resource identifier of this location.</haxe_doc>
		</uri>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The document range of this location.</haxe_doc>
		</range>
		<new public="1" set="method">
			<f a="uri:rangeOrPosition">
				<c path="vscode.Uri"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.Range"/>
					<c path="vscode.Position"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new location object.
	 *
	 * @param uri The resource identifier.
	 * @param rangeOrPosition The range or position. Positions will be converted to an empty range.</haxe_doc>
		</new>
		<haxe_doc>* Represents a location inside a resource, such as a line
 * inside a text file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Location"</e>
</m></meta>
	</class>
	<typedef path="vscode.LocationLink" params="" file="src/vscode/LocationLink.hx">
		<a>
			<targetUri>
				<c path="vscode.Uri"/>
				<haxe_doc>* The target resource identifier of this link.</haxe_doc>
			</targetUri>
			<targetSelectionRange>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The span of this link.</haxe_doc>
			</targetSelectionRange>
			<targetRange>
				<c path="vscode.Range"/>
				<haxe_doc>* The full target range of this link.</haxe_doc>
			</targetRange>
			<originSelectionRange>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Span of the origin of this link.
	 *
	 * Used as the underlined span for mouse definition hover. Defaults to the word range at
	 * the definition position.</haxe_doc>
			</originSelectionRange>
		</a>
		<haxe_doc>* Represents the connection of two locations. Provides additional metadata over normal {@link Location locations},
 * including an origin range.</haxe_doc>
	</typedef>
	<abstract path="vscode.LogLevel" params="" file="src/vscode/LogLevel.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the severity level of a language status.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LogLevel"</e>
			</m>
		</meta>
		<impl><class path="vscode._LogLevel.LogLevel_Impl_" params="" file="src/vscode/LogLevel.hx" private="1" module="vscode.LogLevel" extern="1" final="1">
	<Off public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* No messages are logged with this level.</haxe_doc>
	</Off>
	<Trace public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* All messages are logged with this level.</haxe_doc>
	</Trace>
	<Debug public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Messages with debug and higher log level are logged with this level.</haxe_doc>
	</Debug>
	<Info public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Messages with info and higher log level are logged with this level.</haxe_doc>
	</Info>
	<Warning public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Messages with warning and higher log level are logged with this level.</haxe_doc>
	</Warning>
	<Error public="1" set="null" static="1">
		<x path="vscode.LogLevel"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Only error messages are logged with this level.</haxe_doc>
	</Error>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"LogLevel"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._LogLevel.LogLevel_Impl_" params="" file="src/vscode/LogLevel.hx" private="1" module="vscode.LogLevel" extern="1" final="1">
		<Off public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* No messages are logged with this level.</haxe_doc>
		</Off>
		<Trace public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* All messages are logged with this level.</haxe_doc>
		</Trace>
		<Debug public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Messages with debug and higher log level are logged with this level.</haxe_doc>
		</Debug>
		<Info public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Messages with info and higher log level are logged with this level.</haxe_doc>
		</Info>
		<Warning public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Messages with warning and higher log level are logged with this level.</haxe_doc>
		</Warning>
		<Error public="1" set="null" static="1">
			<x path="vscode.LogLevel"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Only error messages are logged with this level.</haxe_doc>
		</Error>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"LogLevel"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.OutputChannel" params="" file="src/vscode/OutputChannel.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The human-readable name of this output channel.</haxe_doc>
		</name>
		<append public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Append the given value to the channel.
	 *
	 * @param value A string, falsy values will not be printed.</haxe_doc>
		</append>
		<appendLine public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Append the given value and a line feed character
	 * to the channel.
	 *
	 * @param value A string, falsy values will be printed.</haxe_doc>
		</appendLine>
		<replace public="1" set="method">
			<f a="value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Replaces all output from the channel with the given value.
	 *
	 * @param value A string, falsy values will not be printed.</haxe_doc>
		</replace>
		<clear public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Removes all output from the channel.</haxe_doc>
		</clear>
		<show public="1" set="method">
			<f a="?preserveFocus">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Reveal this channel in the UI.
	 *
	 * @param preserveFocus When `true` the channel will not take focus.</haxe_doc>
			<overloads><show public="1" set="method">
	<f a="?column:?preservceFocus">
		<x path="vscode.ViewColumn"/>
		<x path="Bool"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Reveal this channel in the UI.
	 *
	 * @deprecated Use the overload with just one parameter (`show(preserveFocus?: boolean): void`).
	 *
	 * @param column This argument is **deprecated** and will be ignored.
	 * @param preserveFocus When `true` the channel will not take focus.</haxe_doc>
</show></overloads>
		</show>
		<hide public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Hide this channel from the UI.</haxe_doc>
		</hide>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose and free associated resources.</haxe_doc>
		</dispose>
		<haxe_doc>* An output channel is a container for readonly textual information.
 *
 * To get an instance of an `OutputChannel` use
 * {@link window.createOutputChannel createOutputChannel}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"OutputChannel"</e>
</m></meta>
	</class>
	<class path="vscode.LogOutputChannel" params="" file="src/vscode/LogOutputChannel.hx" extern="1">
		<extends path="vscode.OutputChannel"/>
		<logLevel public="1" set="null">
			<x path="vscode.LogLevel"/>
			<haxe_doc>* The current log level of the channel. Defaults to {@link env.logLevel editor log level}.</haxe_doc>
		</logLevel>
		<onDidChangeLogLevel public="1" set="null">
			<t path="vscode.Event"><x path="vscode.LogLevel"/></t>
			<haxe_doc>* An {@link Event} which fires when the log level of the channel changes.</haxe_doc>
		</onDidChangeLogLevel>
		<trace public="1" set="method">
			<f a="message:args">
				<c path="String"/>
				<x path="haxe.Rest"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Outputs the given trace message to the channel. Use this method to log verbose information.
	 *
	 * The message is only logged if the channel is configured to display {@link LogLevel.Trace trace} log level.
	 *
	 * @param message trace message to log</haxe_doc>
		</trace>
		<debug public="1" set="method">
			<f a="message:args">
				<c path="String"/>
				<x path="haxe.Rest"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Outputs the given debug message to the channel.
	 *
	 * The message is only logged if the channel is configured to display {@link LogLevel.Debug debug} log level or lower.
	 *
	 * @param message debug message to log</haxe_doc>
		</debug>
		<info public="1" set="method">
			<f a="message:args">
				<c path="String"/>
				<x path="haxe.Rest"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Outputs the given information message to the channel.
	 *
	 * The message is only logged if the channel is configured to display {@link LogLevel.Info info} log level or lower.
	 *
	 * @param message info message to log</haxe_doc>
		</info>
		<warn public="1" set="method">
			<f a="message:args">
				<c path="String"/>
				<x path="haxe.Rest"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Outputs the given warning message to the channel.
	 *
	 * The message is only logged if the channel is configured to display {@link LogLevel.Warning warning} log level or lower.
	 *
	 * @param message warning message to log</haxe_doc>
		</warn>
		<error public="1" set="method">
			<f a="error:args">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="js.lib.Error"/>
				</x>
				<x path="haxe.Rest"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Outputs the given error or error message to the channel.
	 *
	 * The message is only logged if the channel is configured to display {@link LogLevel.Error error} log level or lower.
	 *
	 * @param error Error or error message to log</haxe_doc>
		</error>
		<haxe_doc>* A channel for containing log output.
 *
 * To get an instance of a `LogOutputChannel` use
 * {@link window.createOutputChannel createOutputChannel}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"OutputChannel"</e>
</m></meta>
	</class>
	<class path="vscode.MarkdownString" params="" file="src/vscode/MarkdownString.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The markdown string.</haxe_doc>
		</value>
		<isTrusted public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<a><enabledCommands>
	<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
	<haxe_doc>* A set of commend ids that are allowed to be executed by this markdown string.</haxe_doc>
</enabledCommands></a>
</x></x>
			<haxe_doc>* Indicates that this markdown string is from a trusted source. Only *trusted*
	 * markdown supports links that execute commands, e.g. `[Run it](command:myCommandId)`.
	 *
	 * Defaults to `false` (commands are disabled).</haxe_doc>
		</isTrusted>
		<supportThemeIcons public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Indicates that this markdown string can contain {@link ThemeIcon ThemeIcons}, e.g. `$(zap)`.</haxe_doc>
		</supportThemeIcons>
		<supportHtml public="1">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Indicates that this markdown string can contain raw html tags. Defaults to `false`.
	 *
	 * When `supportHtml` is false, the markdown renderer will strip out any raw html tags
	 * that appear in the markdown text. This means you can only use markdown syntax for rendering.
	 *
	 * When `supportHtml` is true, the markdown render will also allow a safe subset of html tags
	 * and attributes to be rendered. See https://github.com/microsoft/vscode/blob/6d2920473c6f13759c978dd89104c4270a83422d/src/vs/base/browser/markdownRenderer.ts#L296
	 * for a list of all supported tags and attributes.</haxe_doc>
		</supportHtml>
		<baseUri public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* Uri that relative paths are resolved relative to.
	 *
	 * If the `baseUri` ends with `/`, it is considered a directory and relative paths in the markdown are resolved relative to that directory:
	 *
	 * ```ts
	 * const md = new vscode.MarkdownString(`[link](./file.js)`);
	 * md.baseUri = vscode.Uri.file('/path/to/dir/');
	 * // Here 'link' in the rendered markdown resolves to '/path/to/dir/file.js'
	 * ```
	 *
	 * If the `baseUri` is a file, relative paths in the markdown are resolved relative to the parent dir of that file:
	 *
	 * ```ts
	 * const md = new vscode.MarkdownString(`[link](./file.js)`);
	 * md.baseUri = vscode.Uri.file('/path/to/otherFile.js');
	 * // Here 'link' in the rendered markdown resolves to '/path/to/file.js'
	 * ```</haxe_doc>
		</baseUri>
		<appendText public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends and escapes the given string to this markdown string.
	 * @param value Plain text.</haxe_doc>
		</appendText>
		<appendMarkdown public="1" set="method">
			<f a="value">
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends the given string 'as is' to this markdown string. When {@linkcode MarkdownString.supportThemeIcons supportThemeIcons} is `true`, {@link ThemeIcon ThemeIcons} in the `value` will be iconified.
	 * @param value Markdown string.</haxe_doc>
		</appendMarkdown>
		<appendCodeblock public="1" set="method">
			<f a="value:?language">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</f>
			<haxe_doc>* Appends the given string as codeblock using the provided language.
	 * @param value A code snippet.
	 * @param language An optional {@link languages.getLanguages language identifier}.</haxe_doc>
		</appendCodeblock>
		<new public="1" set="method">
			<f a="?value:?supportThemeIcons">
				<c path="String"/>
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new markdown string with the given value.
	 *
	 * @param value Optional, initial value.
	 * @param supportThemeIcons Optional, Specifies whether {@link ThemeIcon ThemeIcons} are supported within the {@linkcode MarkdownString}.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* Human-readable text that supports formatting via the [markdown syntax](https://commonmark.org).
 *
 * Rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax is supported
 * when the {@linkcode supportThemeIcons} is set to `true`.
 *
 * Rendering of embedded html is supported when {@linkcode supportHtml} is set to `true`.]]></haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"MarkdownString"</e>
</m></meta>
	</class>
	<typedef path="vscode.MarkedString" params="" file="src/vscode/MarkedString.hx">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<a>
				<value><c path="String"/></value>
				<language><c path="String"/></language>
			</a>
		</x>
		<haxe_doc>* MarkedString can be used to render human-readable text. It is either a markdown string
 * or a code-block that provides a language and a code snippet. Note that
 * markdown strings will be sanitized - that means html will be escaped.
 *
 * @deprecated This type is deprecated, please use {@linkcode MarkdownString} instead.</haxe_doc>
	</typedef>
	<typedef path="vscode.MessageItem" params="" file="src/vscode/MessageItem.hx">
		<a>
			<title>
				<c path="String"/>
				<haxe_doc>* A short title like 'Retry', 'Open Log' etc.</haxe_doc>
			</title>
			<isCloseAffordance>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A hint for modal dialogs that the item should be triggered
	 * when the user cancels the dialog (e.g. by pressing the ESC
	 * key).
	 *
	 * Note: this option is ignored for non-modal messages.</haxe_doc>
			</isCloseAffordance>
		</a>
		<haxe_doc>* Represents an action that is shown with an information, warning, or
 * error message.
 *
 * @see {@link window.showInformationMessage showInformationMessage}
 * @see {@link window.showWarningMessage showWarningMessage}
 * @see {@link window.showErrorMessage showErrorMessage}</haxe_doc>
	</typedef>
	<typedef path="vscode.MessageOptions" params="" file="src/vscode/MessageOptions.hx">
		<a>
			<modal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Indicates that this message should be modal.</haxe_doc>
			</modal>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Human-readable detail message that is rendered less prominent. _Note_ that detail
	 * is only shown for {@link MessageOptions.modal modal} messages.</haxe_doc>
			</detail>
		</a>
		<haxe_doc>* Options to configure the behavior of the message.
 *
 * @see {@link window.showInformationMessage showInformationMessage}
 * @see {@link window.showWarningMessage showWarningMessage}
 * @see {@link window.showErrorMessage showErrorMessage}</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookCell" params="" file="src/vscode/NotebookCell.hx">
		<a>
			<outputs final="1" set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutput"/></x>
				<haxe_doc>* The outputs of this cell.</haxe_doc>
			</outputs>
			<notebook final="1" set="null">
				<t path="vscode.NotebookDocument"/>
				<haxe_doc>* The {@link NotebookDocument notebook} that contains this cell.</haxe_doc>
			</notebook>
			<metadata final="1" set="null">
				<x path="haxe.DynamicAccess"><x path="Any"/></x>
				<haxe_doc>* The metadata of this cell. Can be anything but must be JSON-stringifyable.</haxe_doc>
			</metadata>
			<kind final="1" set="null">
				<x path="vscode.NotebookCellKind"/>
				<haxe_doc>* The kind of this cell.</haxe_doc>
			</kind>
			<index final="1" set="null">
				<x path="Int"/>
				<haxe_doc>* The index of this cell in its {@link NotebookDocument.cellAt containing notebook}. The
	 * index is updated when a cell is moved within its notebook. The index is `-1`
	 * when the cell has been removed from its notebook.</haxe_doc>
			</index>
			<executionSummary final="1" set="null">
				<x path="Null"><t path="vscode.NotebookCellExecutionSummary"/></x>
				<haxe_doc>* The most recent {@link NotebookCellExecutionSummary execution summary} for this cell.</haxe_doc>
			</executionSummary>
			<document final="1" set="null">
				<c path="vscode.TextDocument"/>
				<haxe_doc>* The {@link TextDocument text} of this cell, represented as text document.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* Represents a cell of a {@link NotebookDocument notebook}, either a {@link NotebookCellKind.Code code}-cell
 * or {@link NotebookCellKind.Markup markup}-cell.
 *
 * NotebookCell instances are immutable and are kept in sync for as long as they are part of their notebook.</haxe_doc>
	</typedef>
	<class path="vscode.NotebookCellData" params="" file="src/vscode/NotebookCellData.hx" extern="1">
		<kind public="1">
			<x path="vscode.NotebookCellKind"/>
			<haxe_doc>* The {@link NotebookCellKind kind} of this cell data.</haxe_doc>
		</kind>
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The source value of this cell data - either source code or formatted text.</haxe_doc>
		</value>
		<languageId public="1">
			<c path="String"/>
			<haxe_doc>* The language identifier of the source value of this cell data. Any value from
	 * {@linkcode languages.getLanguages getLanguages} is possible.</haxe_doc>
		</languageId>
		<outputs public="1">
			<x path="Null"><c path="Array"><c path="vscode.NotebookCellOutput"/></c></x>
			<haxe_doc>* The outputs of this cell data.</haxe_doc>
		</outputs>
		<metadata public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
			<haxe_doc>* Arbitrary metadata of this cell data. Can be anything but must be JSON-stringifyable.</haxe_doc>
		</metadata>
		<executionSummary public="1">
			<x path="Null"><t path="vscode.NotebookCellExecutionSummary"/></x>
			<haxe_doc>* The execution summary of this cell data.</haxe_doc>
		</executionSummary>
		<new public="1" set="method">
			<f a="kind:value:languageId">
				<x path="vscode.NotebookCellKind"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create new cell data. Minimal cell data specifies its kind, its source value, and the
	 * language identifier of its source.
	 *
	 * @param kind The kind.
	 * @param value The source value.
	 * @param languageId The language identifier of the source value.</haxe_doc>
		</new>
		<haxe_doc>* NotebookCellData is the raw representation of notebook cells. Its is part of {@linkcode NotebookData}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookCellData"</e>
</m></meta>
	</class>
	<typedef path="vscode.NotebookCellExecution" params="" file="src/vscode/NotebookCellExecution.hx">
		<a>
			<token set="null">
				<t path="vscode.CancellationToken"/>
				<haxe_doc>* A cancellation token which will be triggered when the cell execution is canceled
	 * from the UI.
	 *
	 * _Note_ that the cancellation token will not be triggered when the {@link NotebookController controller}
	 * that created this execution uses an {@link NotebookController.interruptHandler interrupt-handler}.</haxe_doc>
			</token>
			<start set="method">
				<f a="?startTime">
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Signal that the execution has begun.
	 *
	 * @param startTime The time that execution began, in milliseconds in the Unix epoch. Used to drive the clock
	 * that shows for how long a cell has been running. If not given, the clock won't be shown.</haxe_doc>
			</start>
			<replaceOutputItems set="method">
				<f a="items:output">
					<x path="haxe.extern.EitherType">
						<c path="vscode.NotebookCellOutputItem"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutputItem"/></x>
					</x>
					<c path="vscode.NotebookCellOutput"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Replace all output items of existing cell output.
	 *
	 * @param items Output items that replace the items of existing output.
	 * @param output Output object that already exists.
	 * @returns A thenable that resolves when the operation finished.</haxe_doc>
			</replaceOutputItems>
			<replaceOutput set="method">
				<f a="out:?cell">
					<x path="haxe.extern.EitherType">
						<c path="vscode.NotebookCellOutput"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutput"/></x>
					</x>
					<t path="vscode.NotebookCell"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Replace the output of the cell that is executing or of another cell that is affected by this execution.
	 *
	 * @param out Output that replaces the current output.
	 * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of
	 * this execution.
	 * @returns A thenable that resolves when the operation finished.</haxe_doc>
			</replaceOutput>
			<executionOrder>
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>* Set and unset the order of this cell execution.</haxe_doc>
			</executionOrder>
			<end set="method">
				<f a="success:?endTime">
					<x path="Null"><x path="Bool"/></x>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Signal that execution has ended.
	 *
	 * @param success If true, a green check is shown on the cell status bar.
	 * If false, a red X is shown.
	 * If undefined, no check or X icon is shown.
	 * @param endTime The time that execution finished, in milliseconds in the Unix epoch.</haxe_doc>
			</end>
			<clearOutput set="method">
				<f a="?cell">
					<t path="vscode.NotebookCell"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Clears the output of the cell that is executing or of another cell that is affected by this execution.
	 *
	 * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of
	 * this execution.
	 * @returns A thenable that resolves when the operation finished.</haxe_doc>
			</clearOutput>
			<cell set="null">
				<t path="vscode.NotebookCell"/>
				<haxe_doc>* The {@link NotebookCell cell} for which this execution has been created.</haxe_doc>
			</cell>
			<appendOutputItems set="method">
				<f a="items:output">
					<x path="haxe.extern.EitherType">
						<c path="vscode.NotebookCellOutputItem"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutputItem"/></x>
					</x>
					<c path="vscode.NotebookCellOutput"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Append output items to existing cell output.
	 *
	 * @param items Output items that are append to existing output.
	 * @param output Output object that already exists.
	 * @returns A thenable that resolves when the operation finished.</haxe_doc>
			</appendOutputItems>
			<appendOutput set="method">
				<f a="out:?cell">
					<x path="haxe.extern.EitherType">
						<c path="vscode.NotebookCellOutput"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutput"/></x>
					</x>
					<t path="vscode.NotebookCell"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Append to the output of the cell that is executing or to another cell that is affected by this execution.
	 *
	 * @param out Output that is appended to the current output.
	 * @param cell Cell for which output is cleared. Defaults to the {@link NotebookCellExecution.cell cell} of
	 * this execution.
	 * @returns A thenable that resolves when the operation finished.</haxe_doc>
			</appendOutput>
		</a>
		<haxe_doc>* A NotebookCellExecution is how {@link NotebookController notebook controller} modify a notebook cell as
 * it is executing.
 *
 * When a cell execution object is created, the cell enters the {@linkcode NotebookCellExecutionState.Pending Pending} state.
 * When {@linkcode NotebookCellExecution.start start(...)} is called on the execution task, it enters the {@linkcode NotebookCellExecutionState.Executing Executing} state. When
 * {@linkcode NotebookCellExecution.end end(...)} is called, it enters the {@linkcode NotebookCellExecutionState.Idle Idle} state.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookCellExecutionSummary" params="" file="src/vscode/NotebookCellExecutionSummary.hx">
		<a>
			<timing set="null">
				<x path="Null"><a>
	<startTime><x path="Float"/></startTime>
	<endTime><x path="Float"/></endTime>
</a></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The times at which execution started and ended, as unix timestamps</haxe_doc>
			</timing>
			<success set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* If the execution finished successfully.</haxe_doc>
			</success>
			<executionOrder set="null">
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The order in which the execution happened.</haxe_doc>
			</executionOrder>
		</a>
		<haxe_doc>* The summary of a notebook cell execution.</haxe_doc>
	</typedef>
	<abstract path="vscode.NotebookCellKind" params="" file="src/vscode/NotebookCellKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A notebook cell kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookCellKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._NotebookCellKind.NotebookCellKind_Impl_" params="" file="src/vscode/NotebookCellKind.hx" private="1" module="vscode.NotebookCellKind" extern="1" final="1">
	<Markup public="1" set="null" static="1">
		<x path="vscode.NotebookCellKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A markup-cell is formatted source that is used for display.</haxe_doc>
	</Markup>
	<Code public="1" set="null" static="1">
		<x path="vscode.NotebookCellKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A code-cell is source that can be {@link NotebookController executed} and that
	 * produces {@link NotebookCellOutput output}.</haxe_doc>
	</Code>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"NotebookCellKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._NotebookCellKind.NotebookCellKind_Impl_" params="" file="src/vscode/NotebookCellKind.hx" private="1" module="vscode.NotebookCellKind" extern="1" final="1">
		<Markup public="1" set="null" static="1">
			<x path="vscode.NotebookCellKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A markup-cell is formatted source that is used for display.</haxe_doc>
		</Markup>
		<Code public="1" set="null" static="1">
			<x path="vscode.NotebookCellKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A code-cell is source that can be {@link NotebookController executed} and that
	 * produces {@link NotebookCellOutput output}.</haxe_doc>
		</Code>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookCellKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.NotebookCellOutput" params="" file="src/vscode/NotebookCellOutput.hx" extern="1">
		<items public="1">
			<c path="Array"><c path="vscode.NotebookCellOutputItem"/></c>
			<haxe_doc><![CDATA[* The output items of this output. Each item must represent the same result. _Note_ that repeated
	 * MIME types per output is invalid and that the editor will just pick one of them.
	 *
	 * ```ts
	 * new vscode.NotebookCellOutput([
	 * 	vscode.NotebookCellOutputItem.text('Hello', 'text/plain'),
	 * 	vscode.NotebookCellOutputItem.text('<i>Hello</i>', 'text/html'),
	 * 	vscode.NotebookCellOutputItem.text('_Hello_', 'text/markdown'),
	 * 	vscode.NotebookCellOutputItem.text('Hey', 'text/plain'), // INVALID: repeated type, editor will pick just one
	 * ])
	 * ```]]></haxe_doc>
		</items>
		<metadata public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
			<haxe_doc>* Arbitrary metadata for this cell output. Can be anything but must be JSON-stringifyable.</haxe_doc>
		</metadata>
		<new public="1" set="method">
			<f a="items:?metadata">
				<c path="Array"><c path="vscode.NotebookCellOutputItem"/></c>
				<x path="haxe.DynamicAccess"><x path="Any"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create new notebook output.
	 *
	 * @param items Notebook output items.
	 * @param metadata Optional metadata.</haxe_doc>
		</new>
		<haxe_doc>* Notebook cell output represents a result of executing a cell. It is a container type for multiple
 * {@link NotebookCellOutputItem output items} where contained items represent the same result but
 * use different MIME types.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookCellOutput"</e>
</m></meta>
	</class>
	<class path="vscode.NotebookCellOutputItem" params="" file="src/vscode/NotebookCellOutputItem.hx" extern="1">
		<text public="1" set="method" static="1">
			<f a="value:?mime">
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.NotebookCellOutputItem"/>
			</f>
			<haxe_doc>* Factory function to create a `NotebookCellOutputItem` from a string.
	 *
	 * *Note* that an UTF-8 encoder is used to create bytes for the string.
	 *
	 * @param value A string.
	 * @param mime Optional MIME type, defaults to `text/plain`.
	 * @returns A new output item object.</haxe_doc>
		</text>
		<json public="1" set="method" static="1">
			<f a="value:?mime">
				<x path="Any"/>
				<c path="String"/>
				<c path="vscode.NotebookCellOutputItem"/>
			</f>
			<haxe_doc>* Factory function to create a `NotebookCellOutputItem` from
	 * a JSON object.
	 *
	 * *Note* that this function is not expecting "stringified JSON" but
	 * an object that can be stringified. This function will throw an error
	 * when the passed value cannot be JSON-stringified.
	 *
	 * @param value A JSON-stringifyable value.
	 * @param mime Optional MIME type, defaults to `application/json`
	 * @returns A new output item object.</haxe_doc>
		</json>
		<stdout public="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<c path="vscode.NotebookCellOutputItem"/>
			</f>
			<haxe_doc>* Factory function to create a `NotebookCellOutputItem` that uses
	 * uses the `application/vnd.code.notebook.stdout` mime type.
	 *
	 * @param value A string.
	 * @returns A new output item object.</haxe_doc>
		</stdout>
		<stderr public="1" set="method" static="1">
			<f a="value">
				<c path="String"/>
				<c path="vscode.NotebookCellOutputItem"/>
			</f>
			<haxe_doc>* Factory function to create a `NotebookCellOutputItem` that uses
	 * uses the `application/vnd.code.notebook.stderr` mime type.
	 *
	 * @param value A string.
	 * @returns A new output item object.</haxe_doc>
		</stderr>
		<error public="1" set="method" static="1">
			<f a="value">
				<c path="js.lib.Error"/>
				<c path="vscode.NotebookCellOutputItem"/>
			</f>
			<haxe_doc>* Factory function to create a `NotebookCellOutputItem` that uses
	 * uses the `application/vnd.code.notebook.error` mime type.
	 *
	 * @param value An error object.
	 * @returns A new output item object.</haxe_doc>
		</error>
		<mime public="1">
			<c path="String"/>
			<haxe_doc>* The mime type which determines how the {@linkcode NotebookCellOutputItem.data data}-property
	 * is interpreted.
	 *
	 * Notebooks have built-in support for certain mime-types, extensions can add support for new
	 * types and override existing types.</haxe_doc>
		</mime>
		<data public="1">
			<c path="js.lib.Uint8Array"/>
			<haxe_doc>* The data of this output item. Must always be an array of unsigned 8-bit integers.</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:mime">
				<c path="js.lib.Uint8Array"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new notebook cell output item.
	 *
	 * @param data The value of the output item.
	 * @param mime The mime type of the output item.</haxe_doc>
		</new>
		<haxe_doc>* One representation of a {@link NotebookCellOutput notebook output}, defined by MIME type and data.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookCellOutputItem"</e>
</m></meta>
	</class>
	<abstract path="vscode.NotebookCellStatusBarAlignment" params="" file="src/vscode/NotebookCellStatusBarAlignment.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the alignment of status bar items.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookCellStatusBarAlignment"</e>
			</m>
		</meta>
		<impl><class path="vscode._NotebookCellStatusBarAlignment.NotebookCellStatusBarAlignment_Impl_" params="" file="src/vscode/NotebookCellStatusBarAlignment.hx" private="1" module="vscode.NotebookCellStatusBarAlignment" extern="1" final="1">
	<Left public="1" set="null" static="1">
		<x path="vscode.NotebookCellStatusBarAlignment"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Aligned to the left side.</haxe_doc>
	</Left>
	<Right public="1" set="null" static="1">
		<x path="vscode.NotebookCellStatusBarAlignment"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Aligned to the right side.</haxe_doc>
	</Right>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"NotebookCellStatusBarAlignment"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._NotebookCellStatusBarAlignment.NotebookCellStatusBarAlignment_Impl_" params="" file="src/vscode/NotebookCellStatusBarAlignment.hx" private="1" module="vscode.NotebookCellStatusBarAlignment" extern="1" final="1">
		<Left public="1" set="null" static="1">
			<x path="vscode.NotebookCellStatusBarAlignment"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Aligned to the left side.</haxe_doc>
		</Left>
		<Right public="1" set="null" static="1">
			<x path="vscode.NotebookCellStatusBarAlignment"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Aligned to the right side.</haxe_doc>
		</Right>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookCellStatusBarAlignment"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.NotebookCellStatusBarItem" params="" file="src/vscode/NotebookCellStatusBarItem.hx" extern="1">
		<text public="1">
			<c path="String"/>
			<haxe_doc>* The text to show for the item.</haxe_doc>
		</text>
		<alignment public="1">
			<x path="vscode.NotebookCellStatusBarAlignment"/>
			<haxe_doc>* Whether the item is aligned to the left or right.</haxe_doc>
		</alignment>
		<command public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.Command"/>
</x></x>
			<haxe_doc>* An optional {@linkcode Command} or identifier of a command to run on click.
	 *
	 * The command must be {@link commands.getCommands known}.
	 *
	 * Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}
	 * are used by the editor.</haxe_doc>
		</command>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* A tooltip to show when the item is hovered.</haxe_doc>
		</tooltip>
		<priority public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>* The priority of the item. A higher value item will be shown more to the left.</haxe_doc>
		</priority>
		<accessibilityInformation public="1">
			<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
			<haxe_doc>* Accessibility information used when a screen reader interacts with this item.</haxe_doc>
		</accessibilityInformation>
		<new public="1" set="method">
			<f a="text:alignment">
				<c path="String"/>
				<x path="vscode.NotebookCellStatusBarAlignment"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new NotebookCellStatusBarItem.
	 * @param text The text to show for the item.
	 * @param alignment Whether the item is aligned to the left or right.</haxe_doc>
		</new>
		<haxe_doc>* A contribution to a cell's status bar</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookCellStatusBarItem"</e>
</m></meta>
	</class>
	<typedef path="vscode.NotebookCellStatusBarItemProvider" params="" file="src/vscode/NotebookCellStatusBarItemProvider.hx">
		<a>
			<provideCellStatusBarItems set="method">
				<f a="cell:token">
					<t path="vscode.NotebookCell"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.NotebookCellStatusBarItem"/>
	<c path="Array"><c path="vscode.NotebookCellStatusBarItem"/></c>
</x></t>
				</f>
				<haxe_doc>* The provider will be called when the cell scrolls into view, when its content, outputs, language, or metadata change, and when it changes execution state.
	 * @param cell The cell for which to return items.
	 * @param token A token triggered if this request should be cancelled.
	 * @returns One or more {@link NotebookCellStatusBarItem cell statusbar items}</haxe_doc>
			</provideCellStatusBarItems>
			<onDidChangeCellStatusBarItems>
				<x path="Null"><t path="vscode.Event"><x path="Void"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that statusbar items have changed. The provide method will be called again.</haxe_doc>
			</onDidChangeCellStatusBarItems>
		</a>
		<haxe_doc>* A provider that can contribute items to the status bar that appears below a cell's editor.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookController" params="" file="src/vscode/NotebookController.hx">
		<a>
			<updateNotebookAffinity set="method">
				<f a="notebook:affinity">
					<t path="vscode.NotebookDocument"/>
					<x path="vscode.NotebookControllerAffinity"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* A controller can set affinities for specific notebook documents. This allows a controller
	 * to be presented more prominent for some notebooks.
	 *
	 * @param notebook The notebook for which a priority is set.
	 * @param affinity A controller affinity</haxe_doc>
			</updateNotebookAffinity>
			<supportsExecutionOrder>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether this controller supports execution order so that the
	 * editor can render placeholders for them.</haxe_doc>
			</supportsExecutionOrder>
			<supportedLanguages>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An array of language identifiers that are supported by this
	 * controller. Any language identifier from {@linkcode languages.getLanguages getLanguages}
	 * is possible. When falsy all languages are supported.
	 *
	 * Samples:
	 * ```js
	 * // support JavaScript and TypeScript
	 * myController.supportedLanguages = ['javascript', 'typescript']
	 *
	 * // support all languages
	 * myController.supportedLanguages = undefined; // falsy
	 * myController.supportedLanguages = []; // falsy
	 * ```</haxe_doc>
			</supportedLanguages>
			<onDidChangeSelectedNotebooks set="null">
				<t path="vscode.Event"><a>
	<selected><x path="Bool"/></selected>
	<notebook><t path="vscode.NotebookDocument"/></notebook>
</a></t>
				<haxe_doc>* An event that fires whenever a controller has been selected or un-selected for a notebook document.
	 *
	 * There can be multiple controllers for a notebook and in that case a controllers needs to be _selected_. This is a user gesture
	 * and happens either explicitly or implicitly when interacting with a notebook for which a controller was _suggested_. When possible,
	 * the editor _suggests_ a controller that is most likely to be _selected_.
	 *
	 * _Note_ that controller selection is persisted (by the controllers {@link NotebookController.id id}) and restored as soon as a
	 * controller is re-created or as a notebook is {@link workspace.onDidOpenNotebookDocument opened}.</haxe_doc>
			</onDidChangeSelectedNotebooks>
			<notebookType set="null">
				<c path="String"/>
				<haxe_doc>* The notebook type this controller is for.</haxe_doc>
			</notebookType>
			<label>
				<c path="String"/>
				<haxe_doc>* The human-readable label of this notebook controller.</haxe_doc>
			</label>
			<interruptHandler>
				<x path="Null"><f a="notebook">
	<t path="vscode.NotebookDocument"/>
	<x path="js.lib.Thenable"><x path="Void"/></x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional interrupt handler.
	 *
	 * By default cell execution is canceled via {@link NotebookCellExecution.token tokens}. Cancellation
	 * tokens require that a controller can keep track of its execution so that it can cancel a specific execution at a later
	 * point. Not all scenarios allow for that, eg. REPL-style controllers often work by interrupting whatever is currently
	 * running. For those cases the interrupt handler exists - it can be thought of as the equivalent of `SIGINT`
	 * or `Control+C` in terminals.
	 *
	 * _Note_ that supporting {@link NotebookCellExecution.token cancellation tokens} is preferred and that interrupt handlers should
	 * only be used when tokens cannot be supported.</haxe_doc>
			</interruptHandler>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of this notebook controller.
	 *
	 * _Note_ that controllers are remembered by their identifier and that extensions should use
	 * stable identifiers across sessions.</haxe_doc>
			</id>
			<executeHandler>
				<f a="cells:notebook:controller">
					<c path="Array"><t path="vscode.NotebookCell"/></c>
					<t path="vscode.NotebookDocument"/>
					<t path="vscode.NotebookController"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* The execute handler is invoked when the run gestures in the UI are selected, e.g Run Cell, Run All,
	 * Run Selection etc. The execute handler is responsible for creating and managing {@link NotebookCellExecution execution}-objects.</haxe_doc>
			</executeHandler>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources.</haxe_doc>
			</dispose>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The human-readable detail which is rendered less prominent.</haxe_doc>
			</detail>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The human-readable description which is rendered less prominent.</haxe_doc>
			</description>
			<createNotebookCellExecution set="method">
				<f a="cell">
					<t path="vscode.NotebookCell"/>
					<t path="vscode.NotebookCellExecution"/>
				</f>
				<haxe_doc>* Create a cell execution task.
	 *
	 * _Note_ that there can only be one execution per cell at a time and that an error is thrown if
	 * a cell execution is created while another is still active.
	 *
	 * This should be used in response to the {@link NotebookController.executeHandler execution handler}
	 * being called or when cell execution has been started else, e.g when a cell was already
	 * executing or when cell execution was triggered from another source.
	 *
	 * @param cell The notebook cell for which to create the execution.
	 * @returns A notebook cell execution.</haxe_doc>
			</createNotebookCellExecution>
		</a>
		<haxe_doc>* A notebook controller represents an entity that can execute notebook cells. This is often referred to as a kernel.
 *
 * There can be multiple controllers and the editor will let users choose which controller to use for a certain notebook. The
 * {@linkcode NotebookController.notebookType notebookType}-property defines for what kind of notebooks a controller is for and
 * the {@linkcode NotebookController.updateNotebookAffinity updateNotebookAffinity}-function allows controllers to set a preference
 * for specific notebook documents. When a controller has been selected its
 * {@link NotebookController.onDidChangeSelectedNotebooks onDidChangeSelectedNotebooks}-event fires.
 *
 * When a cell is being run the editor will invoke the {@linkcode NotebookController.executeHandler executeHandler} and a controller
 * is expected to create and finalize a {@link NotebookCellExecution notebook cell execution}. However, controllers are also free
 * to create executions by themselves.</haxe_doc>
	</typedef>
	<abstract path="vscode.NotebookControllerAffinity" params="" file="src/vscode/NotebookControllerAffinity.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Notebook controller affinity for notebook documents.
 *
 * @see {@link NotebookController.updateNotebookAffinity}</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookControllerAffinity"</e>
			</m>
		</meta>
		<impl><class path="vscode._NotebookControllerAffinity.NotebookControllerAffinity_Impl_" params="" file="src/vscode/NotebookControllerAffinity.hx" private="1" module="vscode.NotebookControllerAffinity" extern="1" final="1">
	<Default public="1" set="null" static="1">
		<x path="vscode.NotebookControllerAffinity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Default affinity.</haxe_doc>
	</Default>
	<Preferred public="1" set="null" static="1">
		<x path="vscode.NotebookControllerAffinity"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A controller is preferred for a notebook.</haxe_doc>
	</Preferred>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"NotebookControllerAffinity"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._NotebookControllerAffinity.NotebookControllerAffinity_Impl_" params="" file="src/vscode/NotebookControllerAffinity.hx" private="1" module="vscode.NotebookControllerAffinity" extern="1" final="1">
		<Default public="1" set="null" static="1">
			<x path="vscode.NotebookControllerAffinity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Default affinity.</haxe_doc>
		</Default>
		<Preferred public="1" set="null" static="1">
			<x path="vscode.NotebookControllerAffinity"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A controller is preferred for a notebook.</haxe_doc>
		</Preferred>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookControllerAffinity"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.NotebookData" params="" file="src/vscode/NotebookData.hx" extern="1">
		<cells public="1">
			<c path="Array"><c path="vscode.NotebookCellData"/></c>
			<haxe_doc>* The cell data of this notebook data.</haxe_doc>
		</cells>
		<metadata public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
			<haxe_doc>* Arbitrary metadata of notebook data.</haxe_doc>
		</metadata>
		<new public="1" set="method">
			<f a="cells">
				<c path="Array"><c path="vscode.NotebookCellData"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create new notebook data.
	 *
	 * @param cells An array of cell data.</haxe_doc>
		</new>
		<haxe_doc>* Raw representation of a notebook.
 *
 * Extensions are responsible for creating {@linkcode NotebookData} so that the editor
 * can create a {@linkcode NotebookDocument}.
 *
 * @see {@link NotebookSerializer}</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookData"</e>
</m></meta>
	</class>
	<typedef path="vscode.NotebookDocument" params="" file="src/vscode/NotebookDocument.hx">
		<a>
			<version set="null">
				<x path="Int"/>
				<haxe_doc>* The version number of this notebook (it will strictly increase after each
	 * change, including undo/redo).</haxe_doc>
			</version>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this notebook.
	 *
	 * *Note* that most notebooks use the `file`-scheme, which means they are files on disk. However, **not** all notebooks are
	 * saved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.
	 *
	 * @see {@link FileSystemProvider}</haxe_doc>
			</uri>
			<save set="method">
				<f a=""><x path="js.lib.Thenable"><x path="Bool"/></x></f>
				<haxe_doc>* Save the document. The saving will be handled by the corresponding {@link NotebookSerializer serializer}.
	 *
	 * @returns A promise that will resolve to true when the document
	 * has been saved. Will return false if the file was not dirty or when save failed.</haxe_doc>
			</save>
			<notebookType set="null">
				<c path="String"/>
				<haxe_doc>* The type of notebook.</haxe_doc>
			</notebookType>
			<metadata set="null">
				<x path="haxe.DynamicAccess"><x path="Any"/></x>
				<haxe_doc>* Arbitrary metadata for this notebook. Can be anything but must be JSON-stringifyable.</haxe_doc>
			</metadata>
			<isUntitled set="null">
				<x path="Bool"/>
				<haxe_doc>* Is this notebook representing an untitled file which has not been saved yet.</haxe_doc>
			</isUntitled>
			<isDirty set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if there are unpersisted changes.</haxe_doc>
			</isDirty>
			<isClosed set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the notebook has been closed. A closed notebook isn't synchronized anymore
	 * and won't be re-used when the same resource is opened again.</haxe_doc>
			</isClosed>
			<getCells set="method">
				<f a="?range">
					<c path="vscode.NotebookRange"/>
					<c path="Array"><t path="vscode.NotebookCell"/></c>
				</f>
				<haxe_doc>* Get the cells of this notebook. A subset can be retrieved by providing
	 * a range. The range will be adjusted to the notebook.
	 *
	 * @param range A notebook range.
	 * @returns The cells contained by the range or all cells.</haxe_doc>
			</getCells>
			<cellCount set="null">
				<x path="Int"/>
				<haxe_doc>* The number of cells in the notebook.</haxe_doc>
			</cellCount>
			<cellAt set="method">
				<f a="index">
					<x path="Int"/>
					<t path="vscode.NotebookCell"/>
				</f>
				<haxe_doc>* Return the cell at the specified index. The index will be adjusted to the notebook.
	 *
	 * @param index - The index of the cell to retrieve.
	 * @returns A {@link NotebookCell cell}.</haxe_doc>
			</cellAt>
		</a>
		<haxe_doc>* Represents a notebook which itself is a sequence of {@link NotebookCell code or markup cells}. Notebook documents are
 * created from {@link NotebookData notebook data}.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookDocumentCellChange" params="" file="src/vscode/NotebookDocumentCellChange.hx">
		<a>
			<outputs set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookCellOutput"/></x></x>
				<haxe_doc>* The new outputs of the cell or `undefined` when they did not change.</haxe_doc>
			</outputs>
			<metadata set="null">
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
				<haxe_doc>* The new metadata of the cell or `undefined` when it did not change.</haxe_doc>
			</metadata>
			<executionSummary set="null">
				<x path="Null"><t path="vscode.NotebookCellExecutionSummary"/></x>
				<haxe_doc>* The new execution summary of the cell or `undefined` when it did not change.</haxe_doc>
			</executionSummary>
			<document set="null">
				<x path="Null"><c path="vscode.TextDocument"/></x>
				<haxe_doc>* The document of the cell or `undefined` when it did not change.
	 *
	 * *Note* that you should use the {@link workspace.onDidChangeTextDocument onDidChangeTextDocument}-event
	 * for detailed change information, like what edits have been performed.</haxe_doc>
			</document>
			<cell set="null">
				<t path="vscode.NotebookCell"/>
				<haxe_doc>* The affected cell.</haxe_doc>
			</cell>
		</a>
		<haxe_doc>* Describes a change to a notebook cell.
 *
 * @see {@link NotebookDocumentChangeEvent}</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookDocumentChangeEvent" params="" file="src/vscode/NotebookDocumentChangeEvent.hx">
		<a>
			<notebook set="null">
				<t path="vscode.NotebookDocument"/>
				<haxe_doc>* The affected notebook.</haxe_doc>
			</notebook>
			<metadata set="null">
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
				<haxe_doc>* The new metadata of the notebook or `undefined` when it did not change.</haxe_doc>
			</metadata>
			<contentChanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookDocumentContentChange"/></x>
				<haxe_doc>* An array of content changes describing added or removed {@link NotebookCell cells}.</haxe_doc>
			</contentChanges>
			<cellChanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookDocumentCellChange"/></x>
				<haxe_doc>* An array of {@link NotebookDocumentCellChange cell changes}.</haxe_doc>
			</cellChanges>
		</a>
		<haxe_doc>* An event describing a transactional {@link NotebookDocument notebook} change.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookDocumentContentChange" params="" file="src/vscode/NotebookDocumentContentChange.hx">
		<a>
			<removedCells set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookCell"/></x>
				<haxe_doc>* Cells that have been removed from the document.</haxe_doc>
			</removedCells>
			<range set="null">
				<c path="vscode.NotebookRange"/>
				<haxe_doc>* The range at which cells have been either added or removed.
	 *
	 * Note that no cells have been {@link NotebookDocumentContentChange.removedCells removed}
	 * when this range is {@link NotebookRange.isEmpty empty}.</haxe_doc>
			</range>
			<addedCells set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.NotebookCell"/></x>
				<haxe_doc>* Cells that have been added to the document.</haxe_doc>
			</addedCells>
		</a>
		<haxe_doc>* Describes a structural change to a notebook document, e.g newly added and removed cells.
 *
 * @see {@link NotebookDocumentChangeEvent}</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookDocumentContentOptions" params="" file="src/vscode/NotebookDocumentContentOptions.hx">
		<a>
			<transientOutputs>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if output change events will trigger notebook document content change events and
	 * if it will be used in the diff editor, defaults to false. If the content provider doesn't
	 * persist the outputs in the file document, this should be set to true.</haxe_doc>
			</transientOutputs>
			<transientDocumentMetadata>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Null"><x path="Bool"/></x></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a document metadata property change event will trigger notebook document
	 * content change event and if it will be used in the diff editor, defaults to false. If the
	 * content provider doesn't persist a metadata property in the file document, it should be
	 * set to true.</haxe_doc>
			</transientDocumentMetadata>
			<transientCellMetadata>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Null"><x path="Bool"/></x></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a cell metadata property change event will trigger notebook document content
	 * change events and if it will be used in the diff editor, defaults to false. If the
	 * content provider doesn't persist a metadata property in the file document, it should be
	 * set to true.</haxe_doc>
			</transientCellMetadata>
		</a>
		<haxe_doc>* Notebook content options define what parts of a notebook are persisted. Note
 *
 * For instance, a notebook serializer can opt-out of saving outputs and in that case the editor doesn't mark a
 * notebooks as {@link NotebookDocument.isDirty dirty} when its output has changed.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookDocumentShowOptions" params="" file="src/vscode/NotebookDocumentShowOptions.hx">
		<a>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional view column in which the {@link NotebookEditor notebook editor} should be shown.
	 * The default is the {@link ViewColumn.Active active}. Columns that do not exist
	 * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.
	 * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently
	 * active one.</haxe_doc>
			</viewColumn>
			<selections set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookRange"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional selection to apply for the document in the {@link NotebookEditor notebook editor}.</haxe_doc>
			</selections>
			<preview set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that controls if an {@link NotebookEditor notebook editor}-tab shows as preview. Preview tabs will
	 * be replaced and reused until set to stay - either explicitly or through editing. The default behaviour depends
	 * on the `workbench.editor.enablePreview`-setting.</haxe_doc>
			</preview>
			<preserveFocus set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that when `true` will stop the {@link NotebookEditor notebook editor} from taking focus.</haxe_doc>
			</preserveFocus>
		</a>
		<haxe_doc>* Represents options to configure the behavior of showing a {@link NotebookDocument notebook document} in an {@link NotebookEditor notebook editor}.</haxe_doc>
	</typedef>
	<class path="vscode.NotebookDocumentWillSaveEvent" params="" file="src/vscode/NotebookDocumentWillSaveEvent.hx" extern="1">
		<token public="1" set="null">
			<t path="vscode.CancellationToken"/>
			<haxe_doc>* A cancellation token.</haxe_doc>
		</token>
		<notebook public="1" set="null">
			<t path="vscode.NotebookDocument"/>
			<haxe_doc>* The {@link NotebookDocument notebook document} that will be saved.</haxe_doc>
		</notebook>
		<reason public="1" set="null">
			<x path="vscode.TextDocumentSaveReason"/>
			<haxe_doc>* The reason why save was triggered.</haxe_doc>
		</reason>
		<waitUntil public="1" set="method">
			<f a="thenable">
				<x path="js.lib.Thenable"><c path="vscode.WorkspaceEdit"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Allows to pause the event loop and to apply {@link WorkspaceEdit workspace edit}.
	 * Edits of subsequent calls to this function will be applied in order. The
	 * edits will be *ignored* if concurrent modifications of the notebook document happened.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillSaveNotebookDocument(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that resolves to {@link WorkspaceEdit workspace edit}.]]></haxe_doc>
			<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><x path="Any"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Allows to pause the event loop until the provided thenable resolved.
	 *
	 * *Note:* This function can only be called during event dispatch.
	 *
	 * @param thenable A thenable that delays saving.</haxe_doc>
</waitUntil></overloads>
		</waitUntil>
		<haxe_doc>* An event that is fired when a {@link NotebookDocument notebook document} will be saved.
 *
 * To make modifications to the document before it is being saved, call the
 * {@linkcode NotebookDocumentWillSaveEvent.waitUntil waitUntil}-function with a thenable
 * that resolves to a {@link WorkspaceEdit workspace edit}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookDocumentWillSaveEvent"</e>
</m></meta>
	</class>
	<class path="vscode.NotebookEdit" params="" file="src/vscode/NotebookEdit.hx" extern="1">
		<replaceCells public="1" set="method" static="1">
			<f a="range:newCells">
				<c path="vscode.NotebookRange"/>
				<c path="Array"><c path="vscode.NotebookCellData"/></c>
				<c path="vscode.NotebookEdit"/>
			</f>
			<haxe_doc>* Utility to create a edit that replaces cells in a notebook.
	 *
	 * @param range The range of cells to replace
	 * @param newCells The new notebook cells.</haxe_doc>
		</replaceCells>
		<insertCells public="1" set="method" static="1">
			<f a="index:newCells">
				<x path="Int"/>
				<c path="Array"><c path="vscode.NotebookCellData"/></c>
				<c path="vscode.NotebookEdit"/>
			</f>
			<haxe_doc>* Utility to create an edit that replaces cells in a notebook.
	 *
	 * @param index The index to insert cells at.
	 * @param newCells The new notebook cells.</haxe_doc>
		</insertCells>
		<deleteCells public="1" set="method" static="1">
			<f a="range">
				<c path="vscode.NotebookRange"/>
				<c path="vscode.NotebookEdit"/>
			</f>
			<haxe_doc>* Utility to create an edit that deletes cells in a notebook.
	 *
	 * @param range The range of cells to delete.</haxe_doc>
		</deleteCells>
		<updateCellMetadata public="1" set="method" static="1">
			<f a="index:newCellMetadata">
				<x path="Int"/>
				<x path="haxe.DynamicAccess"><x path="Any"/></x>
				<c path="vscode.NotebookEdit"/>
			</f>
			<haxe_doc>* Utility to create an edit that update a cell's metadata.
	 *
	 * @param index The index of the cell to update.
	 * @param newCellMetadata The new metadata for the cell.</haxe_doc>
		</updateCellMetadata>
		<updateNotebookMetadata public="1" set="method" static="1">
			<f a="newNotebookMetadata">
				<x path="haxe.DynamicAccess"><x path="Any"/></x>
				<c path="vscode.NotebookEdit"/>
			</f>
			<haxe_doc>* Utility to create an edit that updates the notebook's metadata.
	 *
	 * @param newNotebookMetadata The new metadata for the notebook.</haxe_doc>
		</updateNotebookMetadata>
		<range public="1">
			<c path="vscode.NotebookRange"/>
			<haxe_doc>* Range of the cells being edited. May be empty.</haxe_doc>
		</range>
		<newCells public="1">
			<c path="Array"><c path="vscode.NotebookCellData"/></c>
			<haxe_doc>* New cells being inserted. May be empty.</haxe_doc>
		</newCells>
		<newCellMetadata public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
			<haxe_doc>* Optional new metadata for the cells.</haxe_doc>
		</newCellMetadata>
		<newNotebookMetadata public="1">
			<x path="Null"><x path="haxe.DynamicAccess"><x path="Any"/></x></x>
			<haxe_doc>* Optional new metadata for the notebook.</haxe_doc>
		</newNotebookMetadata>
		<new public="1" set="method">
			<f a="range:newCells">
				<c path="vscode.NotebookRange"/>
				<c path="Array"><c path="vscode.NotebookCellData"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new notebook edit.
	 *
	 * @param range A notebook range.
	 * @param newCells An array of new cell data.</haxe_doc>
		</new>
		<haxe_doc>* A notebook edit represents edits that should be applied to the contents of a notebook.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookEdit"</e>
</m></meta>
	</class>
	<typedef path="vscode.NotebookEditor" params="" file="src/vscode/NotebookEditor.hx">
		<a>
			<visibleRanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookRange"/></x>
				<haxe_doc>* The current visible ranges in the editor (vertically).</haxe_doc>
			</visibleRanges>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The column in which this editor shows.</haxe_doc>
			</viewColumn>
			<selections>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookRange"/></x>
				<haxe_doc>* All selections in this notebook editor.
	 *
	 * The primary selection (or focused range) is `selections[0]`. When the document has no cells, the primary selection is empty `{ start: 0, end: 0 }`;</haxe_doc>
			</selections>
			<selection>
				<c path="vscode.NotebookRange"/>
				<haxe_doc>* The primary selection in this notebook editor.</haxe_doc>
			</selection>
			<revealRange set="method">
				<f a="range:?revealType">
					<c path="vscode.NotebookRange"/>
					<x path="vscode.NotebookEditorRevealType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Scroll as indicated by `revealType` in order to reveal the given range.
	 *
	 * @param range A range.
	 * @param revealType The scrolling strategy for revealing `range`.</haxe_doc>
			</revealRange>
			<notebook set="null">
				<t path="vscode.NotebookDocument"/>
				<haxe_doc>* The {@link NotebookDocument notebook document} associated with this notebook editor.</haxe_doc>
			</notebook>
		</a>
		<haxe_doc>* Represents a notebook editor that is attached to a {@link NotebookDocument notebook}.
 * Additional properties of the NotebookEditor are available in the proposed
 * API, which will be finalized later.</haxe_doc>
	</typedef>
	<abstract path="vscode.NotebookEditorRevealType" params="" file="src/vscode/NotebookEditorRevealType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents a notebook editor that is attached to a {@link NotebookDocument notebook}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookEditorRevealType"</e>
			</m>
		</meta>
		<impl><class path="vscode._NotebookEditorRevealType.NotebookEditorRevealType_Impl_" params="" file="src/vscode/NotebookEditorRevealType.hx" private="1" module="vscode.NotebookEditorRevealType" extern="1" final="1">
	<Default public="1" set="null" static="1">
		<x path="vscode.NotebookEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
	</Default>
	<InCenter public="1" set="null" static="1">
		<x path="vscode.NotebookEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
	</InCenter>
	<InCenterIfOutsideViewport public="1" set="null" static="1">
		<x path="vscode.NotebookEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
	</InCenterIfOutsideViewport>
	<AtTop public="1" set="null" static="1">
		<x path="vscode.NotebookEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
	</AtTop>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"NotebookEditorRevealType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._NotebookEditorRevealType.NotebookEditorRevealType_Impl_" params="" file="src/vscode/NotebookEditorRevealType.hx" private="1" module="vscode.NotebookEditorRevealType" extern="1" final="1">
		<Default public="1" set="null" static="1">
			<x path="vscode.NotebookEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
		</Default>
		<InCenter public="1" set="null" static="1">
			<x path="vscode.NotebookEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
		</InCenter>
		<InCenterIfOutsideViewport public="1" set="null" static="1">
			<x path="vscode.NotebookEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
		</InCenterIfOutsideViewport>
		<AtTop public="1" set="null" static="1">
			<x path="vscode.NotebookEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
		</AtTop>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"NotebookEditorRevealType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.NotebookEditorSelectionChangeEvent" params="" file="src/vscode/NotebookEditorSelectionChangeEvent.hx">
		<a>
			<selections set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookRange"/></x>
				<haxe_doc>* The new value for the {@link NotebookEditor.selections notebook editor's selections}.</haxe_doc>
			</selections>
			<notebookEditor set="null">
				<t path="vscode.NotebookEditor"/>
				<haxe_doc>* The {@link NotebookEditor notebook editor} for which the selections have changed.</haxe_doc>
			</notebookEditor>
		</a>
		<haxe_doc>* Represents an event describing the change in a {@link NotebookEditor.selections notebook editor's selections}.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookEditorVisibleRangesChangeEvent" params="" file="src/vscode/NotebookEditorVisibleRangesChangeEvent.hx">
		<a>
			<visibleRanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookRange"/></x>
				<haxe_doc>* The new value for the {@link NotebookEditor.visibleRanges notebook editor's visibleRanges}.</haxe_doc>
			</visibleRanges>
			<notebookEditor set="null">
				<t path="vscode.NotebookEditor"/>
				<haxe_doc>* The {@link NotebookEditor notebook editor} for which the visible ranges have changed.</haxe_doc>
			</notebookEditor>
		</a>
		<haxe_doc>* Represents an event describing the change in a {@link NotebookEditor.visibleRanges notebook editor's visibleRanges}.</haxe_doc>
	</typedef>
	<class path="vscode.NotebookRange" params="" file="src/vscode/NotebookRange.hx" extern="1">
		<start public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The zero-based start index of this range.</haxe_doc>
		</start>
		<end public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The exclusive end index of this range (zero-based).</haxe_doc>
		</end>
		<isEmpty public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* `true` if `start` and `end` are equal.</haxe_doc>
		</isEmpty>
		<with public="1" set="method">
			<f a="change">
				<a>
					<start>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
					</start>
					<end>
						<x path="Null"><x path="Int"/></x>
						<meta><m n=":optional"/></meta>
					</end>
				</a>
				<c path="vscode.NotebookRange"/>
			</f>
			<haxe_doc>* Derive a new range for this range.
	 *
	 * @param change An object that describes a change to this range.
	 * @returns A range that reflects the given change. Will return `this` range if the change
	 * is not changing anything.</haxe_doc>
		</with>
		<new public="1" set="method">
			<f a="start:end">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new notebook range. If `start` is not
	 * before or equal to `end`, the values will be swapped.
	 *
	 * @param start start index
	 * @param end end index.</haxe_doc>
		</new>
		<haxe_doc>* A notebook range represents an ordered pair of two cell indices.
 * It is guaranteed that start is less than or equal to end.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"NotebookRange"</e>
</m></meta>
	</class>
	<typedef path="vscode.NotebookRendererMessaging" params="" file="src/vscode/NotebookRendererMessaging.hx">
		<a>
			<postMessage set="method">
				<f a="message:?editor">
					<x path="Any"/>
					<t path="vscode.NotebookEditor"/>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Send a message to one or all renderer.
	 *
	 * @param message Message to send
	 * @param editor Editor to target with the message. If not provided, the
	 * message is sent to all renderers.
	 * @returns a boolean indicating whether the message was successfully
	 * delivered to any renderer.</haxe_doc>
			</postMessage>
			<onDidReceiveMessage set="null">
				<t path="vscode.Event"><a>
	<message final="1" set="null">
		<x path="Any"/>
		<haxe_doc>* The actual message.</haxe_doc>
	</message>
	<editor final="1" set="null">
		<t path="vscode.NotebookEditor"/>
		<haxe_doc>* The {@link NotebookEditor editor} that sent the message.</haxe_doc>
	</editor>
</a></t>
				<haxe_doc>* An event that fires when a message is received from a renderer.</haxe_doc>
			</onDidReceiveMessage>
		</a>
		<haxe_doc>* Renderer messaging is used to communicate with a single renderer. It's returned from {@link notebooks.createRendererMessaging}.</haxe_doc>
	</typedef>
	<typedef path="vscode.NotebookSerializer" params="" file="src/vscode/NotebookSerializer.hx">
		<a>
			<serializeNotebook set="method">
				<f a="data:token">
					<c path="vscode.NotebookData"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<c path="js.lib.Uint8Array"/>
						<x path="js.lib.Thenable"><c path="js.lib.Uint8Array"/></x>
					</x>
				</f>
				<haxe_doc>* Serialize notebook data into file contents.
	 *
	 * @param data A notebook data structure.
	 * @param token A cancellation token.
	 * @returns An array of bytes or a thenable that resolves to such.</haxe_doc>
			</serializeNotebook>
			<deserializeNotebook set="method">
				<f a="content:token">
					<c path="js.lib.Uint8Array"/>
					<t path="vscode.CancellationToken"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.NotebookData"/>
						<x path="js.lib.Thenable"><c path="vscode.NotebookData"/></x>
					</x>
				</f>
				<haxe_doc>* Deserialize contents of a notebook file into the notebook data structure.
	 *
	 * @param content Contents of a notebook file.
	 * @param token A cancellation token.
	 * @returns Notebook data or a thenable that resolves to such.</haxe_doc>
			</deserializeNotebook>
		</a>
		<haxe_doc>* The notebook serializer enables the editor to open notebook files.
 *
 * At its core the editor only knows a {@link NotebookData notebook data structure} but not
 * how that data structure is written to a file, nor how it is read from a file. The
 * notebook serializer bridges this gap by deserializing bytes into notebook data and
 * vice versa.</haxe_doc>
	</typedef>
	<typedef path="vscode.OnEnterRule" params="" file="src/vscode/OnEnterRule.hx">
		<a>
			<previousLineText>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This rule will only execute if the text above the current line matches this regular expression.</haxe_doc>
			</previousLineText>
			<beforeText>
				<c path="js.lib.RegExp"/>
				<haxe_doc>* This rule will only execute if the text before the cursor matches this regular expression.</haxe_doc>
			</beforeText>
			<afterText>
				<x path="Null"><c path="js.lib.RegExp"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* This rule will only execute if the text after the cursor matches this regular expression.</haxe_doc>
			</afterText>
			<action>
				<t path="vscode.EnterAction"/>
				<haxe_doc>* The action to execute.</haxe_doc>
			</action>
		</a>
		<haxe_doc>* Describes a rule to be evaluated when pressing Enter.</haxe_doc>
	</typedef>
	<typedef path="vscode.OnTypeFormattingEditProvider" params="" file="src/vscode/OnTypeFormattingEditProvider.hx">
		<a><provideOnTypeFormattingEdits set="method">
	<f a="document:position:ch:options:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<c path="String"/>
		<t path="vscode.FormattingOptions"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TextEdit"/></c></t>
	</f>
	<haxe_doc>* Provide formatting edits after a character has been typed.
	 *
	 * The given position and character should hint to the provider
	 * what range the position to expand to, like find the matching `{`
	 * when `}` has been entered.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param ch The character that has been typed.
	 * @param options Options controlling formatting.
	 * @param token A cancellation token.
	 * @returns A set of text edits or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideOnTypeFormattingEdits></a>
		<haxe_doc>* The document formatting provider interface defines the contract between extensions and
 * the formatting-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.OpenDialogOptions" params="" file="src/vscode/OpenDialogOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Dialog title.
	 *
	 * This parameter might be ignored, as not all operating systems display a title on open dialogs
	 * (for example, macOS).</haxe_doc>
			</title>
			<openLabel>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string for the open button.</haxe_doc>
			</openLabel>
			<filters>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="Array"><c path="String"/></c></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of file filters that are used by the dialog. Each entry is a human-readable label,
	 * like "TypeScript", and an array of extensions, for example:
	 * ```ts
	 * {
	 * 	'Images': ['png', 'jpg'],
	 * 	'TypeScript': ['ts', 'tsx']
	 * }
	 * ```</haxe_doc>
			</filters>
			<defaultUri>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The resource the dialog shows when opened.</haxe_doc>
			</defaultUri>
			<canSelectMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select many files or folders.</haxe_doc>
			</canSelectMany>
			<canSelectFolders>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select folders, defaults to `false`.</haxe_doc>
			</canSelectFolders>
			<canSelectFiles>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Allow to select files, defaults to `true`.</haxe_doc>
			</canSelectFiles>
		</a>
		<haxe_doc>* Options to configure the behaviour of a file open dialog.
 *
 * * Note 1: On Windows and Linux, a file dialog cannot be both a file selector and a folder selector, so if you
 * set both `canSelectFiles` and `canSelectFolders` to `true` on these platforms, a folder selector will be shown.
 * * Note 2: Explicitly setting `canSelectFiles` and `canSelectFolders` to `false` is futile
 * and the editor then silently adjusts the options to select files.</haxe_doc>
	</typedef>
	<abstract path="vscode.OverviewRulerLane" params="" file="src/vscode/OverviewRulerLane.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents different positions for rendering a decoration in an {@link DecorationRenderOptions.overviewRulerLane overview ruler}.
 * The overview ruler supports three lanes.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"OverviewRulerLane"</e>
			</m>
		</meta>
		<impl><class path="vscode._OverviewRulerLane.OverviewRulerLane_Impl_" params="" file="src/vscode/OverviewRulerLane.hx" private="1" module="vscode.OverviewRulerLane" extern="1" final="1">
	<Left public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The left lane of the overview ruler.</haxe_doc>
	</Left>
	<Center public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The center lane of the overview ruler.</haxe_doc>
	</Center>
	<Right public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The right lane of the overview ruler.</haxe_doc>
	</Right>
	<Full public="1" set="null" static="1">
		<x path="vscode.OverviewRulerLane"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* All lanes of the overview ruler.</haxe_doc>
	</Full>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"OverviewRulerLane"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._OverviewRulerLane.OverviewRulerLane_Impl_" params="" file="src/vscode/OverviewRulerLane.hx" private="1" module="vscode.OverviewRulerLane" extern="1" final="1">
		<Left public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The left lane of the overview ruler.</haxe_doc>
		</Left>
		<Center public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The center lane of the overview ruler.</haxe_doc>
		</Center>
		<Right public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The right lane of the overview ruler.</haxe_doc>
		</Right>
		<Full public="1" set="null" static="1">
			<x path="vscode.OverviewRulerLane"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* All lanes of the overview ruler.</haxe_doc>
		</Full>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"OverviewRulerLane"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.ParameterInformation" params="" file="src/vscode/ParameterInformation.hx" extern="1">
		<label public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="Array"><x path="Int"/></c>
			</x>
			<haxe_doc>* The label of this signature.
	 *
	 * Either a string or inclusive start and exclusive end offsets within its containing
	 * {@link SignatureInformation.label signature label}. *Note*: A label of type string must be
	 * a substring of its containing signature information's {@link SignatureInformation.label label}.</haxe_doc>
		</label>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The human-readable doc-comment of this signature. Will be shown
	 * in the UI but can be omitted.</haxe_doc>
		</documentation>
		<new public="1" set="method">
			<f a="label:?documentation">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><x path="Int"/></c>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new parameter information object.
	 *
	 * @param label A label string or inclusive start and exclusive end offsets within its containing signature label.
	 * @param documentation A doc string.</haxe_doc>
		</new>
		<haxe_doc>* Represents a parameter of a callable-signature. A parameter can
 * have a label and a doc-comment.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ParameterInformation"</e>
</m></meta>
	</class>
	<class path="vscode.Position" params="" file="src/vscode/Position.hx" extern="1">
		<line public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The zero-based line value.</haxe_doc>
		</line>
		<character public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The zero-based character value.</haxe_doc>
		</character>
		<isBefore public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is before `other`.
	 *
	 * @param other A position.
	 * @returns `true` if position is on a smaller line
	 * or on the same line on a smaller character.</haxe_doc>
		</isBefore>
		<isBeforeOrEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is before or equal to `other`.
	 *
	 * @param other A position.
	 * @returns `true` if position is on a smaller line
	 * or on the same line on a smaller or equal character.</haxe_doc>
		</isBeforeOrEqual>
		<isAfter public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is after `other`.
	 *
	 * @param other A position.
	 * @returns `true` if position is on a greater line
	 * or on the same line on a greater character.</haxe_doc>
		</isAfter>
		<isAfterOrEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is after or equal to `other`.
	 *
	 * @param other A position.
	 * @returns `true` if position is on a greater line
	 * or on the same line on a greater or equal character.</haxe_doc>
		</isAfterOrEqual>
		<isEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this position is equal to `other`.
	 *
	 * @param other A position.
	 * @returns `true` if the line and character of the given position are equal to
	 * the line and character of this position.</haxe_doc>
		</isEqual>
		<compareTo public="1" set="method">
			<f a="other">
				<c path="vscode.Position"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Compare this to `other`.
	 *
	 * @param other A position.
	 * @returns A number smaller than zero if this position is before the given position,
	 * a number greater than zero if this position is after the given position, or zero when
	 * this and the given position are equal.</haxe_doc>
		</compareTo>
		<translate public="1" set="method">
			<f a="?lineDelta:?characterDelta">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Create a new position relative to this position.
	 *
	 * @param lineDelta Delta value for the line value, default is `0`.
	 * @param characterDelta Delta value for the character value, default is `0`.
	 * @returns A position which line and character is the sum of the current line and
	 * character and the corresponding deltas.</haxe_doc>
			<overloads><translate public="1" set="method">
	<f a="change">
		<a>
			<lineDelta>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</lineDelta>
			<characterDelta>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</characterDelta>
		</a>
		<c path="vscode.Position"/>
	</f>
	<haxe_doc>* Derived a new position relative to this position.
	 *
	 * @param change An object that describes a delta to this position.
	 * @returns A position that reflects the given delta. Will return `this` position if the change
	 * is not changing anything.</haxe_doc>
</translate></overloads>
		</translate>
		<with public="1" set="method">
			<f a="?line:?character">
				<x path="Int"/>
				<x path="Int"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Create a new position derived from this position.
	 *
	 * @param line Value that should be used as line value, default is the {@link Position.line existing value}
	 * @param character Value that should be used as character value, default is the {@link Position.character existing value}
	 * @returns A position where line and character are replaced by the given values.</haxe_doc>
			<overloads><with public="1" set="method">
	<f a="change">
		<a>
			<line>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</line>
			<character>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
			</character>
		</a>
		<c path="vscode.Position"/>
	</f>
	<haxe_doc>* Derived a new position from this position.
	 *
	 * @param change An object that describes a change to this position.
	 * @returns A position that reflects the given change. Will return `this` position if the change
	 * is not changing anything.</haxe_doc>
</with></overloads>
		</with>
		<new public="1" set="method">
			<f a="line:character">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param line A zero-based line value.
	 * @param character A zero-based character value.</haxe_doc>
		</new>
		<haxe_doc>* Represents a line and character position, such as
 * the position of the cursor.
 *
 * Position objects are __immutable__. Use the {@link Position.with with} or
 * {@link Position.translate translate} methods to derive new positions
 * from an existing position.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Position"</e>
</m></meta>
	</class>
	<typedef path="vscode.PreparedToolInvocation" params="" file="src/vscode/PreparedToolInvocation.hx">
		<a>
			<invocationMessage>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A customized progress message to show while the tool runs.</haxe_doc>
			</invocationMessage>
			<confirmationMessages>
				<x path="Null"><t path="vscode.LanguageModelToolConfirmationMessages"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The presence of this property indicates that the user should be asked to confirm before running the tool. The user
	 * should be asked for confirmation for any tool that has a side-effect or may potentially be dangerous.</haxe_doc>
			</confirmationMessages>
		</a>
		<haxe_doc>* The result of a call to {@link LanguageModelTool.prepareInvocation}.</haxe_doc>
	</typedef>
	<class path="vscode.ProcessExecution" params="" file="src/vscode/ProcessExecution.hx" extern="1">
		<process public="1">
			<c path="String"/>
			<haxe_doc>* The process to be executed.</haxe_doc>
		</process>
		<args public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The arguments passed to the process. Defaults to an empty array.</haxe_doc>
		</args>
		<options public="1">
			<x path="Null"><t path="vscode.ProcessExecutionOptions"/></x>
			<haxe_doc>* The process options used when the process is executed.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="process:?options">
				<c path="String"/>
				<x path="Null"><t path="vscode.ProcessExecutionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a process execution.
	 *
	 * @param process The process to start.
	 * @param args Arguments to be passed to the process.
	 * @param options Optional options for the started process.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="process:args:?options">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<x path="Null"><t path="vscode.ProcessExecutionOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a process execution.
	 *
	 * @param process The process to start.
	 * @param args Arguments to be passed to the process.
	 * @param options Optional options for the started process.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* The execution of a task happens as an external process
 * without shell interaction.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ProcessExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.ProcessExecutionOptions" params="" file="src/vscode/ProcessExecutionOptions.hx">
		<a>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed program or shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory of the executed program or shell.
	 * If omitted the tools current workspace root is used.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a process execution</haxe_doc>
	</typedef>
	<typedef path="vscode.Progress" params="T" file="src/vscode/Progress.hx">
		<a><report set="method">
	<f a="value">
		<c path="vscode.Progress.T"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Report a progress update.
	 * @param value A progress item, like a message and/or an
	 * report on how much work finished</haxe_doc>
</report></a>
		<haxe_doc>* Defines a generalized way of reporting progress updates.</haxe_doc>
	</typedef>
	<abstract path="vscode.ProgressLocation" params="" file="src/vscode/ProgressLocation.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A location in the editor at which progress information can be shown. It depends on the
 * location how progress is visually represented.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ProgressLocation"</e>
			</m>
		</meta>
		<impl><class path="vscode._ProgressLocation.ProgressLocation_Impl_" params="" file="src/vscode/ProgressLocation.hx" private="1" module="vscode.ProgressLocation" extern="1" final="1">
	<SourceControl public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Show progress for the source control viewlet, as overlay for the icon and as progress bar
	 * inside the viewlet (when visible). Neither supports cancellation nor discrete progress nor
	 * a label to describe the operation.</haxe_doc>
	</SourceControl>
	<Window public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc><![CDATA[* Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.
	 * Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax in the progress label.]]></haxe_doc>
	</Window>
	<Notification public="1" set="null" static="1">
		<x path="vscode.ProgressLocation"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Show progress as notification with an optional cancel button. Supports to show infinite and discrete
	 * progress but does not support rendering of icons.</haxe_doc>
	</Notification>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ProgressLocation"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ProgressLocation.ProgressLocation_Impl_" params="" file="src/vscode/ProgressLocation.hx" private="1" module="vscode.ProgressLocation" extern="1" final="1">
		<SourceControl public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Show progress for the source control viewlet, as overlay for the icon and as progress bar
	 * inside the viewlet (when visible). Neither supports cancellation nor discrete progress nor
	 * a label to describe the operation.</haxe_doc>
		</SourceControl>
		<Window public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc><![CDATA[* Show progress in the status bar of the editor. Neither supports cancellation nor discrete progress.
	 * Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax in the progress label.]]></haxe_doc>
		</Window>
		<Notification public="1" set="null" static="1">
			<x path="vscode.ProgressLocation"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Show progress as notification with an optional cancel button. Supports to show infinite and discrete
	 * progress but does not support rendering of icons.</haxe_doc>
		</Notification>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ProgressLocation"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ProgressOptions" params="" file="src/vscode/ProgressOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which will be used to describe the
	 * operation.</haxe_doc>
			</title>
			<location>
				<x path="haxe.extern.EitherType">
					<x path="vscode.ProgressLocation"/>
					<a><viewId><c path="String"/></viewId></a>
				</x>
				<haxe_doc>* The location at which progress should show.</haxe_doc>
			</location>
			<cancellable>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if a cancel button should show to allow the user to
	 * cancel the long running operation.  Note that currently only
	 * `ProgressLocation.Notification` is supporting to show a cancel
	 * button.</haxe_doc>
			</cancellable>
		</a>
		<haxe_doc>* Value-object describing where and how progress should show.</haxe_doc>
	</typedef>
	<typedef path="vscode.ProviderResult" params="T" file="src/vscode/ProviderResult.hx">
		<x path="haxe.extern.EitherType">
			<c path="vscode.ProviderResult.T"/>
			<x path="js.lib.Thenable"><c path="vscode.ProviderResult.T"/></x>
		</x>
		<haxe_doc><![CDATA[* A provider result represents the values a provider, like the {@linkcode HoverProvider},
 * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves
 * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a
 * thenable.
 *
 * The snippets below are all valid implementations of the {@linkcode HoverProvider}:
 *
 * ```ts
 * let a: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return new Hover('Hello World');
 * 	}
 * }
 *
 * let b: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return new Promise(resolve => {
 * 			resolve(new Hover('Hello World'));
 * 	 	});
 * 	}
 * }
 *
 * let c: HoverProvider = {
 * 	provideHover(doc, pos, token): ProviderResult<Hover> {
 * 		return; // undefined
 * 	}
 * }
 * ```]]></haxe_doc>
	</typedef>
	<typedef path="vscode.Pseudoterminal" params="" file="src/vscode/Pseudoterminal.hx">
		<a>
			<setDimensions set="method">
				<x path="Null"><f a="dimensions">
	<t path="vscode.TerminalDimensions"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Implement to handle when the number of rows and columns that fit into the terminal panel
	 * changes, for example when font size changes or when the panel is resized. The initial
	 * state of a terminal's dimensions should be treated as `undefined` until this is triggered
	 * as the size of a terminal isn't known until it shows up in the user interface.
	 *
	 * When dimensions are overridden by
	 * {@link Pseudoterminal.onDidOverrideDimensions onDidOverrideDimensions}, `setDimensions` will
	 * continue to be called with the regular panel dimensions, allowing the extension continue
	 * to react dimension changes.
	 *
	 * @param dimensions The new dimensions.</haxe_doc>
			</setDimensions>
			<open set="method">
				<f a="initialDimensions">
					<x path="Null"><t path="vscode.TerminalDimensions"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Implement to handle when the pty is open and ready to start firing events.
	 *
	 * @param initialDimensions The dimensions of the terminal, this will be undefined if the
	 * terminal panel has not been opened before this is called.</haxe_doc>
			</open>
			<onDidWrite>
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc><![CDATA[* An event that when fired will write data to the terminal. Unlike
	 * {@link Terminal.sendText} which sends text to the underlying child
	 * pseudo-device (the child), this will write the text to parent pseudo-device (the
	 * _terminal_ itself).
	 *
	 * Note writing `\n` will just move the cursor down 1 row, you need to write `\r` as well
	 * to move the cursor to the left-most cell.
	 *
	 * Events fired before {@link Pseudoterminal.open} is called will be be ignored.
	 *
	 * **Example:** Write red text to the terminal
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   open: () => writeEmitter.fire('\x1b[31mHello world\x1b[0m'),
	 *   close: () => {}
	 * };
	 * vscode.window.createTerminal({ name: 'My terminal', pty });
	 * ```
	 *
	 * **Example:** Move the cursor to the 10th row and 20th column and write an asterisk
	 * ```typescript
	 * writeEmitter.fire('\x1b[10;20H*');
	 * ```]]></haxe_doc>
			</onDidWrite>
			<onDidOverrideDimensions>
				<x path="Null"><t path="vscode.Event"><x path="Null"><t path="vscode.TerminalDimensions"/></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* An event that when fired allows overriding the {@link Pseudoterminal.setDimensions dimensions} of the
	 * terminal. Note that when set, the overridden dimensions will only take effect when they
	 * are lower than the actual dimensions of the terminal (ie. there will never be a scroll
	 * bar). Set to `undefined` for the terminal to go back to the regular dimensions (fit to
	 * the size of the panel).
	 *
	 * Events fired before {@link Pseudoterminal.open} is called will be be ignored.
	 *
	 * **Example:** Override the dimensions of a terminal to 20 columns and 10 rows
	 * ```typescript
	 * const dimensionsEmitter = new vscode.EventEmitter<vscode.TerminalDimensions>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   onDidOverrideDimensions: dimensionsEmitter.event,
	 *   open: () => {
	 *     dimensionsEmitter.fire({
	 *       columns: 20,
	 *       rows: 10
	 *     });
	 *   },
	 *   close: () => {}
	 * };
	 * vscode.window.createTerminal({ name: 'My terminal', pty });
	 * ```]]></haxe_doc>
			</onDidOverrideDimensions>
			<onDidClose>
				<x path="Null"><t path="vscode.Event"><x path="haxe.extern.EitherType">
	<x path="Void"/>
	<x path="Int"/>
</x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* An event that when fired will signal that the pty is closed and dispose of the terminal.
	 *
	 * Events fired before {@link Pseudoterminal.open} is called will be be ignored.
	 *
	 * A number can be used to provide an exit code for the terminal. Exit codes must be
	 * positive and a non-zero exit codes signals failure which shows a notification for a
	 * regular terminal and allows dependent tasks to proceed when used with the
	 * `CustomExecution` API.
	 *
	 * **Example:** Exit the terminal when "y" is pressed, otherwise show a notification.
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const closeEmitter = new vscode.EventEmitter<void>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   onDidClose: closeEmitter.event,
	 *   open: () => writeEmitter.fire('Press y to exit successfully'),
	 *   close: () => {},
	 *   handleInput: data => {
	 *     if (data !== 'y') {
	 *       vscode.window.showInformationMessage('Something went wrong');
	 *     }
	 *     closeEmitter.fire();
	 *   }
	 * };
	 * const terminal = vscode.window.createTerminal({ name: 'Exit example', pty });
	 * terminal.show(true);
	 * ```]]></haxe_doc>
			</onDidClose>
			<onDidChangeName>
				<x path="Null"><t path="vscode.Event"><c path="String"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* An event that when fired allows changing the name of the terminal.
	 *
	 * **Example:** Change the terminal name to "My new terminal".
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const changeNameEmitter = new vscode.EventEmitter<string>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   onDidChangeName: changeNameEmitter.event,
	 *   open: () => changeNameEmitter.fire('My new terminal'),
	 *   close: () => {}
	 * };
	 * vscode.window.createTerminal({ name: 'My terminal', pty });
	 * ```]]></haxe_doc>
			</onDidChangeName>
			<handleInput set="method">
				<x path="Null"><f a="data">
	<c path="String"/>
	<x path="Void"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* Implement to handle incoming keystrokes in the terminal or when an extension calls
	 * {@link Terminal.sendText}. `data` contains the keystrokes/text serialized into
	 * their corresponding VT sequence representation.
	 *
	 * @param data The incoming data.
	 *
	 * **Example:** Echo input in the terminal. The sequence for enter (`\r`) is translated to
	 * CRLF to go to a new line and move the cursor to the start of the line.
	 * ```typescript
	 * const writeEmitter = new vscode.EventEmitter<string>();
	 * const pty: vscode.Pseudoterminal = {
	 *   onDidWrite: writeEmitter.event,
	 *   open: () => {},
	 *   close: () => {},
	 *   handleInput: data => writeEmitter.fire(data === '\r' ? '\r\n' : data)
	 * };
	 * vscode.window.createTerminal({ name: 'Local echo', pty });
	 * ```]]></haxe_doc>
			</handleInput>
			<close set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Implement to handle when the terminal is closed by an act of the user.</haxe_doc>
			</close>
		</a>
		<haxe_doc>* Defines the interface of a terminal pty, enabling extensions to control a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickDiffProvider" params="" file="src/vscode/QuickDiffProvider.hx">
		<a><provideOriginalResource set="method">
	<x path="Null"><f a="uri:token">
	<c path="vscode.Uri"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.Uri"/></t>
</f></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Provide a {@link Uri} to the original resource of any given resource uri.
	 *
	 * @param uri The uri of the resource open in a text editor.
	 * @param token A cancellation token.
	 * @returns A thenable that resolves to uri of the matching original resource.</haxe_doc>
</provideOriginalResource></a>
		<haxe_doc>* A quick diff provider provides a {@link Uri uri} to the original state of a
 * modified resource. The editor will use this information to render ad'hoc diffs
 * within the text.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickInput" params="" file="src/vscode/QuickInput.hx">
		<a>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an {@link QuickInput.onDidHide} event.</haxe_doc>
			</show>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through {@link QuickInput.onDidHide}.
	 * (Examples include: an explicit call to {@link QuickInput.hide},
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an {@link QuickInput.onDidHide}
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
		</a>
		<haxe_doc>* A light-weight user input UI that is initially not visible. After
 * configuring it through its properties the extension can make it
 * visible by calling {@link QuickInput.show}.
 *
 * There are several reasons why this UI might have to be hidden and
 * the extension will be notified through {@link QuickInput.onDidHide}.
 * (Examples include: an explicit call to {@link QuickInput.hide},
 * the user pressing Esc, some other input UI opening, etc.)
 *
 * A user pressing Enter or some other gesture implying acceptance
 * of the current state does not automatically hide this UI component.
 * It is up to the extension to decide whether to accept the user's input
 * and if the UI should indeed be hidden through a call to {@link QuickInput.hide}.
 *
 * When the extension no longer needs this input UI, it should
 * {@link QuickInput.dispose} it to allow for freeing up
 * any resources associated with it.
 *
 * See {@link QuickPick} and {@link InputBox} for concrete UIs.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickInputButton" params="" file="src/vscode/QuickInputButton.hx">
		<a>
			<tooltip set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional tooltip.</haxe_doc>
			</tooltip>
			<iconPath set="null">
				<t path="vscode.IconPath"/>
				<haxe_doc>* Icon for the button.</haxe_doc>
			</iconPath>
		</a>
		<haxe_doc>* Button for an action in a {@link QuickPick} or {@link InputBox}.</haxe_doc>
	</typedef>
	<class path="vscode.QuickInputButtons" params="" file="src/vscode/QuickInputButtons.hx" extern="1">
		<Back final="1" public="1" set="null" static="1">
			<t path="vscode.QuickInputButton"/>
			<haxe_doc>* A back button for {@link QuickPick} and {@link InputBox}.
	 *
	 * When a navigation 'back' button is needed this one should be used for consistency.
	 * It comes with a predefined icon, tooltip and location.</haxe_doc>
		</Back>
		<new set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* @hidden</haxe_doc>
		</new>
		<haxe_doc>* Predefined buttons for {@link QuickPick} and {@link InputBox}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"QuickInputButtons"</e>
</m></meta>
	</class>
	<typedef path="vscode.QuickPick" params="T" file="src/vscode/QuickPick.hx">
		<a>
			<value>
				<c path="String"/>
				<haxe_doc>* Current value of the filter text.</haxe_doc>
			</value>
			<totalSteps>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional total step count.</haxe_doc>
			</totalSteps>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional title.</haxe_doc>
			</title>
			<step>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional current step count.</haxe_doc>
			</step>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Makes the input UI visible in its current configuration. Any other input
	 * UI will first fire an {@link QuickInput.onDidHide} event.</haxe_doc>
			</show>
			<selectedItems>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Selected items. This can be read and updated by the extension.</haxe_doc>
			</selectedItems>
			<placeholder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional placeholder shown in the filter textbox when no filter has been entered.</haxe_doc>
			</placeholder>
			<onDidTriggerItemButton set="null">
				<t path="vscode.Event"><t path="vscode.QuickPickItemButtonEvent"><c path="vscode.QuickPick.T"/></t></t>
				<haxe_doc>* An event signaling when a button in a particular {@link QuickPickItem} was triggered.
	 * This event does not fire for buttons in the title bar.</haxe_doc>
			</onDidTriggerItemButton>
			<onDidTriggerButton set="null">
				<t path="vscode.Event"><t path="vscode.QuickInputButton"/></t>
				<haxe_doc>* An event signaling when a top level button (buttons stored in {@link buttons}) was triggered.
	 * This event does not fire for buttons on a {@link QuickPickItem}.</haxe_doc>
			</onDidTriggerButton>
			<onDidHide>
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when this input UI is hidden.
	 *
	 * There are several reasons why this UI might have to be hidden and
	 * the extension will be notified through {@link QuickInput.onDidHide}.
	 * (Examples include: an explicit call to {@link QuickInput.hide},
	 * the user pressing Esc, some other input UI opening, etc.)</haxe_doc>
			</onDidHide>
			<onDidChangeValue set="null">
				<t path="vscode.Event"><c path="String"/></t>
				<haxe_doc>* An event signaling when the value of the filter text has changed.</haxe_doc>
			</onDidChangeValue>
			<onDidChangeSelection set="null">
				<t path="vscode.Event"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x></t>
				<haxe_doc>* An event signaling when the selected items have changed.</haxe_doc>
			</onDidChangeSelection>
			<onDidChangeActive set="null">
				<t path="vscode.Event"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x></t>
				<haxe_doc>* An event signaling when the active items have changed.</haxe_doc>
			</onDidChangeActive>
			<onDidAccept set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* An event signaling when the user indicated acceptance of the selected item(s).</haxe_doc>
			</onDidAccept>
			<matchOnDetail>
				<x path="Bool"/>
				<haxe_doc>* If the filter text should also be matched against the detail of the items. Defaults to false.</haxe_doc>
			</matchOnDetail>
			<matchOnDescription>
				<x path="Bool"/>
				<haxe_doc>* If the filter text should also be matched against the description of the items. Defaults to false.</haxe_doc>
			</matchOnDescription>
			<keepScrollPosition>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to maintain the scroll position of the quick pick when the quick pick items are updated. Defaults to false.</haxe_doc>
			</keepScrollPosition>
			<items>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Items to pick from. This can be read and updated by the extension.</haxe_doc>
			</items>
			<ignoreFocusOut>
				<x path="Bool"/>
				<haxe_doc>* If the UI should stay open even when loosing UI focus. Defaults to false.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hides this input UI. This will also fire an {@link QuickInput.onDidHide}
	 * event.</haxe_doc>
			</hide>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* If the UI should allow for user input. Defaults to true.
	 *
	 * Change this to false, e.g., while validating user input or
	 * loading data for the next step in user input.</haxe_doc>
			</enabled>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose of this input UI and any associated resources. If it is still
	 * visible, it is first hidden. After this call the input UI is no longer
	 * functional and no additional methods or properties on it should be
	 * accessed. Instead a new input UI should be created.</haxe_doc>
			</dispose>
			<canSelectMany>
				<x path="Bool"/>
				<haxe_doc>* If multiple items can be selected at the same time. Defaults to false.</haxe_doc>
			</canSelectMany>
			<buttons>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.QuickInputButton"/></x>
				<haxe_doc>* Buttons for actions in the UI.</haxe_doc>
			</buttons>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* If the UI should show a progress indicator. Defaults to false.
	 *
	 * Change this to true, e.g., while loading more data or validating
	 * user input.</haxe_doc>
			</busy>
			<activeItems>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.QuickPick.T"/></x>
				<haxe_doc>* Active items. This can be read and updated by the extension.</haxe_doc>
			</activeItems>
		</a>
		<haxe_doc>* A concrete {@link QuickInput} to let the user pick an item from a
 * list of items of type T. The items can be filtered through a filter text field and
 * there is an option {@link QuickPick.canSelectMany canSelectMany} to allow for
 * selecting multiple items.
 *
 * Note that in many cases the more convenient {@link window.showQuickPick}
 * is easier to use. {@link window.createQuickPick} should be used
 * when {@link window.showQuickPick} does not offer the required flexibility.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickPickItem" params="" file="src/vscode/QuickPickItem.hx">
		<a>
			<picked>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional flag indicating if this item is picked initially. This is only honored when using
	 * the {@link window.showQuickPick showQuickPick()} API. To do the same thing with
	 * the {@link window.createQuickPick createQuickPick()} API, simply set the {@link QuickPick.selectedItems}
	 * to the items you want picked initially.
	 * (*Note:* This is only honored when the picker allows multiple selections.)
	 *
	 * @see {@link QuickPickOptions.canPickMany}
	 *
	 * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}</haxe_doc>
			</picked>
			<label>
				<c path="String"/>
				<haxe_doc><![CDATA[* A human-readable string which is rendered prominent. Supports rendering of {@link ThemeIcon theme icons} via
	 * the `$(<name>)`-syntax.]]></haxe_doc>
			</label>
			<kind>
				<x path="Null"><x path="vscode.QuickPickItemKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The kind of QuickPickItem that will determine how this item is rendered in the quick pick. When not specified,
	 * the default is {@link QuickPickItemKind.Default}.</haxe_doc>
			</kind>
			<iconPath>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path or {@link ThemeIcon} for the QuickPickItem.</haxe_doc>
			</iconPath>
			<detail>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* A human-readable string which is rendered less prominent in a separate line. Supports rendering of
	 * {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.
	 *
	 * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}]]></haxe_doc>
			</detail>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* A human-readable string which is rendered less prominent in the same line. Supports rendering of
	 * {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.
	 *
	 * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}]]></haxe_doc>
			</description>
			<buttons>
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.QuickInputButton"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional buttons that will be rendered on this particular item. These buttons will trigger
	 * an {@link QuickPickItemButtonEvent} when clicked. Buttons are only rendered when using a quickpick
	 * created by the {@link window.createQuickPick createQuickPick()} API. Buttons are not rendered when using
	 * the {@link window.showQuickPick showQuickPick()} API.
	 *
	 * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}</haxe_doc>
			</buttons>
			<alwaysShow>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Always show this item.
	 *
	 * Note: this property is ignored when {@link QuickPickItem.kind kind} is set to {@link QuickPickItemKind.Separator}</haxe_doc>
			</alwaysShow>
		</a>
		<haxe_doc>* Represents an item that can be selected from
 * a list of items.</haxe_doc>
	</typedef>
	<typedef path="vscode.QuickPickItemButtonEvent" params="T" file="src/vscode/QuickPickItemButtonEvent.hx">
		<a>
			<item>
				<c path="vscode.QuickPickItemButtonEvent.T"/>
				<haxe_doc>* The item that the button belongs to.</haxe_doc>
			</item>
			<button set="null">
				<t path="vscode.QuickInputButton"/>
				<haxe_doc>* The button that was clicked.</haxe_doc>
			</button>
		</a>
		<haxe_doc>* An event signaling when a button in a particular {@link QuickPickItem} was triggered.
 * This event does not fire for buttons in the title bar.</haxe_doc>
	</typedef>
	<abstract path="vscode.QuickPickItemKind" params="" file="src/vscode/QuickPickItemKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The kind of {@link QuickPickItem quick pick item}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"QuickPickItemKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._QuickPickItemKind.QuickPickItemKind_Impl_" params="" file="src/vscode/QuickPickItemKind.hx" private="1" module="vscode.QuickPickItemKind" extern="1" final="1">
	<Separator public="1" set="null" static="1">
		<x path="vscode.QuickPickItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* When a {@link QuickPickItem} has a kind of {@link Separator}, the item is just a visual separator and does not represent a real item.
	 * The only property that applies is {@link QuickPickItem.label label }. All other properties on {@link QuickPickItem} will be ignored and have no effect.</haxe_doc>
	</Separator>
	<Default public="1" set="null" static="1">
		<x path="vscode.QuickPickItemKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The default {@link QuickPickItem.kind} is an item that can be selected in the quick pick.</haxe_doc>
	</Default>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"QuickPickItemKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._QuickPickItemKind.QuickPickItemKind_Impl_" params="" file="src/vscode/QuickPickItemKind.hx" private="1" module="vscode.QuickPickItemKind" extern="1" final="1">
		<Separator public="1" set="null" static="1">
			<x path="vscode.QuickPickItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* When a {@link QuickPickItem} has a kind of {@link Separator}, the item is just a visual separator and does not represent a real item.
	 * The only property that applies is {@link QuickPickItem.label label }. All other properties on {@link QuickPickItem} will be ignored and have no effect.</haxe_doc>
		</Separator>
		<Default public="1" set="null" static="1">
			<x path="vscode.QuickPickItemKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The default {@link QuickPickItem.kind} is an item that can be selected in the quick pick.</haxe_doc>
		</Default>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"QuickPickItemKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.QuickPickOptions" params="" file="src/vscode/QuickPickOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string that represents the title of the quick pick.</haxe_doc>
			</title>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to pick on.</haxe_doc>
			</placeHolder>
			<onDidSelectItem>
				<x path="Null"><f a="">
	<x path="haxe.extern.EitherType">
		<t path="vscode.QuickPickItem"/>
		<c path="String"/>
	</x>
	<x path="Any"/>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional function that is invoked whenever an item is selected.</haxe_doc>
			</onDidSelectItem>
			<matchOnDetail>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to include the detail when filtering the picks.</haxe_doc>
			</matchOnDetail>
			<matchOnDescription>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to include the description when filtering the picks.</haxe_doc>
			</matchOnDescription>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
			<canPickMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag to make the picker accept multiple selections, if true the result is an array of picks.</haxe_doc>
			</canPickMany>
		</a>
		<haxe_doc>* Options to configure the behavior of the quick pick UI.</haxe_doc>
	</typedef>
	<class path="vscode.Range" params="" file="src/vscode/Range.hx" extern="1">
		<start public="1" set="null">
			<c path="vscode.Position"/>
			<haxe_doc>* The start position. It is before or equal to {@link Range.end end}.</haxe_doc>
		</start>
		<end public="1" set="null">
			<c path="vscode.Position"/>
			<haxe_doc>* The end position. It is after or equal to {@link Range.start start}.</haxe_doc>
		</end>
		<isEmpty public="1">
			<x path="Bool"/>
			<haxe_doc>* `true` if `start` and `end` are equal.</haxe_doc>
		</isEmpty>
		<isSingleLine public="1">
			<x path="Bool"/>
			<haxe_doc>* `true` if `start.line` and `end.line` are equal.</haxe_doc>
		</isSingleLine>
		<contains public="1" set="method">
			<f a="positionOrRange">
				<x path="haxe.extern.EitherType">
					<c path="vscode.Position"/>
					<c path="vscode.Range"/>
				</x>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if a position or a range is contained in this range.
	 *
	 * @param positionOrRange A position or a range.
	 * @returns `true` if the position or range is inside or equal
	 * to this range.</haxe_doc>
		</contains>
		<isEqual public="1" set="method">
			<f a="other">
				<c path="vscode.Range"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if `other` equals this range.
	 *
	 * @param other A range.
	 * @returns `true` when start and end are {@link Position.isEqual equal} to
	 * start and end of this range.</haxe_doc>
		</isEqual>
		<intersection public="1" set="method">
			<f a="range">
				<c path="vscode.Range"/>
				<x path="Null"><c path="vscode.Range"/></x>
			</f>
			<haxe_doc>* Intersect `range` with this range and returns a new range or `undefined`
	 * if the ranges have no overlap.
	 *
	 * @param range A range.
	 * @returns A range of the greater start and smaller end positions. Will
	 * return undefined when there is no overlap.</haxe_doc>
		</intersection>
		<union public="1" set="method">
			<f a="other">
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
			</f>
			<haxe_doc>* Compute the union of `other` with this range.
	 *
	 * @param other A range.
	 * @returns A range of smaller start position and the greater end position.</haxe_doc>
		</union>
		<with public="1" set="method">
			<f a="?start:?end">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<c path="vscode.Range"/>
			</f>
			<haxe_doc>* Derived a new range from this range.
	 *
	 * @param start A position that should be used as start. The default value is the {@link Range.start current start}.
	 * @param end A position that should be used as end. The default value is the {@link Range.end current end}.
	 * @returns A range derived from this range with the given start and end position.
	 * If start and end are not different `this` range will be returned.</haxe_doc>
			<overloads><with public="1" set="method">
	<f a="change">
		<a>
			<start>
				<x path="Null"><c path="vscode.Position"/></x>
				<meta><m n=":optional"/></meta>
			</start>
			<end>
				<x path="Null"><c path="vscode.Position"/></x>
				<meta><m n=":optional"/></meta>
			</end>
		</a>
		<c path="vscode.Range"/>
	</f>
	<haxe_doc>* Derived a new range from this range.
	 *
	 * @param change An object that describes a change to this range.
	 * @returns A range that reflects the given change. Will return `this` range if the change
	 * is not changing anything.</haxe_doc>
</with></overloads>
		</with>
		<new public="1" set="method">
			<f a="start:end">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new range from two positions. If `start` is not
	 * before or equal to `end`, the values will be swapped.
	 *
	 * @param start A position.
	 * @param end A position.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="startLine:startCharacter:endLine:endCharacter">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Create a new range from two positions. If `start` is not
	 * before or equal to `end`, the values will be swapped.
	 *
	 * @param start A position.
	 * @param end A position.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* A range represents an ordered pair of two positions.
 * It is guaranteed that {@link Range.start start}.isBeforeOrEqual({@link Range.end end})
 *
 * Range objects are __immutable__. Use the {@link Range.with with},
 * {@link Range.intersection intersection}, or {@link Range.union union} methods
 * to derive new ranges from an existing range.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Range"</e>
</m></meta>
	</class>
	<typedef path="vscode.ReferenceContext" params="" file="src/vscode/ReferenceContext.hx">
		<a><includeDeclaration set="null">
	<x path="Bool"/>
	<haxe_doc>* Include the declaration of the current symbol.</haxe_doc>
</includeDeclaration></a>
		<haxe_doc>* Value-object that contains additional information when
 * requesting references.</haxe_doc>
	</typedef>
	<typedef path="vscode.ReferenceProvider" params="" file="src/vscode/ReferenceProvider.hx">
		<a><provideReferences set="method">
	<f a="document:position:context:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.ReferenceContext"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.Location"/></c></t>
	</f>
	<haxe_doc>* Provide a set of project-wide references for the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param context Additional information about the references request.
	 * @param token A cancellation token.
	 *
	 * @returns An array of locations or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
</provideReferences></a>
		<haxe_doc>* The reference provider interface defines the contract between extensions and
 * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.</haxe_doc>
	</typedef>
	<class path="vscode.RelativePattern" params="" file="src/vscode/RelativePattern.hx" extern="1">
		<baseUri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* A base file path to which this pattern will be matched against relatively. The
	 * file path must be absolute, should not have any trailing path separators and
	 * not include any relative segments (`.` or `..`).</haxe_doc>
		</baseUri>
		<base public="1">
			<c path="String"/>
			<haxe_doc>* A base file path to which this pattern will be matched against relatively.
	 *
	 * This matches the `fsPath` value of {@link RelativePattern.baseUri}.
	 *
	 * *Note:* updating this value will update {@link RelativePattern.baseUri} to
	 * be a uri with `file` scheme.
	 *
	 * @deprecated This property is deprecated, please use {@link RelativePattern.baseUri} instead.</haxe_doc>
		</base>
		<pattern public="1">
			<c path="String"/>
			<haxe_doc>* A file glob pattern like `*.{ts,js}` that will be matched on file paths
	 * relative to the base path.
	 *
	 * Example: Given a base of `/home/work/folder` and a file path of `/home/work/folder/index.js`,
	 * the file glob pattern will match on `index.js`.</haxe_doc>
		</pattern>
		<new public="1" set="method">
			<f a="base:pattern">
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Uri"/>
						<c path="String"/>
					</x>
				</x>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new relative pattern object with a base file path and pattern to match. This pattern
	 * will be matched on file paths relative to the base.
	 * Example:
	 *
	 * ```ts
	 * const folder = vscode.workspace.workspaceFolders?.[0];
	 * if (folder) {
	 *
	 *   // Match any TypeScript file in the root of this workspace folder
	 *   const pattern1 = new vscode.RelativePattern(folder, '*.ts');
	 *
	 *   // Match any TypeScript file in `someFolder` inside this workspace folder
	 *   const pattern2 = new vscode.RelativePattern(folder, 'someFolder/*.ts');
	 * }
	 * ```
	 *
	 * @param base A base to which this pattern will be matched against relatively. It is recommended
	 * to pass in a {@link WorkspaceFolder workspace folder} if the pattern should match inside the workspace.
	 * Otherwise, a uri or string should only be used if the pattern is for a file path outside the workspace.
	 * @param pattern A file glob pattern like `*.{ts,js}` that will be matched on paths relative to the base.</haxe_doc>
		</new>
		<haxe_doc>* A relative pattern is a helper to construct glob patterns that are matched
 * relatively to a base file path. The base path can either be an absolute file
 * path as string or uri or a {@link WorkspaceFolder workspace folder}, which is the
 * preferred way of creating the relative pattern.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"RelativePattern"</e>
</m></meta>
	</class>
	<typedef path="vscode.RenameProvider" params="" file="src/vscode/RenameProvider.hx">
		<a>
			<provideRenameEdits set="method">
				<f a="document:position:newName:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<c path="String"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.WorkspaceEdit"/></t>
				</f>
				<haxe_doc>* Provide an edit that describes changes that have to be made to one
	 * or many resources to rename a symbol to a different name.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param newName The new name of the symbol. If the given name is not valid, the provider must return a rejected promise.
	 * @param token A cancellation token.
	 * @returns A workspace edit or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideRenameEdits>
			<prepareRename>
				<x path="Null"><f a="::">
	<c path="vscode.TextDocument"/>
	<c path="vscode.Position"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.Range"/>
	<a>
		<range><c path="vscode.Range"/></range>
		<placeholder><c path="String"/></placeholder>
	</a>
</x></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional function for resolving and validating a position *before* running rename. The result can
	 * be a range or a range and a placeholder text. The placeholder text should be the identifier of the symbol
	 * which is being renamed - when omitted the text in the returned range is used.
	 *
	 * *Note:* This function should throw an error or return a rejected thenable when the provided location
	 * doesn't allow for a rename.
	 *
	 * @param document The document in which rename will be invoked.
	 * @param position The position at which rename will be invoked.
	 * @param token A cancellation token.
	 * @returns The range or range and placeholder text of the identifier that is to be renamed. The lack of a result can signaled by returning `undefined` or `null`.</haxe_doc>
			</prepareRename>
		</a>
		<haxe_doc>* The rename provider interface defines the contract between extensions and
 * the [rename](https://code.visualstudio.com/docs/editor/editingevolved#_rename-symbol)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.RunOptions" params="" file="src/vscode/RunOptions.hx">
		<a><reevaluateOnRerun>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Controls whether task variables are re-evaluated on rerun.</haxe_doc>
</reevaluateOnRerun></a>
		<haxe_doc>* Run options for a task.</haxe_doc>
	</typedef>
	<typedef path="vscode.SaveDialogOptions" params="" file="src/vscode/SaveDialogOptions.hx">
		<a>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Dialog title.
	 *
	 * This parameter might be ignored, as not all operating systems display a title on save dialogs
	 * (for example, macOS).</haxe_doc>
			</title>
			<saveLabel>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string for the save button.</haxe_doc>
			</saveLabel>
			<filters>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="Array"><c path="String"/></c></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A set of file filters that are used by the dialog. Each entry is a human-readable label,
	 * like "TypeScript", and an array of extensions, for example:
	 * ```ts
	 * {
	 * 	'Images': ['png', 'jpg'],
	 * 	'TypeScript': ['ts', 'tsx']
	 * }
	 * ```</haxe_doc>
			</filters>
			<defaultUri>
				<x path="Null"><c path="vscode.Uri"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The resource the dialog shows when opened.</haxe_doc>
			</defaultUri>
		</a>
		<haxe_doc>* Options to configure the behaviour of a file save dialog.</haxe_doc>
	</typedef>
	<typedef path="vscode.SecretStorage" params="" file="src/vscode/SecretStorage.hx">
		<a>
			<store set="method">
				<f a="key:value">
					<c path="String"/>
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Store a secret under a given key.
	 * @param key The key to store the secret under.
	 * @param value The secret.</haxe_doc>
			</store>
			<onDidChange>
				<t path="vscode.Event"><t path="vscode.SecretStorageChangeEvent"/></t>
				<haxe_doc>* Fires when a secret is stored or deleted.</haxe_doc>
			</onDidChange>
			<get set="method">
				<f a="key">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Null"><c path="String"/></x></x>
				</f>
				<haxe_doc>* Retrieve a secret that was stored with key. Returns undefined if there
	 * is no password matching that key.
	 * @param key The key the secret was stored under.
	 * @returns The stored value or `undefined`.</haxe_doc>
			</get>
			<delete set="method">
				<f a="key">
					<c path="String"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Remove a secret from storage.
	 * @param key The key the secret was stored under.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* Represents a storage utility for secrets (or any information that is sensitive)
 * that will be stored encrypted. The implementation of the secret storage will
 * be different on each platform and the secrets will not be synced across
 * machines.</haxe_doc>
	</typedef>
	<typedef path="vscode.SecretStorageChangeEvent" params="" file="src/vscode/SecretStorageChangeEvent.hx">
		<a><key final="1" set="null">
	<c path="String"/>
	<haxe_doc>* The key of the secret that has changed.</haxe_doc>
</key></a>
		<haxe_doc>* The event data that is fired when a secret is added or removed.</haxe_doc>
	</typedef>
	<typedef path="vscode.SelectedCompletionInfo" params="" file="src/vscode/SelectedCompletionInfo.hx">
		<a>
			<text set="null">
				<c path="String"/>
				<haxe_doc>* The text the range will be replaced with if this completion is accepted.</haxe_doc>
			</text>
			<range set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range that will be replaced if this completion item is accepted.</haxe_doc>
			</range>
		</a>
		<haxe_doc>* Describes the currently selected completion item.</haxe_doc>
	</typedef>
	<class path="vscode.Selection" params="" file="src/vscode/Selection.hx" extern="1">
		<extends path="vscode.Range"/>
		<anchor public="1">
			<c path="vscode.Position"/>
			<haxe_doc>* The position at which the selection starts.
	 * This position might be before or after {@link Selection.active active}.</haxe_doc>
		</anchor>
		<active public="1">
			<c path="vscode.Position"/>
			<haxe_doc>* The position of the cursor.
	 * This position might be before or after {@link Selection.anchor anchor}.</haxe_doc>
		</active>
		<isReversed public="1">
			<x path="Bool"/>
			<haxe_doc>* A selection is reversed if its {@link Selection.anchor anchor} is the {@link Selection.end end} position.</haxe_doc>
		</isReversed>
		<new public="1" set="method">
			<f a="anchor:active">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a selection from two positions.
	 *
	 * @param anchor A position.
	 * @param active A position.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="anchorLine:anchorCharacter:activeLine:activeCharacter">
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Int"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Create a selection from two positions.
	 *
	 * @param anchor A position.
	 * @param active A position.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* Represents a text selection in an editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Selection"</e>
</m></meta>
	</class>
	<class path="vscode.SelectionRange" params="" file="src/vscode/SelectionRange.hx" extern="1">
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The {@link Range} of this selection range.</haxe_doc>
		</range>
		<parent public="1">
			<x path="Null"><c path="vscode.SelectionRange"/></x>
			<haxe_doc>* The parent selection range containing this range.</haxe_doc>
		</parent>
		<new public="1" set="method">
			<f a="range:?parent">
				<c path="vscode.Range"/>
				<c path="vscode.SelectionRange"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new selection range.
	 *
	 * @param range The range of the selection range.
	 * @param parent The parent of the selection range.</haxe_doc>
		</new>
		<haxe_doc>* A selection range represents a part of a selection hierarchy. A selection range
 * may have a parent selection range that contains it.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SelectionRange"</e>
</m></meta>
	</class>
	<typedef path="vscode.SelectionRangeProvider" params="" file="src/vscode/SelectionRangeProvider.hx">
		<a><provideSelectionRanges set="method">
	<f a="document:positions:token">
		<c path="vscode.TextDocument"/>
		<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Position"/></x>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.SelectionRange"/></c></t>
	</f>
	<haxe_doc>* Provide selection ranges for the given positions.
	 *
	 * Selection ranges should be computed individually and independent for each position. The editor will merge
	 * and deduplicate ranges but providers must return hierarchies of selection ranges so that a range
	 * is {@link Range.contains contained} by its parent.
	 *
	 * @param document The document in which the command was invoked.
	 * @param positions The positions at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns Selection ranges or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideSelectionRanges></a>
		<haxe_doc>* The selection range provider interface defines the contract between extensions and the "Expand and Shrink Selection" feature.</haxe_doc>
	</typedef>
	<class path="vscode.SemanticTokens" params="" file="src/vscode/SemanticTokens.hx" extern="1">
		<resultId public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The result id of the tokens.
	 *
	 * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).</haxe_doc>
		</resultId>
		<data public="1" set="null">
			<c path="js.lib.Uint32Array"/>
			<haxe_doc>* The actual tokens data.
	 * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens} for an explanation of the format.</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="data:?resultId">
				<c path="js.lib.Uint32Array"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create new semantic tokens.
	 *
	 * @param data Token data.
	 * @param resultId Result identifier.</haxe_doc>
		</new>
		<haxe_doc>* Represents semantic tokens, either in a range or in an entire document.
 * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokens provideDocumentSemanticTokens} for an explanation of the format.
 * @see {@link SemanticTokensBuilder} for a helper to create an instance.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokens"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensBuilder" params="" file="src/vscode/SemanticTokensBuilder.hx" extern="1">
		<push public="1" set="method">
			<f a="line:char:length:tokenType:?tokenModifiers">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Add another token.
	 *
	 * @param line The token start line number (absolute value).
	 * @param char The token start character (absolute value).
	 * @param length The token length in characters.
	 * @param tokenType The encoded token type.
	 * @param tokenModifiers The encoded token modifiers.</haxe_doc>
			<overloads><push public="1" set="method">
	<f a="range:tokenType:?tokenModifiers">
		<c path="vscode.Range"/>
		<c path="String"/>
		<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Add another token. Use only when providing a legend.
	 *
	 * @param range The range of the token. Must be single-line.
	 * @param tokenType The token type.
	 * @param tokenModifiers The token modifiers.</haxe_doc>
</push></overloads>
		</push>
		<build public="1" set="method">
			<f a="?resultId">
				<c path="String"/>
				<c path="vscode.SemanticTokens"/>
			</f>
			<haxe_doc>* Finish and create a `SemanticTokens` instance.</haxe_doc>
		</build>
		<new public="1" set="method">
			<f a="?legend">
				<c path="vscode.SemanticTokensLegend"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a semantic tokens builder.
	 *
	 * @param legend A semantic tokens legend.</haxe_doc>
		</new>
		<haxe_doc>* A semantic tokens builder can help with creating a `SemanticTokens` instance
 * which contains delta encoded semantic tokens.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensBuilder"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensEdit" params="" file="src/vscode/SemanticTokensEdit.hx" extern="1">
		<start public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The start offset of the edit.</haxe_doc>
		</start>
		<deleteCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The count of elements to remove.</haxe_doc>
		</deleteCount>
		<data public="1" set="null">
			<x path="Null"><c path="js.lib.Uint32Array"/></x>
			<haxe_doc>* The elements to insert.</haxe_doc>
		</data>
		<new public="1" set="method">
			<f a="start:deleteCount:?data">
				<x path="Int"/>
				<x path="Int"/>
				<c path="js.lib.Uint32Array"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a semantic token edit.
	 *
	 * @param start Start offset
	 * @param deleteCount Number of elements to remove.
	 * @param data Elements to insert</haxe_doc>
		</new>
		<haxe_doc>* Represents an edit to semantic tokens.
 * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits provideDocumentSemanticTokensEdits} for an explanation of the format.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensEdit"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensEdits" params="" file="src/vscode/SemanticTokensEdits.hx" extern="1">
		<resultId public="1" set="null">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The result id of the tokens.
	 *
	 * This is the id that will be passed to `DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits` (if implemented).</haxe_doc>
		</resultId>
		<edits public="1" set="null">
			<c path="Array"><c path="vscode.SemanticTokensEdit"/></c>
			<haxe_doc>* The edits to the tokens data.
	 * All edits refer to the initial data state.</haxe_doc>
		</edits>
		<new public="1" set="method">
			<f a="edits:?resultId">
				<c path="Array"><c path="vscode.SemanticTokensEdit"/></c>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create new semantic tokens edits.
	 *
	 * @param edits An array of semantic token edits
	 * @param resultId Result identifier.</haxe_doc>
		</new>
		<haxe_doc>* Represents edits to semantic tokens.
 * @see {@link DocumentSemanticTokensProvider.provideDocumentSemanticTokensEdits provideDocumentSemanticTokensEdits} for an explanation of the format.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensEdits"</e>
</m></meta>
	</class>
	<class path="vscode.SemanticTokensLegend" params="" file="src/vscode/SemanticTokensLegend.hx" extern="1">
		<tokenTypes public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The possible token types.</haxe_doc>
		</tokenTypes>
		<tokenModifiers public="1" set="null">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The possible token modifiers.</haxe_doc>
		</tokenModifiers>
		<new public="1" set="method">
			<f a="tokenTypes:?tokenModifiers">
				<c path="Array"><c path="String"/></c>
				<c path="Array"><c path="String"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a semantic tokens legend.
	 *
	 * @param tokenTypes An array of token types.
	 * @param tokenModifiers An array of token modifiers.</haxe_doc>
		</new>
		<haxe_doc>* A semantic tokens legend contains the needed information to decipher
 * the integer encoded representation of semantic tokens.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SemanticTokensLegend"</e>
</m></meta>
	</class>
	<class path="vscode.ShellExecution" params="" file="src/vscode/ShellExecution.hx" extern="1">
		<commandLine public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The shell command line. Is `undefined` if created with a command and arguments.</haxe_doc>
		</commandLine>
		<command public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.ShellQuotedString"/>
</x></x>
			<haxe_doc>* The shell command. Is `undefined` if created with a full command line.</haxe_doc>
		</command>
		<args public="1">
			<x path="Null"><c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.ShellQuotedString"/>
</x></c></x>
			<haxe_doc>* The shell args. Is `undefined` if created with a full command line.</haxe_doc>
		</args>
		<options public="1">
			<x path="Null"><t path="vscode.ShellExecutionOptions"/></x>
			<haxe_doc>* The shell options used when the command line is executed in a shell.
	 * Defaults to undefined.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="commandLine:?options">
				<c path="String"/>
				<x path="Null"><t path="vscode.ShellExecutionOptions"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a shell execution with a full command line.
	 *
	 * or
	 *
	 * Creates a shell execution with a command and arguments. For the real execution the editor will
	 * construct a command line from the command and the arguments. This is subject to interpretation
	 * especially when it comes to quoting. If full control over the command line is needed please
	 * use the constructor that creates a `ShellExecution` with the full command line.
	 *
	 * @param commandLine The command line to execute.
	 * @param command The command to execute.
	 * @param args The command arguments.
	 * @param options Optional options for the started the shell.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="command:args:?options">
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<t path="vscode.ShellQuotedString"/>
		</x>
		<c path="Array"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.ShellQuotedString"/>
</x></c>
		<x path="Null"><t path="vscode.ShellExecutionOptions"/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a shell execution with a full command line.
	 *
	 * or
	 *
	 * Creates a shell execution with a command and arguments. For the real execution the editor will
	 * construct a command line from the command and the arguments. This is subject to interpretation
	 * especially when it comes to quoting. If full control over the command line is needed please
	 * use the constructor that creates a `ShellExecution` with the full command line.
	 *
	 * @param commandLine The command line to execute.
	 * @param command The command to execute.
	 * @param args The command arguments.
	 * @param options Optional options for the started the shell.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* Represents a task execution that happens inside a shell.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ShellExecution"</e>
</m></meta>
	</class>
	<typedef path="vscode.ShellExecutionOptions" params="" file="src/vscode/ShellExecutionOptions.hx">
		<a>
			<shellQuoting>
				<x path="Null"><t path="vscode.ShellQuotingOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The shell quotes supported by this shell.</haxe_doc>
			</shellQuoting>
			<shellArgs>
				<x path="Null"><c path="Array"><c path="String"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The arguments to be passed to the shell executable used to run the task. Most shells
	 * require special arguments to execute a command. For  example `bash` requires the `-c`
	 * argument to execute a command, `PowerShell` requires `-Command` and `cmd` requires both
	 * `/d` and `/c`.</haxe_doc>
			</shellArgs>
			<executable>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The shell executable.</haxe_doc>
			</executable>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><c path="String"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The additional environment of the executed shell. If omitted
	 * the parent process' environment is used. If provided it is merged with
	 * the parent process' environment.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The current working directory of the executed shell.
	 * If omitted the tools current workspace root is used.</haxe_doc>
			</cwd>
		</a>
		<haxe_doc>* Options for a shell execution</haxe_doc>
	</typedef>
	<typedef path="vscode.ShellQuotedString" params="" file="src/vscode/ShellQuotedString.hx">
		<a>
			<value>
				<c path="String"/>
				<haxe_doc>* The actual string value.</haxe_doc>
			</value>
			<quoting>
				<x path="vscode.ShellQuoting"/>
				<haxe_doc>* The quoting style to use.</haxe_doc>
			</quoting>
		</a>
		<haxe_doc>* A string that will be quoted depending on the used shell.</haxe_doc>
	</typedef>
	<abstract path="vscode.ShellQuoting" params="" file="src/vscode/ShellQuoting.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Defines how an argument should be quoted if it contains
 * spaces or unsupported characters.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ShellQuoting"</e>
			</m>
		</meta>
		<impl><class path="vscode._ShellQuoting.ShellQuoting_Impl_" params="" file="src/vscode/ShellQuoting.hx" private="1" module="vscode.ShellQuoting" extern="1" final="1">
	<Escape public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Character escaping should be used. This for example
	 * uses \ on bash and ` on PowerShell.</haxe_doc>
	</Escape>
	<Strong public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Strong string quoting should be used. This for example
	 * uses " for Windows cmd and ' for bash and PowerShell.
	 * Strong quoting treats arguments as literal strings.
	 * Under PowerShell echo 'The value is $(2 * 3)' will
	 * print `The value is $(2 * 3)`</haxe_doc>
	</Strong>
	<Weak public="1" set="null" static="1">
		<x path="vscode.ShellQuoting"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Weak string quoting should be used. This for example
	 * uses " for Windows cmd, bash and PowerShell. Weak quoting
	 * still performs some kind of evaluation inside the quoted
	 * string.  Under PowerShell echo "The value is $(2 * 3)"
	 * will print `The value is 6`</haxe_doc>
	</Weak>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ShellQuoting"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ShellQuoting.ShellQuoting_Impl_" params="" file="src/vscode/ShellQuoting.hx" private="1" module="vscode.ShellQuoting" extern="1" final="1">
		<Escape public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Character escaping should be used. This for example
	 * uses \ on bash and ` on PowerShell.</haxe_doc>
		</Escape>
		<Strong public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Strong string quoting should be used. This for example
	 * uses " for Windows cmd and ' for bash and PowerShell.
	 * Strong quoting treats arguments as literal strings.
	 * Under PowerShell echo 'The value is $(2 * 3)' will
	 * print `The value is $(2 * 3)`</haxe_doc>
		</Strong>
		<Weak public="1" set="null" static="1">
			<x path="vscode.ShellQuoting"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Weak string quoting should be used. This for example
	 * uses " for Windows cmd, bash and PowerShell. Weak quoting
	 * still performs some kind of evaluation inside the quoted
	 * string.  Under PowerShell echo "The value is $(2 * 3)"
	 * will print `The value is 6`</haxe_doc>
		</Weak>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ShellQuoting"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.ShellQuotingOptions" params="" file="src/vscode/ShellQuotingOptions.hx">
		<a>
			<weak>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used for weak quoting. The string's length must be 1.</haxe_doc>
			</weak>
			<strong>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used for strong quoting. The string's length must be 1.</haxe_doc>
			</strong>
			<escape>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<a>
		<escapeChar>
			<c path="String"/>
			<haxe_doc>* The escape character.</haxe_doc>
		</escapeChar>
		<charsToEscape>
			<c path="String"/>
			<haxe_doc>* The characters to escape.</haxe_doc>
		</charsToEscape>
	</a>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The character used to do character escaping. If a string is provided only spaces
	 * are escaped. If a `{ escapeChar, charsToEscape }` literal is provide all characters
	 * in `charsToEscape` are escaped using the `escapeChar`.</haxe_doc>
			</escape>
		</a>
		<haxe_doc>* The shell quoting options.</haxe_doc>
	</typedef>
	<class path="vscode.SignatureHelp" params="" file="src/vscode/SignatureHelp.hx" extern="1">
		<signatures public="1">
			<c path="Array"><c path="vscode.SignatureInformation"/></c>
			<haxe_doc>* One or more signatures.</haxe_doc>
		</signatures>
		<activeSignature public="1">
			<x path="Int"/>
			<haxe_doc>* The active signature.</haxe_doc>
		</activeSignature>
		<activeParameter public="1">
			<x path="Int"/>
			<haxe_doc>* The active parameter of the active signature.</haxe_doc>
		</activeParameter>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* Signature help represents the signature of something
 * callable. There can be multiple signatures but only one
 * active and only one active parameter.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SignatureHelp"</e>
</m></meta>
	</class>
	<typedef path="vscode.SignatureHelpContext" params="" file="src/vscode/SignatureHelpContext.hx">
		<a>
			<triggerKind set="null">
				<x path="vscode.SignatureHelpTriggerKind"/>
				<haxe_doc>* Action that caused signature help to be triggered.</haxe_doc>
			</triggerKind>
			<triggerCharacter set="null">
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* Character that caused signature help to be triggered.
	 *
	 * This is `undefined` when signature help is not triggered by typing, such as when manually invoking
	 * signature help or when moving the cursor.</haxe_doc>
			</triggerCharacter>
			<isRetrigger set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if signature help was already showing when it was triggered.
	 *
	 * Retriggers occur when the signature help is already active and can be caused by actions such as
	 * typing a trigger character, a cursor move, or document content changes.</haxe_doc>
			</isRetrigger>
			<activeSignatureHelp set="null">
				<x path="Null"><c path="vscode.SignatureHelp"/></x>
				<haxe_doc>* The currently active {@linkcode SignatureHelp}.
	 *
	 * The `activeSignatureHelp` has its {@linkcode SignatureHelp.activeSignature activeSignature} field updated based on
	 * the user arrowing through available signatures.</haxe_doc>
			</activeSignatureHelp>
		</a>
		<haxe_doc>* Additional information about the context in which a
 * {@linkcode SignatureHelpProvider.provideSignatureHelp SignatureHelpProvider} was triggered.</haxe_doc>
	</typedef>
	<typedef path="vscode.SignatureHelpProvider" params="" file="src/vscode/SignatureHelpProvider.hx">
		<a><provideSignatureHelp set="method">
	<f a="document:position:token:context">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.SignatureHelpContext"/>
		<t path="vscode.ProviderResult"><c path="vscode.SignatureHelp"/></t>
	</f>
	<haxe_doc>* Provide help for the signature at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @param context Information about how signature help was triggered.
	 *
	 * @returns Signature help or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideSignatureHelp></a>
		<haxe_doc>* The signature help provider interface defines the contract between extensions and
 * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.</haxe_doc>
	</typedef>
	<typedef path="vscode.SignatureHelpProviderMetadata" params="" file="src/vscode/SignatureHelpProviderMetadata.hx">
		<a>
			<triggerCharacters set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* List of characters that trigger signature help.</haxe_doc>
			</triggerCharacters>
			<retriggerCharacters set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<haxe_doc>* List of characters that re-trigger signature help.
	 *
	 * These trigger characters are only active when signature help is already showing. All trigger characters
	 * are also counted as re-trigger characters.</haxe_doc>
			</retriggerCharacters>
		</a>
		<haxe_doc>* Metadata about a registered {@linkcode SignatureHelpProvider}.</haxe_doc>
	</typedef>
	<abstract path="vscode.SignatureHelpTriggerKind" params="" file="src/vscode/SignatureHelpTriggerKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* How a {@linkcode SignatureHelpProvider} was triggered.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SignatureHelpTriggerKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._SignatureHelpTriggerKind.SignatureHelpTriggerKind_Impl_" params="" file="src/vscode/SignatureHelpTriggerKind.hx" private="1" module="vscode.SignatureHelpTriggerKind" extern="1" final="1">
	<Invoke public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Signature help was invoked manually by the user or by a command.</haxe_doc>
	</Invoke>
	<TriggerCharacter public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Signature help was triggered by a trigger character.</haxe_doc>
	</TriggerCharacter>
	<ContentChange public="1" set="null" static="1">
		<x path="vscode.SignatureHelpTriggerKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Signature help was triggered by the cursor moving or by the document content changing.</haxe_doc>
	</ContentChange>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SignatureHelpTriggerKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SignatureHelpTriggerKind.SignatureHelpTriggerKind_Impl_" params="" file="src/vscode/SignatureHelpTriggerKind.hx" private="1" module="vscode.SignatureHelpTriggerKind" extern="1" final="1">
		<Invoke public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Signature help was invoked manually by the user or by a command.</haxe_doc>
		</Invoke>
		<TriggerCharacter public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Signature help was triggered by a trigger character.</haxe_doc>
		</TriggerCharacter>
		<ContentChange public="1" set="null" static="1">
			<x path="vscode.SignatureHelpTriggerKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Signature help was triggered by the cursor moving or by the document content changing.</haxe_doc>
		</ContentChange>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SignatureHelpTriggerKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.SignatureInformation" params="" file="src/vscode/SignatureInformation.hx" extern="1">
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The label of this signature. Will be shown in
	 * the UI.</haxe_doc>
		</label>
		<documentation public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The human-readable doc-comment of this signature. Will be shown
	 * in the UI but can be omitted.</haxe_doc>
		</documentation>
		<parameters public="1">
			<c path="Array"><c path="vscode.ParameterInformation"/></c>
			<haxe_doc>* The parameters of this signature.</haxe_doc>
		</parameters>
		<activeParameter public="1">
			<x path="Null"><x path="Int"/></x>
			<haxe_doc>* The index of the active parameter.
	 *
	 * If provided, this is used in place of {@linkcode SignatureHelp.activeParameter}.</haxe_doc>
		</activeParameter>
		<new public="1" set="method">
			<f a="label:?documentation">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new signature information object.
	 *
	 * @param label A label string.
	 * @param documentation A doc string.</haxe_doc>
		</new>
		<haxe_doc>* Represents the signature of something callable. A signature
 * can have a label, like a function-name, a doc-comment, and
 * a set of parameters.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SignatureInformation"</e>
</m></meta>
	</class>
	<class path="vscode.SnippetString" params="" file="src/vscode/SnippetString.hx" extern="1">
		<value public="1">
			<c path="String"/>
			<haxe_doc>* The snippet string.</haxe_doc>
		</value>
		<appendText public="1" set="method">
			<f a="string">
				<c path="String"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends the given string to
	 * the {@linkcode SnippetString.value value} of this snippet string.
	 *
	 * @param string A value to append 'as given'. The string will be escaped.
	 * @returns This snippet string.</haxe_doc>
		</appendText>
		<appendTabstop public="1" set="method">
			<f a="?number">
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a tabstop (`$1`, `$2` etc) to
	 * the {@linkcode SnippetString.value value} of this snippet string.
	 *
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @returns This snippet string.</haxe_doc>
		</appendTabstop>
		<appendPlaceholder public="1" set="method">
			<f a="value:?number">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<f a="">
						<c path="vscode.SnippetString"/>
						<x path="Any"/>
					</f>
				</x>
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a placeholder (`${1:value}`) to
	 * the {@linkcode SnippetString.value value} of this snippet string.
	 *
	 * @param value The value of this placeholder - either a string or a function
	 * with which a nested snippet can be created.
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @returns This snippet string.</haxe_doc>
		</appendPlaceholder>
		<appendChoice public="1" set="method">
			<f a="values:?number">
				<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
				<x path="Int"/>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a choice (`${1|a,b,c|}`) to
	 * the {@linkcode SnippetString.value value} of this snippet string.
	 *
	 * @param values The values for choices - the array of strings
	 * @param number The number of this tabstop, defaults to an auto-increment
	 * value starting at 1.
	 * @returns This snippet string.</haxe_doc>
		</appendChoice>
		<appendVariable public="1" set="method">
			<f a="name:defaultValue">
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<f a="">
						<c path="vscode.SnippetString"/>
						<x path="Any"/>
					</f>
				</x>
				<c path="vscode.SnippetString"/>
			</f>
			<haxe_doc>* Builder-function that appends a variable (`${VAR}`) to
	 * the {@linkcode SnippetString.value value} of this snippet string.
	 *
	 * @param name The name of the variable - excluding the `$`.
	 * @param defaultValue The default value which is used when the variable name cannot
	 * be resolved - either a string or a function with which a nested snippet can be created.
	 * @returns This snippet string.</haxe_doc>
		</appendVariable>
		<new public="1" set="method">
			<f a="?value">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new snippet string.
	 *
	 * @param value A snippet string.</haxe_doc>
		</new>
		<haxe_doc>* A snippet string is a template which allows to insert text
 * and to control the editor cursor when insertion happens.
 *
 * A snippet can define tab stops and placeholders with `$1`, `$2`
 * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
 * the end of the snippet. Variables are defined with `$name` and
 * `${name:default value}`. Also see
 * [the full snippet syntax](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_create-your-own-snippets).</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SnippetString"</e>
</m></meta>
	</class>
	<class path="vscode.SnippetTextEdit" params="" file="src/vscode/SnippetTextEdit.hx" extern="1">
		<replace public="1" set="method" static="1">
			<f a="range:snippet">
				<c path="vscode.Range"/>
				<c path="vscode.SnippetString"/>
				<c path="vscode.SnippetTextEdit"/>
			</f>
			<haxe_doc>* Utility to create a replace snippet edit.
	 *
	 * @param range A range.
	 * @param snippet A snippet string.
	 * @returns A new snippet edit object.</haxe_doc>
		</replace>
		<insert public="1" set="method" static="1">
			<f a="position:snippet">
				<c path="vscode.Position"/>
				<c path="vscode.SnippetString"/>
				<c path="vscode.SnippetTextEdit"/>
			</f>
			<haxe_doc>* Utility to create an insert snippet edit.
	 *
	 * @param position A position, will become an empty range.
	 * @param snippet A snippet string.
	 * @returns A new snippet edit object.</haxe_doc>
		</insert>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this edit applies to.</haxe_doc>
		</range>
		<snippet public="1">
			<c path="vscode.SnippetString"/>
			<haxe_doc>* The {@link SnippetString snippet} this edit will perform.</haxe_doc>
		</snippet>
		<new public="1" set="method">
			<f a="range:snippet">
				<c path="vscode.Range"/>
				<c path="vscode.SnippetString"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new snippet edit.
	 *
	 * @param range A range.
	 * @param snippet A snippet string.</haxe_doc>
		</new>
		<haxe_doc>* A snippet edit represents an interactive edit that is performed by
 * the editor.
 *
 * *Note* that a snippet edit can always be performed as a normal {@link TextEdit text edit}.
 * This will happen when no matching editor is open or when a {@link WorkspaceEdit workspace edit}
 * contains snippet edits for multiple files. In that case only those that match the active editor
 * will be performed as snippet edits and the others as normal text edits.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SnippetTextEdit"</e>
</m></meta>
	</class>
	<class path="vscode.SourceBreakpoint" params="" file="src/vscode/SourceBreakpoint.hx" extern="1">
		<extends path="vscode.Breakpoint"/>
		<location public="1" set="null">
			<c path="vscode.Location"/>
			<haxe_doc>* The source and line position of this breakpoint.</haxe_doc>
		</location>
		<new public="1" set="method">
			<f a="location:?enabled:?condition:?hitCondition:?logMessage">
				<c path="vscode.Location"/>
				<x path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new breakpoint for a source location.</haxe_doc>
		</new>
		<haxe_doc>* A breakpoint specified by a source location.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SourceBreakpoint"</e>
</m></meta>
	</class>
	<typedef path="vscode.SourceControl" params="" file="src/vscode/SourceControl.hx">
		<a>
			<statusBarCommands>
				<x path="Null"><c path="Array"><t path="vscode.Command"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional status bar commands.
	 *
	 * These commands will be displayed in the editor's status bar.</haxe_doc>
			</statusBarCommands>
			<rootUri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* The (optional) Uri of the root of this source control.</haxe_doc>
			</rootUri>
			<quickDiffProvider>
				<x path="Null"><t path="vscode.QuickDiffProvider"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional {@link QuickDiffProvider quick diff provider}.</haxe_doc>
			</quickDiffProvider>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The human-readable label of this source control.</haxe_doc>
			</label>
			<inputBox set="null">
				<t path="vscode.SourceControlInputBox"/>
				<haxe_doc>* The {@link SourceControlInputBox input box} for this source control.</haxe_doc>
			</inputBox>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this source control.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this source control.</haxe_doc>
			</dispose>
			<createResourceGroup set="method">
				<f a="id:label">
					<c path="String"/>
					<c path="String"/>
					<t path="vscode.SourceControlResourceGroup"/>
				</f>
				<haxe_doc>* Create a new {@link SourceControlResourceGroup resource group}.</haxe_doc>
			</createResourceGroup>
			<count>
				<x path="Null"><x path="Int"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The UI-visible count of {@link SourceControlResourceState resource states} of
	 * this source control.
	 *
	 * If undefined, this source control will
	 * - display its UI-visible count as zero, and
	 * - contribute the count of its {@link SourceControlResourceState resource states} to the UI-visible aggregated count for all source controls</haxe_doc>
			</count>
			<commitTemplate>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional commit template string.
	 *
	 * The Source Control viewlet will populate the Source Control
	 * input with this value when appropriate.</haxe_doc>
			</commitTemplate>
			<acceptInputCommand>
				<x path="Null"><t path="vscode.Command"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional accept input command.
	 *
	 * This command will be invoked when the user accepts the value
	 * in the Source Control input.</haxe_doc>
			</acceptInputCommand>
		</a>
		<haxe_doc>* An source control is able to provide {@link SourceControlResourceState resource states}
 * to the editor and interact with the editor in several source control related ways.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlInputBox" params="" file="src/vscode/SourceControlInputBox.hx">
		<a>
			<visible>
				<x path="Bool"/>
				<haxe_doc>* Controls whether the input box is visible (default is `true`).</haxe_doc>
			</visible>
			<value>
				<c path="String"/>
				<haxe_doc>* Setter and getter for the contents of the input box.</haxe_doc>
			</value>
			<placeholder>
				<c path="String"/>
				<haxe_doc>* A string to show as placeholder in the input box to guide the user.</haxe_doc>
			</placeholder>
			<enabled>
				<x path="Bool"/>
				<haxe_doc>* Controls whether the input box is enabled (default is `true`).</haxe_doc>
			</enabled>
		</a>
		<haxe_doc>* Represents the input box in the Source Control viewlet.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceDecorations" params="" file="src/vscode/SourceControlResourceDecorations.hx">
		<a>
			<tooltip set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The title for a specific
	 * {@link SourceControlResourceState source control resource state}.</haxe_doc>
			</tooltip>
			<strikeThrough set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the {@link SourceControlResourceState source control resource state} should
	 * be striked-through in the UI.</haxe_doc>
			</strikeThrough>
			<light set="null">
				<x path="Null"><t path="vscode.SourceControlResourceThemableDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The light theme decorations.</haxe_doc>
			</light>
			<iconPath set="null">
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.Uri"/>
		<c path="vscode.ThemeIcon"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path for a specific
	 * {@link SourceControlResourceState source control resource state}.</haxe_doc>
			</iconPath>
			<faded set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the {@link SourceControlResourceState source control resource state} should
	 * be faded in the UI.</haxe_doc>
			</faded>
			<dark set="null">
				<x path="Null"><t path="vscode.SourceControlResourceThemableDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The dark theme decorations.</haxe_doc>
			</dark>
		</a>
		<haxe_doc>* The decorations for a {@link SourceControlResourceState source control resource state}.
 * Can be independently specified for light and dark themes.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceGroup" params="" file="src/vscode/SourceControlResourceGroup.hx">
		<a>
			<resourceStates>
				<c path="Array"><t path="vscode.SourceControlResourceState"/></c>
				<haxe_doc>* This group's collection of
	 * {@link SourceControlResourceState source control resource states}.</haxe_doc>
			</resourceStates>
			<label>
				<c path="String"/>
				<haxe_doc>* The label of this source control resource group.</haxe_doc>
			</label>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of this source control resource group.</haxe_doc>
			</id>
			<hideWhenEmpty>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether this source control resource group is hidden when it contains
	 * no {@link SourceControlResourceState source control resource states}.</haxe_doc>
			</hideWhenEmpty>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this source control resource group.</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* A source control resource group is a collection of
 * {@link SourceControlResourceState source control resource states}.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceState" params="" file="src/vscode/SourceControlResourceState.hx">
		<a>
			<resourceUri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The {@link Uri} of the underlying resource inside the workspace.</haxe_doc>
			</resourceUri>
			<decorations set="null">
				<x path="Null"><t path="vscode.SourceControlResourceDecorations"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The {@link SourceControlResourceDecorations decorations} for this source control
	 * resource state.</haxe_doc>
			</decorations>
			<contextValue set="null">
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Context value of the resource state. This can be used to contribute resource specific actions.
	 * For example, if a resource is given a context value as `diffable`. When contributing actions to `scm/resourceState/context`
	 * using `menus` extension point, you can specify context value for key `scmResourceState` in `when` expressions, like `scmResourceState == diffable`.
	 * ```json
	 * "contributes": {
	 *   "menus": {
	 *     "scm/resourceState/context": [
	 *       {
	 *         "command": "extension.diff",
	 *         "when": "scmResourceState == diffable"
	 *       }
	 *     ]
	 *   }
	 * }
	 * ```
	 * This will show action `extension.diff` only for resources with `contextValue` is `diffable`.</haxe_doc>
			</contextValue>
			<command set="null">
				<x path="Null"><t path="vscode.Command"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The {@link Command} which should be run when the resource
	 * state is open in the Source Control viewlet.</haxe_doc>
			</command>
		</a>
		<haxe_doc>* An source control resource state represents the state of an underlying workspace
 * resource within a certain {@link SourceControlResourceGroup source control group}.</haxe_doc>
	</typedef>
	<typedef path="vscode.SourceControlResourceThemableDecorations" params="" file="src/vscode/SourceControlResourceThemableDecorations.hx">
		<a><iconPath set="null">
	<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.Uri"/>
		<c path="vscode.ThemeIcon"/>
	</x>
</x></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* The icon path for a specific
	 * {@link SourceControlResourceState source control resource state}.</haxe_doc>
</iconPath></a>
		<haxe_doc>* The theme-aware decorations for a
 * {@link SourceControlResourceState source control resource state}.</haxe_doc>
	</typedef>
	<class path="vscode.StatementCoverage" params="" file="src/vscode/StatementCoverage.hx" extern="1">
		<executed public="1">
			<x path="haxe.extern.EitherType">
				<x path="Int"/>
				<x path="Bool"/>
			</x>
			<haxe_doc>* The number of times this statement was executed, or a boolean indicating
	 * whether it was executed if the exact count is unknown. If zero or false,
	 * the statement will be marked as un-covered.</haxe_doc>
		</executed>
		<location public="1">
			<x path="haxe.extern.EitherType">
				<c path="vscode.Position"/>
				<c path="vscode.Range"/>
			</x>
			<haxe_doc>* Statement location.</haxe_doc>
		</location>
		<branches public="1">
			<c path="Array"><c path="vscode.BranchCoverage"/></c>
			<haxe_doc>* Coverage from branches of this line or statement. If it's not a
	 * conditional, this will be empty.</haxe_doc>
		</branches>
		<new public="1" set="method">
			<f a="executed:location:?branches">
				<x path="haxe.extern.EitherType">
					<x path="Int"/>
					<x path="Bool"/>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="vscode.Position"/>
					<c path="vscode.Range"/>
				</x>
				<c path="Array"><c path="vscode.BranchCoverage"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param location The statement position.
	 * @param executed The number of times this statement was executed, or a
	 * boolean indicating  whether it was executed if the exact count is
	 * unknown. If zero or false, the statement will be marked as un-covered.
	 * @param branches Coverage from branches of this line.  If it's not a
	 * conditional, this should be omitted.</haxe_doc>
		</new>
		<haxe_doc>* Contains coverage information for a single statement or line.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"StatementCoverage"</e>
</m></meta>
	</class>
	<abstract path="vscode.StatusBarAlignment" params="" file="src/vscode/StatusBarAlignment.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents the alignment of status bar items.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"StatusBarAlignment"</e>
			</m>
		</meta>
		<impl><class path="vscode._StatusBarAlignment.StatusBarAlignment_Impl_" params="" file="src/vscode/StatusBarAlignment.hx" private="1" module="vscode.StatusBarAlignment" extern="1" final="1">
	<Left public="1" set="null" static="1">
		<x path="vscode.StatusBarAlignment"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Aligned to the left side.</haxe_doc>
	</Left>
	<Right public="1" set="null" static="1">
		<x path="vscode.StatusBarAlignment"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Aligned to the right side.</haxe_doc>
	</Right>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"StatusBarAlignment"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._StatusBarAlignment.StatusBarAlignment_Impl_" params="" file="src/vscode/StatusBarAlignment.hx" private="1" module="vscode.StatusBarAlignment" extern="1" final="1">
		<Left public="1" set="null" static="1">
			<x path="vscode.StatusBarAlignment"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Aligned to the left side.</haxe_doc>
		</Left>
		<Right public="1" set="null" static="1">
			<x path="vscode.StatusBarAlignment"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Aligned to the right side.</haxe_doc>
		</Right>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"StatusBarAlignment"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.StatusBarItem" params="" file="src/vscode/StatusBarItem.hx">
		<a>
			<tooltip>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
				<haxe_doc>* The tooltip text when you hover over this entry.</haxe_doc>
			</tooltip>
			<text>
				<c path="String"/>
				<haxe_doc>* The text to show for the entry. You can embed icons in the text by leveraging the syntax:
	 *
	 * `My text $(icon-name) contains icons like $(icon-name) this one.`
	 *
	 *  Where the icon-name is taken from the ThemeIcon [icon set](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing), e.g.
	 * `light-bulb`, `thumbsup`, `zap` etc.</haxe_doc>
			</text>
			<show set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Shows the entry in the status bar.</haxe_doc>
			</show>
			<priority set="null">
				<x path="Null"><x path="Float"/></x>
				<haxe_doc>* The priority of this item. Higher value means the item should
	 * be shown more to the left.</haxe_doc>
			</priority>
			<name>
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The name of the entry, like 'Python Language Indicator', 'Git Status' etc.
	 * Try to keep the length of the name short, yet descriptive enough that
	 * users can understand what the status bar item is about.</haxe_doc>
			</name>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The identifier of this item.
	 *
	 * *Note*: if no identifier was provided by the {@linkcode window.createStatusBarItem}
	 * method, the identifier will match the {@link Extension.id extension identifier}.</haxe_doc>
			</id>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hide the entry in the status bar.</haxe_doc>
			</hide>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources. Call
	 * {@link StatusBarItem.hide hide}.</haxe_doc>
			</dispose>
			<command>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.Command"/>
</x></x>
				<haxe_doc>* {@linkcode Command} or identifier of a command to run on click.
	 *
	 * The command must be {@link commands.getCommands known}.
	 *
	 * Note that if this is a {@linkcode Command} object, only the {@linkcode Command.command command} and {@linkcode Command.arguments arguments}
	 * are used by the editor.</haxe_doc>
			</command>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<haxe_doc>* The foreground color for this entry.</haxe_doc>
			</color>
			<backgroundColor>
				<x path="Null"><c path="vscode.ThemeColor"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The background color for this entry.
	 *
	 * *Note*: only the following colors are supported:
	 * * `new ThemeColor('statusBarItem.errorBackground')`
	 * * `new ThemeColor('statusBarItem.warningBackground')`
	 *
	 * More background colors may be supported in the future.
	 *
	 * *Note*: when a background color is set, the statusbar may override
	 * the `color` choice to ensure the entry is readable in all themes.</haxe_doc>
			</backgroundColor>
			<alignment set="null">
				<x path="vscode.StatusBarAlignment"/>
				<haxe_doc>* The alignment of this item.</haxe_doc>
			</alignment>
			<accessibilityInformation>
				<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
				<haxe_doc>* Accessibility information used when a screen reader interacts with this StatusBar item</haxe_doc>
			</accessibilityInformation>
		</a>
		<haxe_doc>* A status bar item is a status bar contribution that can
 * show text and icons and run a command on click.</haxe_doc>
	</typedef>
	<class path="vscode.SymbolInformation" params="" file="src/vscode/SymbolInformation.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this symbol.</haxe_doc>
		</name>
		<containerName public="1">
			<c path="String"/>
			<haxe_doc>* The name of the symbol containing this symbol.</haxe_doc>
		</containerName>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this symbol.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this symbol.</haxe_doc>
		</tags>
		<location public="1">
			<c path="vscode.Location"/>
			<haxe_doc>* The location of this symbol.</haxe_doc>
		</location>
		<new public="1" set="method">
			<f a="name:kind:containerName:location">
				<c path="String"/>
				<x path="vscode.SymbolKind"/>
				<c path="String"/>
				<c path="vscode.Location"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new symbol information object.
	 *
	 * @param name The name of the symbol.
	 * @param kind The kind of the symbol.
	 * @param containerName The name of the symbol containing the symbol.
	 * @param location The location of the symbol.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="name:kind:range:?uri:?containerName">
		<c path="String"/>
		<x path="vscode.SymbolKind"/>
		<c path="vscode.Range"/>
		<c path="vscode.Uri"/>
		<c path="String"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a new symbol information object.
	 *
	 * @param name The name of the symbol.
	 * @param kind The kind of the symbol.
	 * @param containerName The name of the symbol containing the symbol.
	 * @param location The location of the symbol.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* Represents information about programming constructs like variables, classes,
 * interfaces etc.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"SymbolInformation"</e>
</m></meta>
	</class>
	<abstract path="vscode.SymbolKind" params="" file="src/vscode/SymbolKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* A symbol kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._SymbolKind.SymbolKind_Impl_" params="" file="src/vscode/SymbolKind.hx" private="1" module="vscode.SymbolKind" extern="1" final="1">
	<File public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `File` symbol kind.</haxe_doc>
	</File>
	<Module public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Module` symbol kind.</haxe_doc>
	</Module>
	<Namespace public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Namespace` symbol kind.</haxe_doc>
	</Namespace>
	<Package public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Package` symbol kind.</haxe_doc>
	</Package>
	<Class public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Class` symbol kind.</haxe_doc>
	</Class>
	<Method public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Method` symbol kind.</haxe_doc>
	</Method>
	<Property public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Property` symbol kind.</haxe_doc>
	</Property>
	<Field public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Field` symbol kind.</haxe_doc>
	</Field>
	<Constructor public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Constructor` symbol kind.</haxe_doc>
	</Constructor>
	<Enum public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Enum` symbol kind.</haxe_doc>
	</Enum>
	<Interface public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Interface` symbol kind.</haxe_doc>
	</Interface>
	<Function public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Function` symbol kind.</haxe_doc>
	</Function>
	<Variable public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Variable` symbol kind.</haxe_doc>
	</Variable>
	<Constant public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Constant` symbol kind.</haxe_doc>
	</Constant>
	<String public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `String` symbol kind.</haxe_doc>
	</String>
	<Number public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Number` symbol kind.</haxe_doc>
	</Number>
	<Boolean public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Boolean` symbol kind.</haxe_doc>
	</Boolean>
	<Array public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Array` symbol kind.</haxe_doc>
	</Array>
	<Object public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Object` symbol kind.</haxe_doc>
	</Object>
	<Key public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Key` symbol kind.</haxe_doc>
	</Key>
	<Null public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Null` symbol kind.</haxe_doc>
	</Null>
	<EnumMember public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `EnumMember` symbol kind.</haxe_doc>
	</EnumMember>
	<Struct public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Struct` symbol kind.</haxe_doc>
	</Struct>
	<Event public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Event` symbol kind.</haxe_doc>
	</Event>
	<Operator public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Operator` symbol kind.</haxe_doc>
	</Operator>
	<TypeParameter public="1" set="null" static="1">
		<x path="vscode.SymbolKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `TypeParameter` symbol kind.</haxe_doc>
	</TypeParameter>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SymbolKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SymbolKind.SymbolKind_Impl_" params="" file="src/vscode/SymbolKind.hx" private="1" module="vscode.SymbolKind" extern="1" final="1">
		<File public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `File` symbol kind.</haxe_doc>
		</File>
		<Module public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Module` symbol kind.</haxe_doc>
		</Module>
		<Namespace public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Namespace` symbol kind.</haxe_doc>
		</Namespace>
		<Package public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Package` symbol kind.</haxe_doc>
		</Package>
		<Class public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Class` symbol kind.</haxe_doc>
		</Class>
		<Method public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Method` symbol kind.</haxe_doc>
		</Method>
		<Property public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Property` symbol kind.</haxe_doc>
		</Property>
		<Field public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Field` symbol kind.</haxe_doc>
		</Field>
		<Constructor public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Constructor` symbol kind.</haxe_doc>
		</Constructor>
		<Enum public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Enum` symbol kind.</haxe_doc>
		</Enum>
		<Interface public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Interface` symbol kind.</haxe_doc>
		</Interface>
		<Function public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Function` symbol kind.</haxe_doc>
		</Function>
		<Variable public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Variable` symbol kind.</haxe_doc>
		</Variable>
		<Constant public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Constant` symbol kind.</haxe_doc>
		</Constant>
		<String public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `String` symbol kind.</haxe_doc>
		</String>
		<Number public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Number` symbol kind.</haxe_doc>
		</Number>
		<Boolean public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Boolean` symbol kind.</haxe_doc>
		</Boolean>
		<Array public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Array` symbol kind.</haxe_doc>
		</Array>
		<Object public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Object` symbol kind.</haxe_doc>
		</Object>
		<Key public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Key` symbol kind.</haxe_doc>
		</Key>
		<Null public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Null` symbol kind.</haxe_doc>
		</Null>
		<EnumMember public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `EnumMember` symbol kind.</haxe_doc>
		</EnumMember>
		<Struct public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Struct` symbol kind.</haxe_doc>
		</Struct>
		<Event public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Event` symbol kind.</haxe_doc>
		</Event>
		<Operator public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Operator` symbol kind.</haxe_doc>
		</Operator>
		<TypeParameter public="1" set="null" static="1">
			<x path="vscode.SymbolKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `TypeParameter` symbol kind.</haxe_doc>
		</TypeParameter>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.SymbolTag" params="" file="src/vscode/SymbolTag.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Symbol tags are extra annotations that tweak the rendering of a symbol.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolTag"</e>
			</m>
		</meta>
		<impl><class path="vscode._SymbolTag.SymbolTag_Impl_" params="" file="src/vscode/SymbolTag.hx" private="1" module="vscode.SymbolTag" extern="1" final="1">
	<Deprecated public="1" set="null" static="1">
		<x path="vscode.SymbolTag"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render a symbol as obsolete, usually using a strike-out.</haxe_doc>
	</Deprecated>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SymbolTag"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SymbolTag.SymbolTag_Impl_" params="" file="src/vscode/SymbolTag.hx" private="1" module="vscode.SymbolTag" extern="1" final="1">
		<Deprecated public="1" set="null" static="1">
			<x path="vscode.SymbolTag"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render a symbol as obsolete, usually using a strike-out.</haxe_doc>
		</Deprecated>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SymbolTag"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.SyntaxTokenType" params="" file="src/vscode/SyntaxTokenType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Enumeration of commonly encountered syntax token types.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SyntaxTokenType"</e>
			</m>
		</meta>
		<impl><class path="vscode._SyntaxTokenType.SyntaxTokenType_Impl_" params="" file="src/vscode/SyntaxTokenType.hx" private="1" module="vscode.SyntaxTokenType" extern="1" final="1">
	<Other public="1" set="null" static="1">
		<x path="vscode.SyntaxTokenType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Everything except tokens that are part of comments, string literals and regular expressions.</haxe_doc>
	</Other>
	<Comment public="1" set="null" static="1">
		<x path="vscode.SyntaxTokenType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A comment.</haxe_doc>
	</Comment>
	<StringLiteral public="1" set="null" static="1">
		<x path="vscode.SyntaxTokenType"/>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"String"</e></m>
		</meta>
		<haxe_doc>* A string literal.</haxe_doc>
	</StringLiteral>
	<RegExLiteral public="1" set="null" static="1">
		<x path="vscode.SyntaxTokenType"/>
		<meta>
			<m n=":enum"/>
			<m n=":native"><e>"RegEx"</e></m>
		</meta>
		<haxe_doc>* A regular expression.</haxe_doc>
	</RegExLiteral>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"SyntaxTokenType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._SyntaxTokenType.SyntaxTokenType_Impl_" params="" file="src/vscode/SyntaxTokenType.hx" private="1" module="vscode.SyntaxTokenType" extern="1" final="1">
		<Other public="1" set="null" static="1">
			<x path="vscode.SyntaxTokenType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Everything except tokens that are part of comments, string literals and regular expressions.</haxe_doc>
		</Other>
		<Comment public="1" set="null" static="1">
			<x path="vscode.SyntaxTokenType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A comment.</haxe_doc>
		</Comment>
		<StringLiteral public="1" set="null" static="1">
			<x path="vscode.SyntaxTokenType"/>
			<meta>
				<m n=":enum"/>
				<m n=":native"><e>"String"</e></m>
			</meta>
			<haxe_doc>* A string literal.</haxe_doc>
		</StringLiteral>
		<RegExLiteral public="1" set="null" static="1">
			<x path="vscode.SyntaxTokenType"/>
			<meta>
				<m n=":enum"/>
				<m n=":native"><e>"RegEx"</e></m>
			</meta>
			<haxe_doc>* A regular expression.</haxe_doc>
		</RegExLiteral>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"SyntaxTokenType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Tab" params="" file="src/vscode/Tab.hx">
		<a>
			<label set="null">
				<c path="String"/>
				<haxe_doc>* The text displayed on the tab.</haxe_doc>
			</label>
			<isPreview set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether or not the tab is in preview mode.</haxe_doc>
			</isPreview>
			<isPinned set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether or not the tab is pinned (pin icon is present).</haxe_doc>
			</isPinned>
			<isDirty set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether or not the dirty indicator is present on the tab.</haxe_doc>
			</isDirty>
			<isActive set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether or not the tab is currently active.
	 * This is dictated by being the selected tab in the group.</haxe_doc>
			</isActive>
			<input set="null">
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.TabInputText"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.TabInputTextDiff"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.TabInputCustom"/>
			<x path="haxe.extern.EitherType">
				<c path="vscode.TabInputWebview"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.TabInputNotebook"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.TabInputNotebookDiff"/>
						<c path="vscode.TabInputTerminal"/>
					</x>
				</x>
			</x>
		</x>
	</x>
</x></x>
				<haxe_doc>* Defines the structure of the tab i.e. text, notebook, custom, etc.
	 * Resource and other useful properties are defined on the tab kind.</haxe_doc>
			</input>
			<group set="null">
				<t path="vscode.TabGroup"/>
				<haxe_doc>* The group which the tab belongs to.</haxe_doc>
			</group>
		</a>
		<haxe_doc>* Represents a tab within a {@link TabGroup group of tabs}.
 * Tabs are merely the graphical representation within the editor area.
 * A backing editor is not a guarantee.</haxe_doc>
	</typedef>
	<typedef path="vscode.TabChangeEvent" params="" file="src/vscode/TabChangeEvent.hx">
		<a>
			<opened set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Tab"/></x>
				<haxe_doc>* The tabs that have been opened.</haxe_doc>
			</opened>
			<closed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Tab"/></x>
				<haxe_doc>* The tabs that have been closed.</haxe_doc>
			</closed>
			<changed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Tab"/></x>
				<haxe_doc>* Tabs that have changed, e.g have changed
	 * their {@link Tab.isActive active} state.</haxe_doc>
			</changed>
		</a>
		<haxe_doc>* An event describing change to tabs.</haxe_doc>
	</typedef>
	<typedef path="vscode.TabGroup" params="" file="src/vscode/TabGroup.hx">
		<a>
			<viewColumn set="null">
				<x path="vscode.ViewColumn"/>
				<haxe_doc>* The view column of the group.</haxe_doc>
			</viewColumn>
			<tabs set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Tab"/></x>
				<haxe_doc>* The list of tabs contained within the group.
	 * This can be empty if the group has no tabs open.</haxe_doc>
			</tabs>
			<isActive set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether or not the group is currently active.
	 *
	 * *Note* that only one tab group is active at a time, but that multiple tab
	 * groups can have an {@link activeTab active tab}.
	 *
	 * @see {@link Tab.isActive}</haxe_doc>
			</isActive>
			<activeTab set="null">
				<x path="Null"><t path="vscode.Tab"/></x>
				<haxe_doc>* The active {@link Tab tab} in the group. This is the tab whose contents are currently
	 * being rendered.
	 *
	 * *Note* that there can be one active tab per group but there can only be one {@link TabGroups.activeTabGroup active group}.</haxe_doc>
			</activeTab>
		</a>
		<haxe_doc>* Represents a group of tabs. A tab group itself consists of multiple tabs.</haxe_doc>
	</typedef>
	<typedef path="vscode.TabGroupChangeEvent" params="" file="src/vscode/TabGroupChangeEvent.hx">
		<a>
			<opened set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TabGroup"/></x>
				<haxe_doc>* Tab groups that have been opened.</haxe_doc>
			</opened>
			<closed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TabGroup"/></x>
				<haxe_doc>* Tab groups that have been closed.</haxe_doc>
			</closed>
			<changed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TabGroup"/></x>
				<haxe_doc>* Tab groups that have changed, e.g have changed
	 * their {@link TabGroup.isActive active} state.</haxe_doc>
			</changed>
		</a>
		<haxe_doc>* An event describing changes to tab groups.</haxe_doc>
	</typedef>
	<class path="vscode.TabGroups" params="" file="src/vscode/TabGroups.hx" extern="1">
		<all public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TabGroup"/></x>
			<haxe_doc>* All the groups within the group container.</haxe_doc>
		</all>
		<activeTabGroup public="1" set="null">
			<t path="vscode.TabGroup"/>
			<haxe_doc>* The currently active group.</haxe_doc>
		</activeTabGroup>
		<onDidChangeTabGroups public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TabGroupChangeEvent"/></t>
			<haxe_doc>* An {@link Event event} which fires when {@link TabGroup tab groups} have changed.</haxe_doc>
		</onDidChangeTabGroups>
		<onDidChangeTabs public="1" set="null">
			<t path="vscode.Event"><t path="vscode.TabChangeEvent"/></t>
			<haxe_doc>* An {@link Event event} which fires when {@link Tab tabs} have changed.</haxe_doc>
		</onDidChangeTabs>
		<close public="1" set="method">
			<f a="tab:?preserveFocus">
				<x path="haxe.extern.EitherType">
					<t path="vscode.Tab"/>
					<x path="haxe.ds.ReadOnlyArray"><t path="vscode.Tab"/></x>
				</x>
				<x path="Bool"/>
				<x path="js.lib.Thenable"><x path="Bool"/></x>
			</f>
			<haxe_doc>* Closes the tab. This makes the tab object invalid and the tab
	 * should no longer be used for further actions.
	 * Note: In the case of a dirty tab, a confirmation dialog will be shown which may be cancelled. If cancelled the tab is still valid
	 *
	 * @param tab The tab to close.
	 * @param preserveFocus When `true` focus will remain in its current position. If `false` it will jump to the next tab.
	 * @returns A promise that resolves to `true` when all tabs have been closed.</haxe_doc>
			<overloads><close public="1" set="method">
	<f a="tabGroup:?preserveFocus">
		<x path="haxe.extern.EitherType">
			<t path="vscode.TabGroup"/>
			<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TabGroup"/></x>
		</x>
		<x path="Bool"/>
		<x path="js.lib.Thenable"><x path="Bool"/></x>
	</f>
	<haxe_doc>* Closes the tab group. This makes the tab group object invalid and the tab group
	 * should no longer be used for further actions.
	 * @param tabGroup The tab group to close.
	 * @param preserveFocus When `true` focus will remain in its current position.
	 * @returns A promise that resolves to `true` when all tab groups have been closed.</haxe_doc>
</close></overloads>
		</close>
		<haxe_doc>* Represents the main editor area which consists of multiple groups which contain tabs.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabGroups"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputCustom" params="" file="src/vscode/TabInputCustom.hx" extern="1">
		<uri public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri that the tab is representing.</haxe_doc>
		</uri>
		<viewType public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of custom editor.</haxe_doc>
		</viewType>
		<new public="1" set="method">
			<f a="uri:viewType">
				<c path="vscode.Uri"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a custom editor tab input.
	 * @param uri The uri of the tab.
	 * @param viewType The viewtype of the custom editor.</haxe_doc>
		</new>
		<haxe_doc>* The tab represents a custom editor.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputCustom"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputNotebook" params="" file="src/vscode/TabInputNotebook.hx" extern="1">
		<uri public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri that the tab is representing.</haxe_doc>
		</uri>
		<notebookType public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}</haxe_doc>
		</notebookType>
		<new public="1" set="method">
			<f a="uri:notebookType">
				<c path="vscode.Uri"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a new tab input for a notebook.
	 * @param uri The uri of the notebook.
	 * @param notebookType The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}</haxe_doc>
		</new>
		<haxe_doc>* The tab represents a notebook.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputNotebook"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputNotebookDiff" params="" file="src/vscode/TabInputNotebookDiff.hx" extern="1">
		<original public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri of the original notebook.</haxe_doc>
		</original>
		<modified public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri of the modified notebook.</haxe_doc>
		</modified>
		<notebookType public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}</haxe_doc>
		</notebookType>
		<new public="1" set="method">
			<f a="original:modified:notebookType">
				<c path="vscode.Uri"/>
				<c path="vscode.Uri"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a notebook diff tab input.
	 * @param original The uri of the original unmodified notebook.
	 * @param modified The uri of the modified notebook.
	 * @param notebookType The type of notebook. Maps to {@linkcode NotebookDocument.notebookType NotebookDocuments's notebookType}</haxe_doc>
		</new>
		<haxe_doc>* The tabs represents two notebooks in a diff configuration.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputNotebookDiff"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputTerminal" params="" file="src/vscode/TabInputTerminal.hx" extern="1">
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Constructs a terminal tab input.</haxe_doc>
		</new>
		<haxe_doc>* The tab represents a terminal in the editor area.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputTerminal"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputText" params="" file="src/vscode/TabInputText.hx" extern="1">
		<uri public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri represented by the tab.</haxe_doc>
		</uri>
		<new public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a text tab input with the given URI.
	 * @param uri The URI of the tab.</haxe_doc>
		</new>
		<haxe_doc>* The tab represents a single text based resource.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputText"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputTextDiff" params="" file="src/vscode/TabInputTextDiff.hx" extern="1">
		<original public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri of the original text resource.</haxe_doc>
		</original>
		<modified public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The uri of the modified text resource.</haxe_doc>
		</modified>
		<new public="1" set="method">
			<f a="original:modified">
				<c path="vscode.Uri"/>
				<c path="vscode.Uri"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a new text diff tab input with the given URIs.
	 * @param original The uri of the original text resource.
	 * @param modified The uri of the modified text resource.</haxe_doc>
		</new>
		<haxe_doc>* The tab represents two text based resources
 * being rendered as a diff.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputTextDiff"</e>
</m></meta>
	</class>
	<class path="vscode.TabInputWebview" params="" file="src/vscode/TabInputWebview.hx" extern="1">
		<viewType public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of webview. Maps to {@linkcode WebviewPanel.viewType WebviewPanel's viewType}</haxe_doc>
		</viewType>
		<new public="1" set="method">
			<f a="viewType">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Constructs a webview tab input with the given view type.
	 * @param viewType The type of webview. Maps to {@linkcode WebviewPanel.viewType WebviewPanel's viewType}</haxe_doc>
		</new>
		<haxe_doc>* The tab represents a webview.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TabInputWebview"</e>
</m></meta>
	</class>
	<class path="vscode.Task" params="" file="src/vscode/Task.hx" extern="1">
		<definition public="1">
			<t path="vscode.TaskDefinition"/>
			<haxe_doc>* The task's definition.</haxe_doc>
		</definition>
		<scope public="1" set="null">
			<x path="Null"><x path="haxe.extern.EitherType">
	<x path="vscode.TaskScope"/>
	<t path="vscode.WorkspaceFolder"/>
</x></x>
			<haxe_doc>* The task's scope.</haxe_doc>
		</scope>
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The task's name</haxe_doc>
		</name>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc><![CDATA[* A human-readable string which is rendered less prominently on a separate line in places
	 * where the task's name is displayed. Supports rendering of {@link ThemeIcon theme icons}
	 * via the `$(<name>)`-syntax.]]></haxe_doc>
		</detail>
		<execution public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.ProcessExecution"/>
	<x path="haxe.extern.EitherType">
		<c path="vscode.ShellExecution"/>
		<c path="vscode.CustomExecution"/>
	</x>
</x></x>
			<haxe_doc>* The task's execution engine</haxe_doc>
		</execution>
		<isBackground public="1">
			<x path="Bool"/>
			<haxe_doc>* Whether the task is a background task or not.</haxe_doc>
		</isBackground>
		<source public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A human-readable string describing the source of this shell task, e.g. 'gulp'
	 * or 'npm'. Supports rendering of {@link ThemeIcon theme icons} via the `$(<name>)`-syntax.]]></haxe_doc>
		</source>
		<group public="1">
			<x path="Null"><c path="vscode.TaskGroup"/></x>
			<haxe_doc>* The task group this tasks belongs to. See TaskGroup
	 * for a predefined set of available groups.
	 * Defaults to undefined meaning that the task doesn't
	 * belong to any special group.</haxe_doc>
		</group>
		<presentationOptions public="1">
			<t path="vscode.TaskPresentationOptions"/>
			<haxe_doc>* The presentation options. Defaults to an empty literal.</haxe_doc>
		</presentationOptions>
		<problemMatchers public="1">
			<c path="Array"><c path="String"/></c>
			<haxe_doc>* The problem matchers attached to the task. Defaults to an empty
	 * array.</haxe_doc>
		</problemMatchers>
		<runOptions public="1">
			<t path="vscode.RunOptions"/>
			<haxe_doc>* Run options for the task</haxe_doc>
		</runOptions>
		<new public="1" set="method">
			<f a="taskDefinition:target:name:source:?execution:?problemMatchers">
				<t path="vscode.TaskDefinition"/>
				<x path="haxe.extern.EitherType">
					<t path="vscode.WorkspaceFolder"/>
					<x path="vscode.TaskScope"/>
				</x>
				<c path="String"/>
				<c path="String"/>
				<x path="haxe.extern.EitherType">
					<c path="vscode.ProcessExecution"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.ShellExecution"/>
						<c path="vscode.CustomExecution"/>
					</x>
				</x>
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="Array"><c path="String"/></c>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new task.
	 *
	 * @param taskDefinition The task definition as defined in the taskDefinitions extension point.
	 * @param scope Specifies the task's scope. It is either a global or a workspace task or a task for a specific workspace folder. Global tasks are currently not supported.
	 * @param name The task's name. Is presented in the user interface.
	 * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.
	 * @param execution The process or shell execution.
	 * @param problemMatchers the names of problem matchers to use, like '$tsc'
	 *  or '$eslint'. Problem matchers can be contributed by an extension using
	 *  the `problemMatchers` extension point.</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="taskDefinition:name:source:?execution:?problemMatchers">
		<t path="vscode.TaskDefinition"/>
		<c path="String"/>
		<c path="String"/>
		<x path="haxe.extern.EitherType">
			<c path="vscode.ProcessExecution"/>
			<c path="vscode.ShellExecution"/>
		</x>
		<x path="haxe.extern.EitherType">
			<c path="String"/>
			<c path="Array"><c path="String"/></c>
		</x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Creates a new task.
	 *
	 * @param taskDefinition The task definition as defined in the taskDefinitions extension point.
	 * @param scope Specifies the task's scope. It is either a global or a workspace task or a task for a specific workspace folder. Global tasks are currently not supported.
	 * @param name The task's name. Is presented in the user interface.
	 * @param source The task's source (e.g. 'gulp', 'npm', ...). Is presented in the user interface.
	 * @param execution The process or shell execution.
	 * @param problemMatchers the names of problem matchers to use, like '$tsc'
	 *  or '$eslint'. Problem matchers can be contributed by an extension using
	 *  the `problemMatchers` extension point.</haxe_doc>
</new></overloads>
		</new>
		<haxe_doc>* A task to execute</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Task"</e>
</m></meta>
	</class>
	<typedef path="vscode.TaskDefinition" params="" file="src/vscode/TaskDefinition.hx">
		<a><type set="null">
	<c path="String"/>
	<haxe_doc>* The task definition describing the task provided by an extension.
	 * Usually a task provider defines more properties to identify
	 * a task. They need to be defined in the package.json of the
	 * extension under the 'taskDefinitions' extension point. The npm
	 * task definition for example looks like this
	 * ```typescript
	 * interface NpmTaskDefinition extends TaskDefinition {
	 *     script: string;
	 * }
	 * ```
	 *
	 * Note that type identifier starting with a '$' are reserved for internal
	 * usages and shouldn't be used by extensions.</haxe_doc>
</type></a>
		<haxe_doc>* A structure that defines a task kind in the system.
 * The value must be JSON-stringifyable.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskEndEvent" params="" file="src/vscode/TaskEndEvent.hx">
		<a><execution>
	<t path="vscode.TaskExecution"/>
	<haxe_doc>* The task item representing the task that finished.</haxe_doc>
</execution></a>
		<haxe_doc>* An event signaling the end of an executed task.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskExecution" params="" file="src/vscode/TaskExecution.hx">
		<a>
			<terminate set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Terminates the task execution.</haxe_doc>
			</terminate>
			<task>
				<c path="vscode.Task"/>
				<haxe_doc>* The task that got started.</haxe_doc>
			</task>
		</a>
		<haxe_doc>* An object representing an executed Task. It can be used
 * to terminate a task.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskFilter" params="" file="src/vscode/TaskFilter.hx">
		<a>
			<version>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The task version as used in the tasks.json file.
	 * The string support the package.json semver notation.</haxe_doc>
			</version>
			<type>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The task type to return;</haxe_doc>
			</type>
		</a>
		<haxe_doc>* A task filter denotes tasks by their version and types</haxe_doc>
	</typedef>
	<class path="vscode.TaskGroup" params="" file="src/vscode/TaskGroup.hx" extern="1">
		<Clean public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The clean task group;</haxe_doc>
		</Clean>
		<Build public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The build task group;</haxe_doc>
		</Build>
		<Rebuild public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The rebuild all task group;</haxe_doc>
		</Rebuild>
		<Test public="1" static="1">
			<c path="vscode.TaskGroup"/>
			<haxe_doc>* The test all task group;</haxe_doc>
		</Test>
		<isDefault public="1" set="null">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Whether the task that is part of this group is the default for the group.
	 * This property cannot be set through API, and is controlled by a user's task configurations.</haxe_doc>
		</isDefault>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The ID of the task group. Is one of TaskGroup.Clean.id, TaskGroup.Build.id, TaskGroup.Rebuild.id, or TaskGroup.Test.id.</haxe_doc>
		</id>
		<new set="method">
			<f a="id:label">
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Private constructor
	 *
	 * @param id Identifier of a task group.
	 * @param label The human-readable name of a task group.</haxe_doc>
		</new>
		<haxe_doc>* A grouping for tasks. The editor by default supports the
 * 'Clean', 'Build', 'RebuildAll' and 'Test' group.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TaskGroup"</e>
</m></meta>
	</class>
	<abstract path="vscode.TaskPanelKind" params="" file="src/vscode/TaskPanelKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Controls how the task channel is used between tasks</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskPanelKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskPanelKind.TaskPanelKind_Impl_" params="" file="src/vscode/TaskPanelKind.hx" private="1" module="vscode.TaskPanelKind" extern="1" final="1">
	<Shared public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Shares a panel with other tasks. This is the default.</haxe_doc>
	</Shared>
	<Dedicated public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Uses a dedicated panel for this tasks. The panel is not
	 * shared with other tasks.</haxe_doc>
	</Dedicated>
	<New public="1" set="null" static="1">
		<x path="vscode.TaskPanelKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Creates a new panel whenever this task is executed.</haxe_doc>
	</New>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskPanelKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskPanelKind.TaskPanelKind_Impl_" params="" file="src/vscode/TaskPanelKind.hx" private="1" module="vscode.TaskPanelKind" extern="1" final="1">
		<Shared public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Shares a panel with other tasks. This is the default.</haxe_doc>
		</Shared>
		<Dedicated public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Uses a dedicated panel for this tasks. The panel is not
	 * shared with other tasks.</haxe_doc>
		</Dedicated>
		<New public="1" set="null" static="1">
			<x path="vscode.TaskPanelKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Creates a new panel whenever this task is executed.</haxe_doc>
		</New>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskPanelKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TaskPresentationOptions" params="" file="src/vscode/TaskPresentationOptions.hx">
		<a>
			<showReuseMessage>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether to show the "Terminal will be reused by tasks, press any key to close it" message.</haxe_doc>
			</showReuseMessage>
			<reveal>
				<x path="Null"><x path="vscode.TaskRevealKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the task output is reveal in the user interface.
	 * Defaults to `RevealKind.Always`.</haxe_doc>
			</reveal>
			<panel>
				<x path="Null"><x path="vscode.TaskPanelKind"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the task panel is used for this task only (dedicated),
	 * shared between tasks (shared) or if a new panel is created on
	 * every task execution (new). Defaults to `TaskInstanceKind.Shared`</haxe_doc>
			</panel>
			<focus>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the panel showing the task output is taking focus.</haxe_doc>
			</focus>
			<echo>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the command associated with the task is echoed
	 * in the user interface.</haxe_doc>
			</echo>
			<close>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the terminal is closed after executing the task.</haxe_doc>
			</close>
			<clear>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether the terminal is cleared before executing the task.</haxe_doc>
			</clear>
		</a>
		<haxe_doc>* Controls how the task is presented in the UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProcessEndEvent" params="" file="src/vscode/TaskProcessEndEvent.hx">
		<a>
			<exitCode set="null">
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>* The process's exit code. Will be `undefined` when the task is terminated.</haxe_doc>
			</exitCode>
			<execution set="null">
				<t path="vscode.TaskExecution"/>
				<haxe_doc>* The task execution for which the process got started.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signaling the end of a process execution
 * triggered through a task</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProcessStartEvent" params="" file="src/vscode/TaskProcessStartEvent.hx">
		<a>
			<processId set="null">
				<x path="Int"/>
				<haxe_doc>* The underlying process id.</haxe_doc>
			</processId>
			<execution set="null">
				<t path="vscode.TaskExecution"/>
				<haxe_doc>* The task execution for which the process got started.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signaling the start of a process execution
 * triggered through a task</haxe_doc>
	</typedef>
	<typedef path="vscode.TaskProvider" params="T" file="src/vscode/TaskProvider.hx">
		<a>
			<resolveTask set="method">
				<f a="task:token">
					<c path="vscode.TaskProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.TaskProvider.T"/></t>
				</f>
				<haxe_doc>* Resolves a task that has no {@linkcode Task.execution execution} set. Tasks are
	 * often created from information found in the `tasks.json`-file. Such tasks miss
	 * the information on how to execute them and a task provider must fill in
	 * the missing information in the `resolveTask`-method. This method will not be
	 * called for tasks returned from the above `provideTasks` method since those
	 * tasks are always fully resolved. A valid default implementation for the
	 * `resolveTask` method is to return `undefined`.
	 *
	 * Note that when filling in the properties of `task`, you _must_ be sure to
	 * use the exact same `TaskDefinition` and not create a new one. Other properties
	 * may be changed.
	 *
	 * @param task The task to resolve.
	 * @param token A cancellation token.
	 * @returns The resolved task</haxe_doc>
			</resolveTask>
			<provideTasks set="method">
				<f a="token">
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TaskProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provides tasks.
	 * @param token A cancellation token.
	 * @returns an array of tasks</haxe_doc>
			</provideTasks>
		</a>
		<haxe_doc>* A task provider allows to add tasks to the task service.
 * A task provider is registered via {@link tasks.registerTaskProvider}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TaskRevealKind" params="" file="src/vscode/TaskRevealKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Controls the behaviour of the terminal's visibility.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskRevealKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskRevealKind.TaskRevealKind_Impl_" params="" file="src/vscode/TaskRevealKind.hx" private="1" module="vscode.TaskRevealKind" extern="1" final="1">
	<Always public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Always brings the terminal to front if the task is executed.</haxe_doc>
	</Always>
	<Silent public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Only brings the terminal to front if a problem is detected executing the task
	 * (e.g. the task couldn't be started because).</haxe_doc>
	</Silent>
	<Never public="1" set="null" static="1">
		<x path="vscode.TaskRevealKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The terminal never comes to front when the task is executed.</haxe_doc>
	</Never>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskRevealKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskRevealKind.TaskRevealKind_Impl_" params="" file="src/vscode/TaskRevealKind.hx" private="1" module="vscode.TaskRevealKind" extern="1" final="1">
		<Always public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Always brings the terminal to front if the task is executed.</haxe_doc>
		</Always>
		<Silent public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Only brings the terminal to front if a problem is detected executing the task
	 * (e.g. the task couldn't be started because).</haxe_doc>
		</Silent>
		<Never public="1" set="null" static="1">
			<x path="vscode.TaskRevealKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The terminal never comes to front when the task is executed.</haxe_doc>
		</Never>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskRevealKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.TaskScope" params="" file="src/vscode/TaskScope.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The scope of a task.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskScope"</e>
			</m>
		</meta>
		<impl><class path="vscode._TaskScope.TaskScope_Impl_" params="" file="src/vscode/TaskScope.hx" private="1" module="vscode.TaskScope" extern="1" final="1">
	<Global public="1" set="null" static="1">
		<x path="vscode.TaskScope"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The task is a global task. Global tasks are currently not supported.</haxe_doc>
	</Global>
	<Workspace public="1" set="null" static="1">
		<x path="vscode.TaskScope"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The task is a workspace task</haxe_doc>
	</Workspace>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TaskScope"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TaskScope.TaskScope_Impl_" params="" file="src/vscode/TaskScope.hx" private="1" module="vscode.TaskScope" extern="1" final="1">
		<Global public="1" set="null" static="1">
			<x path="vscode.TaskScope"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The task is a global task. Global tasks are currently not supported.</haxe_doc>
		</Global>
		<Workspace public="1" set="null" static="1">
			<x path="vscode.TaskScope"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The task is a workspace task</haxe_doc>
		</Workspace>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TaskScope"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TaskStartEvent" params="" file="src/vscode/TaskStartEvent.hx">
		<a><execution set="null">
	<t path="vscode.TaskExecution"/>
	<haxe_doc>* The task item representing the task that got started.</haxe_doc>
</execution></a>
		<haxe_doc>* An event signaling the start of a task execution.
 *
 * This interface is not intended to be implemented.</haxe_doc>
	</typedef>
	<class path="vscode.TelemetryLogger" params="" file="src/vscode/TelemetryLogger.hx" extern="1">
		<onDidChangeEnableStates public="1" set="null">
			<t path="vscode.Event"><c path="vscode.TelemetryLogger"/></t>
			<haxe_doc>* An {@link Event} which fires when the enablement state of usage or error telemetry changes.</haxe_doc>
		</onDidChangeEnableStates>
		<isUsageEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Whether or not usage telemetry is enabled for this logger.</haxe_doc>
		</isUsageEnabled>
		<isErrorsEnabled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Whether or not error telemetry is enabled for this logger.</haxe_doc>
		</isErrorsEnabled>
		<logUsage public="1" set="method">
			<f a="eventName:?data">
				<c path="String"/>
				<t path="Record">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<x path="Any"/>
						<c path="vscode.TelemetryTrustedValue"><x path="Any"/></c>
					</x>
				</t>
				<x path="Void"/>
			</f>
			<haxe_doc>* Log a usage event.
	 *
	 * After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event.
	 * Automatically supports echoing to extension telemetry output channel.
	 * @param eventName The event name to log
	 * @param data The data to log</haxe_doc>
		</logUsage>
		<logError public="1" set="method">
			<f a="eventName:?data">
				<c path="String"/>
				<t path="Record">
					<c path="String"/>
					<x path="haxe.extern.EitherType">
						<x path="Any"/>
						<c path="vscode.TelemetryTrustedValue"><x path="Any"/></c>
					</x>
				</t>
				<x path="Void"/>
			</f>
			<haxe_doc>* Log an error event.
	 *
	 * After completing cleaning, telemetry setting checks, and data mix-in calls `TelemetrySender.sendEventData` to log the event. Differs from `logUsage` in that it will log the event if the telemetry setting is Error+.
	 * Automatically supports echoing to extension telemetry output channel.
	 * @param eventName The event name to log
	 * @param data The data to log</haxe_doc>
			<overloads><logError public="1" set="method">
	<f a="error:?data">
		<c path="js.lib.Error"/>
		<t path="Record">
			<c path="String"/>
			<x path="haxe.extern.EitherType">
				<x path="Any"/>
				<c path="vscode.TelemetryTrustedValue"><x path="Any"/></c>
			</x>
		</t>
		<x path="Void"/>
	</f>
	<haxe_doc>* Log an error event.
	 *
	 * Calls `TelemetrySender.sendErrorData`. Does cleaning, telemetry checks, and data mix-in.
	 * Automatically supports echoing to extension telemetry output channel.
	 * Will also automatically log any exceptions thrown within the extension host process.
	 * @param error The error object which contains the stack trace cleaned of PII
	 * @param data Additional data to log alongside the stack trace</haxe_doc>
</logError></overloads>
		</logError>
		<dispose public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>* Dispose this object and free resources.</haxe_doc>
		</dispose>
		<haxe_doc>* A telemetry logger which can be used by extensions to log usage and error telementry.
 *
 * A logger wraps around an {@link TelemetrySender sender} but it guarantees that
 * - user settings to disable or tweak telemetry are respected, and that
 * - potential sensitive data is removed
 *
 * It also enables an "echo UI" that prints whatever data is send and it allows the editor
 * to forward unhandled errors to the respective extensions.
 *
 * To get an instance of a `TelemetryLogger`, use
 * {@link env.createTelemetryLogger `createTelemetryLogger`}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TelemetryLogger"</e>
</m></meta>
	</class>
	<typedef path="vscode.TelemetryLoggerOptions" params="" file="src/vscode/TelemetryLoggerOptions.hx">
		<a>
			<ignoreUnhandledErrors set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether or not unhandled errors on the extension host caused by your extension should be logged to your sender.
	 * Defaults to `false` if not defined.</haxe_doc>
			</ignoreUnhandledErrors>
			<ignoreBuiltInCommonProperties set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether or not you want to avoid having the built-in common properties such as os, extension name, etc injected into the data object.
	 * Defaults to `false` if not defined.</haxe_doc>
			</ignoreBuiltInCommonProperties>
			<additionalCommonProperties set="null">
				<x path="Null"><t path="Record">
	<c path="String"/>
	<x path="Any"/>
</t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Any additional common properties which should be injected into the data object.</haxe_doc>
			</additionalCommonProperties>
		</a>
		<haxe_doc>* Options for creating a {@link TelemetryLogger}</haxe_doc>
	</typedef>
	<typedef path="vscode.TelemetrySender" params="" file="src/vscode/TelemetrySender.hx">
		<a>
			<sendEventData set="method">
				<f a="eventName:?data">
					<c path="String"/>
					<t path="Record">
						<c path="String"/>
						<x path="Any"/>
					</t>
					<x path="Void"/>
				</f>
				<haxe_doc>* Function to send event data without a stacktrace. Used within a {@link TelemetryLogger}
	 *
	 * @param eventName The name of the event which you are logging
	 * @param data A serializable key value pair that is being logged</haxe_doc>
			</sendEventData>
			<sendErrorData set="method">
				<f a="error:?data">
					<c path="js.lib.Error"/>
					<t path="Record">
						<c path="String"/>
						<x path="Any"/>
					</t>
					<x path="Void"/>
				</f>
				<haxe_doc>* Function to send an error. Used within a {@link TelemetryLogger}
	 *
	 * @param error The error being logged
	 * @param data Any additional data to be collected with the exception</haxe_doc>
			</sendErrorData>
			<flush set="method">
				<f a=""><x path="js.lib.Thenable"><x path="Void"/></x></f>
				<haxe_doc>* Optional flush function which will give this sender a chance to send any remaining events
	 * as its {@link TelemetryLogger} is being disposed</haxe_doc>
			</flush>
		</a>
		<haxe_doc>* The telemetry sender is the contract between a telemetry logger and some telemetry service. **Note** that extensions must NOT
 * call the methods of their sender directly as the logger provides extra guards and cleaning.
 *
 * ```js
 * const sender: vscode.TelemetrySender = {...};
 * const logger = vscode.env.createTelemetryLogger(sender);
 *
 * // GOOD - uses the logger
 * logger.logUsage('myEvent', { myData: 'myValue' });
 *
 * // BAD - uses the sender directly: no data cleansing, ignores user settings, no echoing to the telemetry output channel etc
 * sender.logEvent('myEvent', { myData: 'myValue' });
 * ```</haxe_doc>
	</typedef>
	<class path="vscode.TelemetryTrustedValue" params="T" file="src/vscode/TelemetryTrustedValue.hx" extern="1">
		<value public="1" set="null">
			<c path="vscode.TelemetryTrustedValue.T"/>
			<haxe_doc>* The value that is trusted to not contain PII.</haxe_doc>
		</value>
		<new public="1" set="method">
			<f a="value">
				<c path="vscode.TelemetryTrustedValue.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new telementry trusted value.
	 *
	 * @param value A value to trust</haxe_doc>
		</new>
		<haxe_doc>* A special value wrapper denoting a value that is safe to not clean.
 * This is to be used when you can guarantee no identifiable information is contained in the value and the cleaning is improperly redacting it.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TelemetryTrustedValue"</e>
</m></meta>
	</class>
	<typedef path="vscode.Terminal" params="" file="src/vscode/Terminal.hx">
		<a>
			<state set="null">
				<t path="vscode.TerminalState"/>
				<haxe_doc>* The current state of the {@link Terminal}.</haxe_doc>
			</state>
			<show set="method">
				<f a="?preserveFocus">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Show the terminal panel and reveal this terminal in the UI.
	 *
	 * @param preserveFocus When `true` the terminal will not take focus.</haxe_doc>
			</show>
			<shellIntegration set="null">
				<x path="Null"><c path="vscode.TerminalShellIntegration"/></x>
				<haxe_doc>* An object that contains [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration)-powered
	 * features for the terminal. This will always be `undefined` immediately after the terminal
	 * is created. Listen to {@link window.onDidChangeTerminalShellIntegration} to be notified
	 * when shell integration is activated for a terminal.
	 *
	 * Note that this object may remain undefined if shell integration never activates. For
	 * example Command Prompt does not support shell integration and a user's shell setup could
	 * conflict with the automatic shell integration activation.</haxe_doc>
			</shellIntegration>
			<sendText set="method">
				<f a="text:?shouldExecute">
					<c path="String"/>
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Send text to the terminal. The text is written to the stdin of the underlying pty process
	 * (shell) of the terminal.
	 *
	 * @param text The text to send.
	 * @param shouldExecute Indicates that the text being sent should be executed rather than just inserted in the terminal.
	 * The character(s) added are `\n` or `\r\n`, depending on the platform. This defaults to `true`.</haxe_doc>
			</sendText>
			<processId set="null">
				<x path="js.lib.Thenable"><x path="Null"><x path="Int"/></x></x>
				<haxe_doc>* The process ID of the shell process.</haxe_doc>
			</processId>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of the terminal.</haxe_doc>
			</name>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Hide the terminal panel if this terminal is currently showing.</haxe_doc>
			</hide>
			<exitStatus set="null">
				<x path="Null"><t path="vscode.TerminalExitStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc><![CDATA[* The exit status of the terminal, this will be undefined while the terminal is active.
	 *
	 * **Example:** Show a notification with the exit code when the terminal exits with a
	 * non-zero exit code.
	 * ```typescript
	 * window.onDidCloseTerminal(t => {
	 *   if (t.exitStatus && t.exitStatus.code) {
	 *   	vscode.window.showInformationMessage(`Exit code: ${t.exitStatus.code}`);
	 *   }
	 * });
	 * ```]]></haxe_doc>
			</exitStatus>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose and free associated resources.</haxe_doc>
			</dispose>
			<creationOptions set="null">
				<x path="haxe.extern.EitherType">
					<t path="vscode.TerminalOptions"/>
					<t path="vscode.ExtensionTerminalOptions"/>
				</x>
				<haxe_doc>* The object used to initialize the terminal, this is useful for example to detecting the
	 * shell type of when the terminal was not launched by this extension or for detecting what
	 * folder the shell was launched in.</haxe_doc>
			</creationOptions>
		</a>
		<haxe_doc>* An individual terminal instance within the integrated terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalDimensions" params="" file="src/vscode/TerminalDimensions.hx">
		<a>
			<rows set="null">
				<x path="Int"/>
				<haxe_doc>* The number of rows in the terminal.</haxe_doc>
			</rows>
			<columns set="null">
				<x path="Int"/>
				<haxe_doc>* The number of columns in the terminal.</haxe_doc>
			</columns>
		</a>
		<haxe_doc>* Represents the dimensions of a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalEditorLocationOptions" params="" file="src/vscode/TerminalEditorLocationOptions.hx">
		<a>
			<viewColumn>
				<x path="vscode.ViewColumn"/>
				<haxe_doc>* A view column in which the {@link Terminal terminal} should be shown in the editor area.
	 * The default is the {@link ViewColumn.Active active}. Columns that do not exist
	 * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.
	 * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently
	 * active one.</haxe_doc>
			</viewColumn>
			<preserveFocus>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that when `true` will stop the {@link Terminal} from taking focus.</haxe_doc>
			</preserveFocus>
		</a>
		<haxe_doc>* Assumes a {@link TerminalLocation} of editor and allows specifying a {@link ViewColumn} and
 * {@link TerminalEditorLocationOptions.preserveFocus preserveFocus } property</haxe_doc>
	</typedef>
	<abstract path="vscode.TerminalExitReason" params="" file="src/vscode/TerminalExitReason.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Terminal exit reason kind.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalExitReason"</e>
			</m>
		</meta>
		<impl><class path="vscode._TerminalExitReason.TerminalExitReason_Impl_" params="" file="src/vscode/TerminalExitReason.hx" private="1" module="vscode.TerminalExitReason" extern="1" final="1">
	<Unknown public="1" set="null" static="1">
		<x path="vscode.TerminalExitReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Unknown reason.</haxe_doc>
	</Unknown>
	<Shutdown public="1" set="null" static="1">
		<x path="vscode.TerminalExitReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The window closed/reloaded.</haxe_doc>
	</Shutdown>
	<Process public="1" set="null" static="1">
		<x path="vscode.TerminalExitReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The shell process exited.</haxe_doc>
	</Process>
	<User public="1" set="null" static="1">
		<x path="vscode.TerminalExitReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The user closed the terminal.</haxe_doc>
	</User>
	<Extension public="1" set="null" static="1">
		<x path="vscode.TerminalExitReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* An extension disposed the terminal.</haxe_doc>
	</Extension>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TerminalExitReason"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TerminalExitReason.TerminalExitReason_Impl_" params="" file="src/vscode/TerminalExitReason.hx" private="1" module="vscode.TerminalExitReason" extern="1" final="1">
		<Unknown public="1" set="null" static="1">
			<x path="vscode.TerminalExitReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Unknown reason.</haxe_doc>
		</Unknown>
		<Shutdown public="1" set="null" static="1">
			<x path="vscode.TerminalExitReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The window closed/reloaded.</haxe_doc>
		</Shutdown>
		<Process public="1" set="null" static="1">
			<x path="vscode.TerminalExitReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The shell process exited.</haxe_doc>
		</Process>
		<User public="1" set="null" static="1">
			<x path="vscode.TerminalExitReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The user closed the terminal.</haxe_doc>
		</User>
		<Extension public="1" set="null" static="1">
			<x path="vscode.TerminalExitReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* An extension disposed the terminal.</haxe_doc>
		</Extension>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalExitReason"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TerminalExitStatus" params="" file="src/vscode/TerminalExitStatus.hx">
		<a>
			<reason set="null">
				<x path="vscode.TerminalExitReason"/>
				<haxe_doc>* The reason that triggered the exit of a terminal.</haxe_doc>
			</reason>
			<code set="null">
				<x path="Null"><x path="Int"/></x>
				<haxe_doc>* The exit code that a terminal exited with, it can have the following values:
	 * - Zero: the terminal process or custom execution succeeded.
	 * - Non-zero: the terminal process or custom execution failed.
	 * - `undefined`: the user forcibly closed the terminal or a custom execution exited
	 *   without providing an exit code.</haxe_doc>
			</code>
		</a>
		<haxe_doc>* Represents how a terminal exited.</haxe_doc>
	</typedef>
	<class path="vscode.TerminalLink" params="" file="src/vscode/TerminalLink.hx" extern="1">
		<startIndex public="1">
			<x path="Int"/>
			<haxe_doc>* The start index of the link on {@link TerminalLinkContext.line}.</haxe_doc>
		</startIndex>
		<length public="1">
			<x path="Int"/>
			<haxe_doc>* The length of the link on {@link TerminalLinkContext.line}.</haxe_doc>
		</length>
		<tooltip public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* The tooltip text when you hover over this link.
	 *
	 * If a tooltip is provided, is will be displayed in a string that includes instructions on
	 * how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary
	 * depending on OS, user settings, and localization.</haxe_doc>
		</tooltip>
		<new public="1" set="method">
			<f a="startIndex:length:?tooltip">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new terminal link.
	 * @param startIndex The start index of the link on {@link TerminalLinkContext.line}.
	 * @param length The length of the link on {@link TerminalLinkContext.line}.
	 * @param tooltip The tooltip text when you hover over this link.
	 *
	 * If a tooltip is provided, is will be displayed in a string that includes instructions on
	 * how to trigger the link, such as `{0} (ctrl + click)`. The specific instructions vary
	 * depending on OS, user settings, and localization.</haxe_doc>
		</new>
		<haxe_doc>* A link on a terminal line.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TerminalLink"</e>
</m></meta>
	</class>
	<typedef path="vscode.TerminalLinkContext" params="" file="src/vscode/TerminalLinkContext.hx">
		<a>
			<terminal>
				<t path="vscode.Terminal"/>
				<haxe_doc>* The terminal the link belongs to.</haxe_doc>
			</terminal>
			<line>
				<c path="String"/>
				<haxe_doc>* This is the text from the unwrapped line in the terminal.</haxe_doc>
			</line>
		</a>
		<haxe_doc>* Provides information on a line in a terminal in order to provide links for it.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalLinkProvider" params="T" file="src/vscode/TerminalLinkProvider.hx">
		<a>
			<provideTerminalLinks set="method">
				<f a="context:token">
					<t path="vscode.TerminalLinkContext"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TerminalLinkProvider.T"/></c></t>
				</f>
				<haxe_doc>* Provide terminal links for the given context. Note that this can be called multiple times
	 * even before previous calls resolve, make sure to not share global objects (eg. `RegExp`)
	 * that could have problems when asynchronous usage may overlap.
	 * @param context Information about what links are being provided for.
	 * @param token A cancellation token.
	 * @returns A list of terminal links for the given line.</haxe_doc>
			</provideTerminalLinks>
			<handleTerminalLink set="method">
				<f a="link">
					<c path="vscode.TerminalLinkProvider.T"/>
					<t path="vscode.ProviderResult"><x path="Void"/></t>
				</f>
				<haxe_doc>* Handle an activated terminal link.
	 * @param link The link to handle.</haxe_doc>
			</handleTerminalLink>
		</a>
		<haxe_doc>* A provider that enables detection and handling of links within terminals.</haxe_doc>
	</typedef>
	<abstract path="vscode.TerminalLocation" params="" file="src/vscode/TerminalLocation.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The location of the terminal.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalLocation"</e>
			</m>
		</meta>
		<impl><class path="vscode._TerminalLocation.TerminalLocation_Impl_" params="" file="src/vscode/TerminalLocation.hx" private="1" module="vscode.TerminalLocation" extern="1" final="1">
	<Panel public="1" set="null" static="1">
		<x path="vscode.TerminalLocation"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* In the terminal view</haxe_doc>
	</Panel>
	<Editor public="1" set="null" static="1">
		<x path="vscode.TerminalLocation"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* In the editor area</haxe_doc>
	</Editor>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TerminalLocation"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TerminalLocation.TerminalLocation_Impl_" params="" file="src/vscode/TerminalLocation.hx" private="1" module="vscode.TerminalLocation" extern="1" final="1">
		<Panel public="1" set="null" static="1">
			<x path="vscode.TerminalLocation"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* In the terminal view</haxe_doc>
		</Panel>
		<Editor public="1" set="null" static="1">
			<x path="vscode.TerminalLocation"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* In the editor area</haxe_doc>
		</Editor>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalLocation"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TerminalOptions" params="" file="src/vscode/TerminalOptions.hx">
		<a>
			<strictEnv>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the terminal process environment should be exactly as provided in
	 * `TerminalOptions.env`. When this is false (default), the environment will be based on the
	 * window's environment and also apply configured platform settings like
	 * `terminal.integrated.env.windows` on top. When this is true, the complete environment
	 * must be provided as nothing will be inherited from the process or any configuration.</haxe_doc>
			</strictEnv>
			<shellPath>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A path to a custom shell executable to be used in the terminal.</haxe_doc>
			</shellPath>
			<shellArgs>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="Array"><c path="String"/></c>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Args for the custom shell executable. A string can be used on Windows only which allows
	 * specifying shell args in [command-line format](https://msdn.microsoft.com/en-au/08dfcab2-eb6e-49a4-80eb-87d4076c98c6).</haxe_doc>
			</shellArgs>
			<name>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which will be used to represent the terminal in the UI.</haxe_doc>
			</name>
			<message>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A message to write to the terminal on first launch, note that this is not sent to the
	 * process but, rather written directly to the terminal. This supports escape sequences such
	 * a setting text style.</haxe_doc>
			</message>
			<location>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="vscode.TerminalLocation"/>
	<x path="haxe.extern.EitherType">
		<t path="vscode.TerminalEditorLocationOptions"/>
		<t path="vscode.TerminalSplitLocationOptions"/>
	</x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The {@link TerminalLocation} or {@link TerminalEditorLocationOptions} or {@link TerminalSplitLocationOptions} for the terminal.</haxe_doc>
			</location>
			<isTransient>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Opt-out of the default terminal persistence on restart and reload.
	 * This will only take effect when `terminal.integrated.enablePersistentSessions` is enabled.</haxe_doc>
			</isTransient>
			<iconPath>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path or {@link ThemeIcon} for the terminal.</haxe_doc>
			</iconPath>
			<hideFromUser>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When enabled the terminal will run the process as normal but not be surfaced to the user
	 * until `Terminal.show` is called. The typical usage for this is when you need to run
	 * something that may need interactivity but only want to tell the user about it when
	 * interaction is needed. Note that the terminals will still be exposed to all extensions
	 * as normal. The hidden terminals will not be restored when the workspace is next opened.</haxe_doc>
			</hideFromUser>
			<env>
				<x path="Null"><x path="haxe.DynamicAccess"><x path="Null"><c path="String"/></x></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Object with environment variables that will be added to the editor process.</haxe_doc>
			</env>
			<cwd>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A path or Uri for the current working directory to be used for the terminal.</haxe_doc>
			</cwd>
			<color>
				<x path="Null"><c path="vscode.ThemeColor"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon {@link ThemeColor} for the terminal.
	 * The `terminal.ansi*` theme keys are
	 * recommended for the best contrast and consistency across themes.</haxe_doc>
			</color>
		</a>
		<haxe_doc>* Value-object describing what options a terminal should use.</haxe_doc>
	</typedef>
	<class path="vscode.TerminalProfile" params="" file="src/vscode/TerminalProfile.hx" extern="1">
		<options public="1">
			<x path="haxe.extern.EitherType">
				<t path="vscode.TerminalOptions"/>
				<t path="vscode.ExtensionTerminalOptions"/>
			</x>
			<haxe_doc>* The options that the terminal will launch with.</haxe_doc>
		</options>
		<new public="1" set="method">
			<f a="options">
				<x path="haxe.extern.EitherType">
					<t path="vscode.TerminalOptions"/>
					<t path="vscode.ExtensionTerminalOptions"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new terminal profile.
	 * @param options The options that the terminal will launch with.</haxe_doc>
		</new>
		<haxe_doc>* A terminal profile defines how a terminal will be launched.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TerminalProfile"</e>
</m></meta>
	</class>
	<typedef path="vscode.TerminalProfileProvider" params="" file="src/vscode/TerminalProfileProvider.hx">
		<a><provideTerminalProfile set="method">
	<f a="token">
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><c path="vscode.TerminalProfile"/></t>
	</f>
	<haxe_doc>* Provide the terminal profile.
	 * @param token A cancellation token that indicates the result is no longer needed.
	 * @returns The terminal profile.</haxe_doc>
</provideTerminalProfile></a>
		<haxe_doc>* Provides a terminal profile for the contributed terminal profile when launched via the UI or
 * command.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalShellExecution" params="" file="src/vscode/TerminalShellExecution.hx">
		<a>
			<read set="method">
				<f a=""><t path="vscode.AsyncIterable"><c path="String"/></t></f>
				<haxe_doc>* Creates a stream of raw data (including escape sequences) that is written to the
	 * terminal. This will only include data that was written after `read` was called for
	 * the first time, ie. you must call `read` immediately after the command is executed via
	 * {@link TerminalShellIntegration.executeCommand} or
	 * {@link window.onDidStartTerminalShellExecution} to not miss any data.
	 *
	 * @example
	 * // Log all data written to the terminal for a command
	 * const command = term.shellIntegration.executeCommand({ commandLine: 'echo "Hello world"' });
	 * const stream = command.read();
	 * for await (const data of stream) {
	 *   console.log(data);
	 * }</haxe_doc>
			</read>
			<cwd set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* The working directory that was reported by the shell when this command executed. This
	 * {@link Uri} may represent a file on another machine (eg. ssh into another machine). This
	 * requires the shell integration to support working directory reporting.</haxe_doc>
			</cwd>
			<commandLine set="null">
				<t path="vscode.TerminalShellExecutionCommandLine"/>
				<haxe_doc><![CDATA[* The command line that was executed. The {@link TerminalShellExecutionCommandLineConfidence confidence}
	 * of this value depends on the specific shell's shell integration implementation. This
	 * value may become more accurate after {@link window.onDidEndTerminalShellExecution} is
	 * fired.
	 *
	 * @example
	 * // Log the details of the command line on start and end
	 * window.onDidStartTerminalShellExecution(event => {
	 *   const commandLine = event.execution.commandLine;
	 *   console.log(`Command started\n${summarizeCommandLine(commandLine)}`);
	 * });
	 * window.onDidEndTerminalShellExecution(event => {
	 *   const commandLine = event.execution.commandLine;
	 *   console.log(`Command ended\n${summarizeCommandLine(commandLine)}`);
	 * });
	 * function summarizeCommandLine(commandLine: TerminalShellExecutionCommandLine) {
	 *   return [
	 *     `  Command line: ${command.commandLine.value}`,
	 *     `  Confidence: ${command.commandLine.confidence}`,
	 *     `  Trusted: ${command.commandLine.isTrusted}
	 *   ].join('\n');
	 * }]]></haxe_doc>
			</commandLine>
		</a>
		<haxe_doc>* A command that was executed in a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.AsyncIterable" params="T" file="src/vscode/TerminalShellExecution.hx" module="vscode.TerminalShellExecution"><f a=""><t path="js.lib.AsyncIterator"><c path="vscode.AsyncIterable.T"/></t></f></typedef>
	<typedef path="vscode.TerminalShellExecutionCommandLine" params="" file="src/vscode/TerminalShellExecutionCommandLine.hx">
		<a>
			<value set="null">
				<c path="String"/>
				<haxe_doc>* The full command line that was executed, including both the command and its arguments.</haxe_doc>
			</value>
			<isTrusted set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the command line value came from a trusted source and is therefore safe to
	 * execute without user additional confirmation, such as a notification that asks "Do you
	 * want to execute (command)?". This verification is likely only needed if you are going to
	 * execute the command again.
	 *
	 * This is `true` only when the command line was reported explicitly by the shell
	 * integration script (ie. {@link TerminalShellExecutionCommandLineConfidence.High high confidence})
	 * and it used a nonce for verification.</haxe_doc>
			</isTrusted>
			<confidence set="null">
				<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
				<haxe_doc>* The confidence of the command line value which is determined by how the value was
	 * obtained. This depends upon the implementation of the shell integration script.</haxe_doc>
			</confidence>
		</a>
		<haxe_doc>* A command line that was executed in a terminal.</haxe_doc>
	</typedef>
	<abstract path="vscode.TerminalShellExecutionCommandLineConfidence" params="" file="src/vscode/TerminalShellExecutionCommandLineConfidence.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The confidence of a {@link TerminalShellExecutionCommandLine} value.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalShellExecutionCommandLineConfidence"</e>
			</m>
		</meta>
		<impl><class path="vscode._TerminalShellExecutionCommandLineConfidence.TerminalShellExecutionCommandLineConfidence_Impl_" params="" file="src/vscode/TerminalShellExecutionCommandLineConfidence.hx" private="1" module="vscode.TerminalShellExecutionCommandLineConfidence" extern="1" final="1">
	<Low public="1" set="null" static="1">
		<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The command line value confidence is low. This means that the value was read from the
	 * terminal buffer using markers reported by the shell integration script. Additionally one
	 * of the following conditions will be met:
	 *
	 * - The command started on the very left-most column which is unusual, or
	 * - The command is multi-line which is more difficult to accurately detect due to line
	 *   continuation characters and right prompts.
	 * - Command line markers were not reported by the shell integration script.</haxe_doc>
	</Low>
	<Medium public="1" set="null" static="1">
		<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The command line value confidence is medium. This means that the value was read from the
	 * terminal buffer using markers reported by the shell integration script. The command is
	 * single-line and does not start on the very left-most column (which is unusual).</haxe_doc>
	</Medium>
	<High public="1" set="null" static="1">
		<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The command line value confidence is high. This means that the value was explicitly sent
	 * from the shell integration script or the command was executed via the
	 * {@link TerminalShellIntegration.executeCommand} API.</haxe_doc>
	</High>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TerminalShellExecutionCommandLineConfidence"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TerminalShellExecutionCommandLineConfidence.TerminalShellExecutionCommandLineConfidence_Impl_" params="" file="src/vscode/TerminalShellExecutionCommandLineConfidence.hx" private="1" module="vscode.TerminalShellExecutionCommandLineConfidence" extern="1" final="1">
		<Low public="1" set="null" static="1">
			<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The command line value confidence is low. This means that the value was read from the
	 * terminal buffer using markers reported by the shell integration script. Additionally one
	 * of the following conditions will be met:
	 *
	 * - The command started on the very left-most column which is unusual, or
	 * - The command is multi-line which is more difficult to accurately detect due to line
	 *   continuation characters and right prompts.
	 * - Command line markers were not reported by the shell integration script.</haxe_doc>
		</Low>
		<Medium public="1" set="null" static="1">
			<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The command line value confidence is medium. This means that the value was read from the
	 * terminal buffer using markers reported by the shell integration script. The command is
	 * single-line and does not start on the very left-most column (which is unusual).</haxe_doc>
		</Medium>
		<High public="1" set="null" static="1">
			<x path="vscode.TerminalShellExecutionCommandLineConfidence"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The command line value confidence is high. This means that the value was explicitly sent
	 * from the shell integration script or the command was executed via the
	 * {@link TerminalShellIntegration.executeCommand} API.</haxe_doc>
		</High>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TerminalShellExecutionCommandLineConfidence"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TerminalShellExecutionEndEvent" params="" file="src/vscode/TerminalShellExecutionEndEvent.hx">
		<a>
			<terminal set="null">
				<t path="vscode.Terminal"/>
				<haxe_doc>* The terminal that shell integration has been activated in.</haxe_doc>
			</terminal>
			<shellIntegration set="null">
				<c path="vscode.TerminalShellIntegration"/>
				<haxe_doc>* The shell integration object.</haxe_doc>
			</shellIntegration>
			<exitCode set="null">
				<x path="Null"><x path="Int"/></x>
				<haxe_doc><![CDATA[* The exit code reported by the shell.
	 *
	 * When this is `undefined` it can mean several things:
	 *
	 * - The shell either did not report an exit  code (ie. the shell integration script is
	 *   misbehaving)
	 * - The shell reported a command started before the command finished (eg. a sub-shell was
	 *   opened).
	 * - The user canceled the command via ctrl+c.
	 * - The user pressed enter when there was no input.
	 *
	 * Generally this should not happen. Depending on the use case, it may be best to treat this
	 * as a failure.
	 *
	 * @example
	 * const execution = shellIntegration.executeCommand({
	 *   command: 'echo',
	 *   args: ['Hello world']
	 * });
	 * window.onDidEndTerminalShellExecution(event => {
	 *   if (event.execution === execution) {
	 *     if (event.exitCode === undefined) {
	 * 	     console.log('Command finished but exit code is unknown');
	 *     } else if (event.exitCode === 0) {
	 * 	     console.log('Command succeeded');
	 *     } else {
	 * 	     console.log('Command failed');
	 *     }
	 *   }
	 * });]]></haxe_doc>
			</exitCode>
			<execution set="null">
				<t path="vscode.TerminalShellExecution"/>
				<haxe_doc>* The terminal shell execution that has ended.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signalling that an execution has ended in a terminal.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalShellExecutionStartEvent" params="" file="src/vscode/TerminalShellExecutionStartEvent.hx">
		<a>
			<terminal set="null">
				<t path="vscode.Terminal"/>
				<haxe_doc>* The terminal that shell integration has been activated in.</haxe_doc>
			</terminal>
			<shellIntegration set="null">
				<c path="vscode.TerminalShellIntegration"/>
				<haxe_doc>* The shell integration object.</haxe_doc>
			</shellIntegration>
			<execution set="null">
				<t path="vscode.TerminalShellExecution"/>
				<haxe_doc>* The terminal shell execution that has ended.</haxe_doc>
			</execution>
		</a>
		<haxe_doc>* An event signalling that an execution has started in a terminal.</haxe_doc>
	</typedef>
	<class path="vscode.TerminalShellIntegration" params="" file="src/vscode/TerminalShellIntegration.hx" extern="1">
		<cwd public="1" set="null">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The current working directory of the terminal. This {@link Uri} may represent a file on
	 * another machine (eg. ssh into another machine). This requires the shell integration to
	 * support working directory reporting.</haxe_doc>
		</cwd>
		<executeCommand public="1" set="method">
			<f a="commandLine">
				<c path="String"/>
				<t path="vscode.TerminalShellExecution"/>
			</f>
			<haxe_doc><![CDATA[* Execute a command, sending ^C as necessary to interrupt any running command if needed.
	 *
	 * @param commandLine The command line to execute, this is the exact text that will be sent
	 * to the terminal.
	 *
	 * @example
	 * // Execute a command in a terminal immediately after being created
	 * const myTerm = window.createTerminal();
	 * window.onDidChangeTerminalShellIntegration(async ({ terminal, shellIntegration }) => {
	 *   if (terminal === myTerm) {
	 *     const execution = shellIntegration.executeCommand('echo "Hello world"');
	 *     window.onDidEndTerminalShellExecution(event => {
	 *       if (event.execution === execution) {
	 *         console.log(`Command exited with code ${event.exitCode}`);
	 *       }
	 *     });
	 *   }
	 * }));
	 * // Fallback to sendText if there is no shell integration within 3 seconds of launching
	 * setTimeout(() => {
	 *   if (!myTerm.shellIntegration) {
	 *     myTerm.sendText('echo "Hello world"');
	 *     // Without shell integration, we can't know when the command has finished or what the
	 *     // exit code was.
	 *   }
	 * }, 3000);
	 *
	 * @example
	 * // Send command to terminal that has been alive for a while
	 * const commandLine = 'echo "Hello world"';
	 * if (term.shellIntegration) {
	 *   const execution = shellIntegration.executeCommand({ commandLine });
	 *   window.onDidEndTerminalShellExecution(event => {
	 *     if (event.execution === execution) {
	 *       console.log(`Command exited with code ${event.exitCode}`);
	 *     }
	 *   });
	 * } else {
	 *   term.sendText(commandLine);
	 *   // Without shell integration, we can't know when the command has finished or what the
	 *   // exit code was.
	 * }]]></haxe_doc>
			<overloads><executeCommand public="1" set="method">
	<f a="executable:args">
		<c path="String"/>
		<c path="Array"><c path="String"/></c>
		<t path="vscode.TerminalShellExecution"/>
	</f>
	<haxe_doc><![CDATA[* Execute a command, sending ^C as necessary to interrupt any running command if needed.
	 *
	 * *Note* This is not guaranteed to work as [shell integration](https://code.visualstudio.com/docs/terminal/shell-integration)
	 * must be activated. Check whether {@link TerminalShellExecution.exitCode} is rejected to
	 * verify whether it was successful.
	 *
	 * @param executable A command to run.
	 * @param args Arguments to launch the executable with. The arguments will be escaped such
	 * that they are interpreted as single arguments when the argument both contains whitespace
	 * and does not include any single quote, double quote or backtick characters.
	 *
	 * Note that this escaping is not intended to be a security measure, be careful when passing
	 * untrusted data to this API as strings like `$(...)` can often be used in shells to
	 * execute code within a string.
	 *
	 * @example
	 * // Execute a command in a terminal immediately after being created
	 * const myTerm = window.createTerminal();
	 * window.onDidChangeTerminalShellIntegration(async ({ terminal, shellIntegration }) => {
	 *   if (terminal === myTerm) {
	 *     const command = shellIntegration.executeCommand({
	 *       command: 'echo',
	 *       args: ['Hello world']
	 *     });
	 *     const code = await command.exitCode;
	 *     console.log(`Command exited with code ${code}`);
	 *   }
	 * }));
	 * // Fallback to sendText if there is no shell integration within 3 seconds of launching
	 * setTimeout(() => {
	 *   if (!myTerm.shellIntegration) {
	 *     myTerm.sendText('echo "Hello world"');
	 *     // Without shell integration, we can't know when the command has finished or what the
	 *     // exit code was.
	 *   }
	 * }, 3000);
	 *
	 * @example
	 * // Send command to terminal that has been alive for a while
	 * const commandLine = 'echo "Hello world"';
	 * if (term.shellIntegration) {
	 *   const command = term.shellIntegration.executeCommand({
	 *     command: 'echo',
	 *     args: ['Hello world']
	 *   });
	 *   const code = await command.exitCode;
	 *   console.log(`Command exited with code ${code}`);
	 * } else {
	 *   term.sendText(commandLine);
	 *   // Without shell integration, we can't know when the command has finished or what the
	 *   // exit code was.
	 * }]]></haxe_doc>
</executeCommand></overloads>
		</executeCommand>
		<haxe_doc>* [Shell integration](https://code.visualstudio.com/docs/terminal/shell-integration)-powered capabilities owned by a terminal.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TerminalShellIntegration"</e>
</m></meta>
	</class>
	<typedef path="vscode.TerminalShellIntegrationChangeEvent" params="" file="src/vscode/TerminalShellIntegrationChangeEvent.hx">
		<a>
			<terminal set="null">
				<t path="vscode.Terminal"/>
				<haxe_doc>* The terminal that shell integration has been activated in.</haxe_doc>
			</terminal>
			<shellIntegration set="null">
				<c path="vscode.TerminalShellIntegration"/>
				<haxe_doc>* The shell integration object.</haxe_doc>
			</shellIntegration>
		</a>
		<haxe_doc>* An event signalling that a terminal's shell integration has changed.</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalSplitLocationOptions" params="" file="src/vscode/TerminalSplitLocationOptions.hx">
		<a><parentTerminal>
	<t path="vscode.Terminal"/>
	<haxe_doc>* The parent terminal to split this terminal beside. This works whether the parent terminal
	 * is in the panel or the editor area.</haxe_doc>
</parentTerminal></a>
		<haxe_doc>* Uses the parent {@link Terminal}'s location for the terminal</haxe_doc>
	</typedef>
	<typedef path="vscode.TerminalState" params="" file="src/vscode/TerminalState.hx">
		<a><isInteractedWith set="null">
	<x path="Bool"/>
	<haxe_doc>* Whether the {@link Terminal} has been interacted with. Interaction means that the
	 * terminal has sent data to the process which depending on the terminal's _mode_. By
	 * default input is sent when a key is pressed or when a command or extension sends text,
	 * but based on the terminal's mode it can also happen on:
	 *
	 * - a pointer click event
	 * - a pointer scroll event
	 * - a pointer move event
	 * - terminal focus in/out
	 *
	 * For more information on events that can send data see "DEC Private Mode Set (DECSET)" on
	 * https://invisible-island.net/xterm/ctlseqs/ctlseqs.html</haxe_doc>
</isInteractedWith></a>
		<haxe_doc>* Represents the state of a {@link Terminal}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TestController" params="" file="src/vscode/TestController.hx">
		<a>
			<resolveHandler>
				<f a="item">
					<x path="Null"><t path="vscode.TestItem"/></x>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* A function provided by the extension that the editor may call to request
	 * children of a test item, if the {@link TestItem.canResolveChildren} is
	 * `true`. When called, the item should discover children and call
	 * {@link TestController.createTestItem} as children are discovered.
	 *
	 * Generally the extension manages the lifecycle of test items, but under
	 * certain conditions the editor may request the children of a specific
	 * item to be loaded. For example, if the user requests to re-run tests
	 * after reloading the editor, the editor may need to call this method
	 * to resolve the previously-run tests.
	 *
	 * The item in the explorer will automatically be marked as "busy" until
	 * the function returns or the returned thenable resolves.
	 *
	 * @param item An unresolved test item for which children are being
	 * requested, or `undefined` to resolve the controller's initial {@link TestController.items items}.</haxe_doc>
			</resolveHandler>
			<refreshHandler>
				<x path="Null"><f a="token">
	<t path="vscode.CancellationToken"/>
	<x path="js.lib.Thenable"><x path="Void"/></x>
</f></x>
				<haxe_doc>* If this method is present, a refresh button will be present in the
	 * UI, and this method will be invoked when it's clicked. When called,
	 * the extension should scan the workspace for any new, changed, or
	 * removed tests.
	 *
	 * It's recommended that extensions try to update tests in realtime, using
	 * a {@link FileSystemWatcher} for example, and use this method as a fallback.
	 *
	 * @returns A thenable that resolves when tests have been refreshed.</haxe_doc>
			</refreshHandler>
			<label>
				<c path="String"/>
				<haxe_doc>* Human-readable label for the test controller.</haxe_doc>
			</label>
			<items set="null">
				<t path="vscode.TestItemCollection"/>
				<haxe_doc>* A collection of "top-level" {@link TestItem} instances, which can in
	 * turn have their own {@link TestItem.children children} to form the
	 * "test tree."
	 *
	 * The extension controls when to add tests. For example, extensions should
	 * add tests for a file when {@link workspace.onDidOpenTextDocument}
	 * fires in order for decorations for tests within a file to be visible.
	 *
	 * However, the editor may sometimes explicitly request children using the
	 * {@link resolveHandler} See the documentation on that method for more details.</haxe_doc>
			</items>
			<invalidateTestResults set="method">
				<f a="?items">
					<x path="haxe.extern.EitherType">
						<t path="vscode.TestItem"/>
						<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Marks an item's results as being outdated. This is commonly called when
	 * code or configuration changes and previous results should no longer
	 * be considered relevant. The same logic used to mark results as outdated
	 * may be used to drive {@link TestRunRequest.continuous continuous test runs}.
	 *
	 * If an item is passed to this method, test results for the item and all of
	 * its children will be marked as outdated. If no item is passed, then all
	 * test owned by the TestController will be marked as outdated.
	 *
	 * Any test runs started before the moment this method is called, including
	 * runs which may still be ongoing, will be marked as outdated and deprioritized
	 * in the editor's UI.
	 *
	 * @param items Item to mark as outdated. If undefined, all the controller's items are marked outdated.</haxe_doc>
			</invalidateTestResults>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* The id of the controller passed in {@link tests.createTestController}.
	 * This must be globally unique.</haxe_doc>
			</id>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Unregisters the test controller, disposing of its associated tests
	 * and unpersisted results.</haxe_doc>
			</dispose>
			<createTestRun set="method">
				<f a="request:?name:?persist">
					<c path="vscode.TestRunRequest"/>
					<c path="String"/>
					<x path="Bool"/>
					<t path="vscode.TestRun"/>
				</f>
				<haxe_doc>* Creates a {@link TestRun}. This should be called by the
	 * {@link TestRunProfile} when a request is made to execute tests, and may
	 * also be called if a test run is detected externally. Once created, tests
	 * that are included in the request will be moved into the queued state.
	 *
	 * All runs created using the same `request` instance will be grouped
	 * together. This is useful if, for example, a single suite of tests is
	 * run on multiple platforms.
	 *
	 * @param request Test run request. Only tests inside the `include` may be
	 * modified, and tests in its `exclude` are ignored.
	 * @param name The human-readable name of the run. This can be used to
	 * disambiguate multiple sets of results in a test run. It is useful if
	 * tests are run across multiple platforms, for example.
	 * @param persist Whether the results created by the run should be
	 * persisted in the editor. This may be false if the results are coming from
	 * a file already saved externally, such as a coverage information file.
	 * @returns An instance of the {@link TestRun}. It will be considered "running"
	 * from the moment this method is invoked until {@link TestRun.end} is called.</haxe_doc>
			</createTestRun>
			<createTestItem set="method">
				<f a="id:label:?uri">
					<c path="String"/>
					<c path="String"/>
					<c path="vscode.Uri"/>
					<t path="vscode.TestItem"/>
				</f>
				<haxe_doc>* Creates a new managed {@link TestItem} instance. It can be added into
	 * the {@link TestItem.children} of an existing item, or into the
	 * {@link TestController.items}.
	 *
	 * @param id Identifier for the TestItem. The test item's ID must be unique
	 * in the {@link TestItemCollection} it's added to.
	 * @param label Human-readable label of the test item.
	 * @param uri URI this TestItem is associated with. May be a file or directory.</haxe_doc>
			</createTestItem>
			<createRunProfile set="method">
				<f a="label:kind:runHandler:?isDefault:?tag:?supportsContinuousRun">
					<c path="String"/>
					<x path="vscode.TestRunProfileKind"/>
					<f a="request:token">
						<c path="vscode.TestRunRequest"/>
						<t path="vscode.CancellationToken"/>
						<x path="js.lib.Thenable"><x path="Void"/></x>
					</f>
					<x path="Bool"/>
					<c path="vscode.TestTag"/>
					<x path="Bool"/>
					<t path="vscode.TestRunProfile"/>
				</f>
				<haxe_doc>* Creates a profile used for running tests. Extensions must create
	 * at least one profile in order for tests to be run.
	 * @param label A human-readable label for this profile.
	 * @param kind Configures what kind of execution this profile manages.
	 * @param runHandler Function called to start a test run.
	 * @param isDefault Whether this is the default action for its kind.
	 * @param tag Profile test tag.
	 * @param supportsContinuousRun Whether the profile supports continuous running.
	 * @returns An instance of a {@link TestRunProfile}, which is automatically
	 * associated with this controller.</haxe_doc>
			</createRunProfile>
		</a>
		<haxe_doc>* Entry point to discover and execute tests. It contains {@link TestController.items} which
 * are used to populate the editor UI, and is associated with
 * {@link TestController.createRunProfile run profiles} to allow
 * for tests to be executed.</haxe_doc>
	</typedef>
	<class path="vscode.TestCoverageCount" params="" file="src/vscode/TestCoverageCount.hx" extern="1">
		<covered public="1">
			<x path="Int"/>
			<haxe_doc>* Number of items covered in the file.</haxe_doc>
		</covered>
		<total public="1">
			<x path="Int"/>
			<haxe_doc>* Total number of covered items in the file.</haxe_doc>
		</total>
		<new public="1" set="method">
			<f a="covered:total">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param covered Value for {@link TestCoverageCount.covered}
	 * @param total Value for {@link TestCoverageCount.total}</haxe_doc>
		</new>
		<haxe_doc>* A class that contains information about a covered resource. A count can
 * be give for lines, branches, and declarations in a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TestCoverageCount"</e>
</m></meta>
	</class>
	<typedef path="vscode.TestItem" params="" file="src/vscode/TestItem.hx">
		<a>
			<uri set="null">
				<x path="Null"><c path="vscode.Uri"/></x>
				<haxe_doc>* URI this `TestItem` is associated with. May be a file or directory.</haxe_doc>
			</uri>
			<tags>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TestTag"/></x>
				<haxe_doc>* Tags associated with this test item. May be used in combination with
	 * {@link TestRunProfile.tag tags}, or simply as an organizational feature.</haxe_doc>
			</tags>
			<sortText>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A string that should be used when comparing this item
	 * with other items. When `falsy` the {@link TestItem.label label}
	 * is used.</haxe_doc>
			</sortText>
			<range>
				<x path="Null"><c path="vscode.Range"/></x>
				<haxe_doc>* Location of the test item in its {@link TestItem.uri uri}.
	 *
	 * This is only meaningful if the `uri` points to a file.</haxe_doc>
			</range>
			<parent set="null">
				<x path="Null"><t path="vscode.TestItem"/></x>
				<haxe_doc>* The parent of this item. It's set automatically, and is undefined
	 * top-level items in the {@link TestController.items} and for items that
	 * aren't yet included in another item's {@link TestItem.children children}.</haxe_doc>
			</parent>
			<label>
				<c path="String"/>
				<haxe_doc>* Display name describing the test case.</haxe_doc>
			</label>
			<id set="null">
				<c path="String"/>
				<haxe_doc>* Identifier for the `TestItem`. This is used to correlate
	 * test results and tests in the document with those in the workspace
	 * (test explorer). This cannot change for the lifetime of the `TestItem`,
	 * and must be unique among its parent's direct children.</haxe_doc>
			</id>
			<error>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
				<haxe_doc>* Optional error encountered while loading the test.
	 *
	 * Note that this is not a test result and should only be used to represent errors in
	 * test discovery, such as syntax errors.</haxe_doc>
			</error>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Optional description that appears next to the label.</haxe_doc>
			</description>
			<children set="null">
				<t path="vscode.TestItemCollection"/>
				<haxe_doc>* The children of this test item. For a test suite, this may contain the
	 * individual test cases or nested suites.</haxe_doc>
			</children>
			<canResolveChildren>
				<x path="Bool"/>
				<haxe_doc>* Indicates whether this test item may have children discovered by resolving.
	 *
	 * If true, this item is shown as expandable in the Test Explorer view and
	 * expanding the item will cause {@link TestController.resolveHandler}
	 * to be invoked with the item.
	 *
	 * Default to `false`.</haxe_doc>
			</canResolveChildren>
			<busy>
				<x path="Bool"/>
				<haxe_doc>* Controls whether the item is shown as "busy" in the Test Explorer view.
	 * This is useful for showing status while discovering children.
	 *
	 * Defaults to `false`.</haxe_doc>
			</busy>
		</a>
		<haxe_doc>* An item shown in the "test explorer" view.
 *
 * A `TestItem` can represent either a test suite or a test itself, since
 * they both have similar capabilities.</haxe_doc>
	</typedef>
	<typedef path="vscode.TestItemCollection" params="" file="src/vscode/TestItemCollection.hx">
		<a>
			<size set="null">
				<x path="Int"/>
				<haxe_doc>* Gets the number of items in the collection.</haxe_doc>
			</size>
			<replace set="method">
				<f a="items">
					<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replaces the items stored by the collection.
	 * @param items Items to store.</haxe_doc>
			</replace>
			<get set="method">
				<f a="itemId">
					<c path="String"/>
					<x path="Null"><t path="vscode.TestItem"/></x>
				</f>
				<haxe_doc>* Efficiently gets a test item by ID, if it exists, in the children.
	 * @param itemId Item ID to get.
	 * @returns The found item or undefined if it does not exist.</haxe_doc>
			</get>
			<forEach set="method">
				<f a="callback:?thisArg">
					<f a="item:collection">
						<t path="vscode.TestItem"/>
						<t path="vscode.TestItemCollection"/>
						<x path="Any"/>
					</f>
					<x path="Any"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Iterate over each entry in this collection.
	 *
	 * @param callback Function to execute for each entry.
	 * @param thisArg The `this` context used when invoking the handler function.</haxe_doc>
			</forEach>
			<delete set="method">
				<f a="itemId">
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Removes a single test item from the collection.
	 * @param itemId Item ID to delete.</haxe_doc>
			</delete>
			<add set="method">
				<f a="item">
					<t path="vscode.TestItem"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Adds the test item to the children. If an item with the same ID already
	 * exists, it'll be replaced.
	 * @param item Item to add.</haxe_doc>
			</add>
		</a>
		<haxe_doc>* Collection of test items, found in {@link TestItem.children} and
 * {@link TestController.items}.</haxe_doc>
	</typedef>
	<class path="vscode.TestMessage" params="" file="src/vscode/TestMessage.hx" extern="1">
		<diff public="1" set="method" static="1">
			<f a="message:expected:actual">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.TestMessage"/>
			</f>
			<haxe_doc>* Creates a new TestMessage that will present as a diff in the editor.
	 * @param message Message to display to the user.
	 * @param expected Expected output.
	 * @param actual Actual output.</haxe_doc>
		</diff>
		<message public="1">
			<x path="haxe.extern.EitherType">
				<c path="String"/>
				<c path="vscode.MarkdownString"/>
			</x>
			<haxe_doc>* Human-readable message text to display.</haxe_doc>
		</message>
		<expectedOutput public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Expected test output. If given with {@link TestMessage.actualOutput actualOutput }, a diff view will be shown.</haxe_doc>
		</expectedOutput>
		<actualOutput public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Actual test output. If given with {@link TestMessage.expectedOutput expectedOutput }, a diff view will be shown.</haxe_doc>
		</actualOutput>
		<location public="1">
			<x path="Null"><c path="vscode.Location"/></x>
			<haxe_doc>* Associated file location.</haxe_doc>
		</location>
		<contextValue public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Context value of the test item. This can be used to contribute message-
	 * specific actions to the test peek view. The value set here can be found
	 * in the `testMessage` property of the following `menus` contribution points:
	 *
	 * - `testing/message/context` - context menu for the message in the results tree
	 * - `testing/message/content` - a prominent button overlaying editor content where
	 *    the message is displayed.
	 *
	 * For example:
	 *
	 * ```json
	 * "contributes": {
	 *   "menus": {
	 *     "testing/message/content": [
	 *       {
	 *         "command": "extension.deleteCommentThread",
	 *         "when": "testMessage == canApplyRichDiff"
	 *       }
	 *     ]
	 *   }
	 * }
	 * ```
	 *
	 * The command will be called with an object containing:
	 * - `test`: the {@link TestItem} the message is associated with, *if* it
	 *    is still present in the {@link TestController.items} collection.
	 * - `message`: the {@link TestMessage} instance.</haxe_doc>
		</contextValue>
		<stackTrace public="1">
			<x path="Null"><c path="Array"><c path="vscode.TestMessageStackFrame"/></c></x>
			<haxe_doc>* The stack trace associated with the message or failure.</haxe_doc>
		</stackTrace>
		<new public="1" set="method">
			<f a="message">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<c path="vscode.MarkdownString"/>
				</x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new TestMessage instance.
	 * @param message The message to show to the user.</haxe_doc>
		</new>
		<haxe_doc>* Message associated with the test state. Can be linked to a specific
 * source range -- useful for assertion failures, for example.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TestMessage"</e>
</m></meta>
	</class>
	<class path="vscode.TestMessageStackFrame" params="" file="src/vscode/TestMessageStackFrame.hx" extern="1">
		<uri public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The location of this stack frame. This should be provided as a URI if the
	 * location of the call frame can be accessed by the editor.</haxe_doc>
		</uri>
		<position public="1">
			<x path="Null"><c path="vscode.Position"/></x>
			<haxe_doc>* Position of the stack frame within the file.</haxe_doc>
		</position>
		<label public="1">
			<c path="String"/>
			<haxe_doc>* The name of the stack frame, typically a method or function name.</haxe_doc>
		</label>
		<new public="1" set="method">
			<f a="label:?uri:?position">
				<c path="String"/>
				<c path="vscode.Uri"/>
				<c path="vscode.Position"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param label The name of the stack frame
	 * @param file The file URI of the stack frame
	 * @param position The position of the stack frame within the file</haxe_doc>
		</new>
		<haxe_doc>* A stack frame found in the {@link TestMessage.stackTrace}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TestMessageStackFrame"</e>
</m></meta>
	</class>
	<typedef path="vscode.TestRun" params="" file="src/vscode/TestRun.hx">
		<a>
			<token set="null">
				<t path="vscode.CancellationToken"/>
				<haxe_doc>* A cancellation token which will be triggered when the test run is
	 * canceled from the UI.</haxe_doc>
			</token>
			<started set="method">
				<f a="test">
					<t path="vscode.TestItem"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test has started running.
	 * @param test Test item to update.</haxe_doc>
			</started>
			<skipped set="method">
				<f a="test">
					<t path="vscode.TestItem"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test has been skipped.
	 * @param test Test item to update.</haxe_doc>
			</skipped>
			<passed set="method">
				<f a="test:?duration">
					<t path="vscode.TestItem"/>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test has passed.
	 * @param test Test item to update.
	 * @param duration How long the test took to execute, in milliseconds.</haxe_doc>
			</passed>
			<onDidDispose set="method">
				<f a=""><t path="vscode.Event"><x path="Void"/></t></f>
				<haxe_doc>* An event fired when the editor is no longer interested in data
	 * associated with the test run.</haxe_doc>
			</onDidDispose>
			<name set="null">
				<x path="Null"><c path="String"/></x>
				<haxe_doc>* The human-readable name of the run. This can be used to
	 * disambiguate multiple sets of results in a test run. It is useful if
	 * tests are run across multiple platforms, for example.</haxe_doc>
			</name>
			<isPersisted set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the test run will be persisted across reloads by the editor.</haxe_doc>
			</isPersisted>
			<failed set="method">
				<f a="test:message:?duration">
					<t path="vscode.TestItem"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.TestMessage"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TestMessage"/></x>
					</x>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test has failed. You should pass one or more
	 * {@link TestMessage TestMessages} to describe the failure.
	 * @param test Test item to update.
	 * @param message Messages associated with the test failure.
	 * @param duration How long the test took to execute, in milliseconds.</haxe_doc>
			</failed>
			<errored set="method">
				<f a="test:message:?duration">
					<t path="vscode.TestItem"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.TestMessage"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TestMessage"/></x>
					</x>
					<x path="Float"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test has errored. You should pass one or more
	 * {@link TestMessage TestMessages} to describe the failure. This differs
	 * from the "failed" state in that it indicates a test that couldn't be
	 * executed at all, from a compilation error for example.
	 * @param test Test item to update.
	 * @param message Messages associated with the test failure.
	 * @param duration How long the test took to execute, in milliseconds.</haxe_doc>
			</errored>
			<enqueued set="method">
				<f a="test">
					<t path="vscode.TestItem"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Indicates a test is queued for later execution.
	 * @param test Test item to update.</haxe_doc>
			</enqueued>
			<end set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Signals the end of the test run. Any tests included in the run whose
	 * states have not been updated will have their state reset.</haxe_doc>
			</end>
			<appendOutput set="method">
				<f a="output:?location:?test">
					<c path="String"/>
					<c path="vscode.Location"/>
					<t path="vscode.TestItem"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Appends raw output from the test runner. On the user's request, the
	 * output will be displayed in a terminal. ANSI escape sequences,
	 * such as colors and text styles, are supported. New lines must be given
	 * as CRLF (`\r\n`) rather than LF (`\n`).
	 *
	 * @param output Output text to append.
	 * @param location Indicate that the output was logged at the given
	 * location.
	 * @param test Test item to associate the output with.</haxe_doc>
			</appendOutput>
			<addCoverage set="method">
				<f a="fileCoverage">
					<c path="vscode.FileCoverage"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Adds coverage for a file in the run.</haxe_doc>
			</addCoverage>
		</a>
		<haxe_doc>* A TestRun represents an in-progress or completed test run and
 * provides methods to report the state of individual tests in the run.</haxe_doc>
	</typedef>
	<typedef path="vscode.TestRunProfile" params="" file="src/vscode/TestRunProfile.hx">
		<a>
			<tag>
				<x path="Null"><c path="vscode.TestTag"/></x>
				<haxe_doc>* Associated tag for the profile. If this is set, only {@link TestItem}
	 * instances with the same tag will be eligible to execute in this profile.</haxe_doc>
			</tag>
			<supportsContinuousRun>
				<x path="Bool"/>
				<haxe_doc>* Whether this profile supports continuous running of requests. If so,
	 * then {@link TestRunRequest.continuous} may be set to `true`. Defaults
	 * to false.</haxe_doc>
			</supportsContinuousRun>
			<runHandler>
				<f a="request:token">
					<c path="vscode.TestRunRequest"/>
					<t path="vscode.CancellationToken"/>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Handler called to start a test run. When invoked, the function should call
	 * {@link TestController.createTestRun} at least once, and all test runs
	 * associated with the request should be created before the function returns
	 * or the returned promise is resolved.
	 *
	 * If {@link supportsContinuousRun} is set, then {@link TestRunRequest.continuous}
	 * may be `true`. In this case, the profile should observe changes to
	 * source code and create new test runs by calling {@link TestController.createTestRun},
	 * until the cancellation is requested on the `token`.
	 *
	 * @param request Request information for the test run.
	 * @param cancellationToken Token that signals the used asked to abort the
	 * test run. If cancellation is requested on this token, all {@link TestRun}
	 * instances associated with the request will be
	 * automatically cancelled as well.</haxe_doc>
			</runHandler>
			<onDidChangeDefault>
				<t path="vscode.Event"><x path="Bool"/></t>
				<haxe_doc>* Fired when a user has changed whether this is a default profile. The
	 * event contains the new value of {@link isDefault}</haxe_doc>
			</onDidChangeDefault>
			<loadDetailedCoverageForTest>
				<x path="Null"><f a="testRun:fileCoverage:fromTestItem:token">
	<t path="vscode.TestRun"/>
	<c path="vscode.FileCoverage"/>
	<t path="vscode.TestItem"/>
	<t path="vscode.CancellationToken"/>
	<x path="js.lib.Thenable"><c path="Array"><t path="vscode.FileCoverageDetail"/></c></x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An extension-provided function that provides detailed statement and
	 * function-level coverage for a single test in a file. This is the per-test
	 * sibling of {@link TestRunProfile.loadDetailedCoverage}, called only if
	 * a test item is provided in {@link FileCoverage.includesTests} and only
	 * for files where such data is reported.
	 *
	 * Often {@link TestRunProfile.loadDetailedCoverage} will be called first
	 * when a user opens a file, and then this method will be called if they
	 * drill down into specific per-test coverage information. This method
	 * should then return coverage data only for statements and declarations
	 * executed by the specific test during the run.
	 *
	 * The {@link FileCoverage} object passed to this function is the same
	 * instance emitted on {@link TestRun.addCoverage} calls associated with this profile.
	 *
	 * @param testRun The test run that generated the coverage data.
	 * @param fileCoverage The file coverage object to load detailed coverage for.
	 * @param fromTestItem The test item to request coverage information for.
	 * @param token A cancellation token that indicates the operation should be cancelled.</haxe_doc>
			</loadDetailedCoverageForTest>
			<loadDetailedCoverage>
				<x path="Null"><f a="testRun:fileCoverage:token">
	<t path="vscode.TestRun"/>
	<c path="vscode.FileCoverage"/>
	<t path="vscode.CancellationToken"/>
	<x path="js.lib.Thenable"><c path="Array"><t path="vscode.FileCoverageDetail"/></c></x>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An extension-provided function that provides detailed statement and
	 * function-level coverage for a file. The editor will call this when more
	 * detail is needed for a file, such as when it's opened in an editor or
	 * expanded in the **Test Coverage** view.
	 *
	 * The {@link FileCoverage} object passed to this function is the same instance
	 * emitted on {@link TestRun.addCoverage} calls associated with this profile.</haxe_doc>
			</loadDetailedCoverage>
			<label>
				<c path="String"/>
				<haxe_doc>* Label shown to the user in the UI.
	 *
	 * Note that the label has some significance if the user requests that
	 * tests be re-run in a certain way. For example, if tests were run
	 * normally and the user requests to re-run them in debug mode, the editor
	 * will attempt use a configuration with the same label of the `Debug`
	 * kind. If there is no such configuration, the default will be used.</haxe_doc>
			</label>
			<kind set="null">
				<x path="vscode.TestRunProfileKind"/>
				<haxe_doc>* Configures what kind of execution this profile controls. If there
	 * are no profiles for a kind, it will not be available in the UI.</haxe_doc>
			</kind>
			<isDefault>
				<x path="Bool"/>
				<haxe_doc>* Controls whether this profile is the default action that will
	 * be taken when its kind is actioned. For example, if the user clicks
	 * the generic "run all" button, then the default profile for
	 * {@link TestRunProfileKind.Run} will be executed, although the
	 * user can configure this.
	 *
	 * Changes the user makes in their default profiles will be reflected
	 * in this property after a {@link onDidChangeDefault} event.</haxe_doc>
			</isDefault>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Deletes the run profile.</haxe_doc>
			</dispose>
			<configureHandler>
				<x path="Null"><f a=""><x path="Void"/></f></x>
				<haxe_doc>* If this method is present, a configuration gear will be present in the
	 * UI, and this method will be invoked when it's clicked. When called,
	 * you can take other editor actions, such as showing a quick pick or
	 * opening a configuration file.</haxe_doc>
			</configureHandler>
		</a>
		<haxe_doc>* A TestRunProfile describes one way to execute tests in a {@link TestController}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TestRunProfileKind" params="" file="src/vscode/TestRunProfileKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* The kind of executions that {@link TestRunProfile TestRunProfiles} control.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TestRunProfileKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TestRunProfileKind.TestRunProfileKind_Impl_" params="" file="src/vscode/TestRunProfileKind.hx" private="1" module="vscode.TestRunProfileKind" extern="1" final="1">
	<Run public="1" set="null" static="1">
		<x path="vscode.TestRunProfileKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Run` test profile kind.</haxe_doc>
	</Run>
	<Debug public="1" set="null" static="1">
		<x path="vscode.TestRunProfileKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Debug` test profile kind.</haxe_doc>
	</Debug>
	<Coverage public="1" set="null" static="1">
		<x path="vscode.TestRunProfileKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The `Coverage` test profile kind.</haxe_doc>
	</Coverage>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TestRunProfileKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TestRunProfileKind.TestRunProfileKind_Impl_" params="" file="src/vscode/TestRunProfileKind.hx" private="1" module="vscode.TestRunProfileKind" extern="1" final="1">
		<Run public="1" set="null" static="1">
			<x path="vscode.TestRunProfileKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Run` test profile kind.</haxe_doc>
		</Run>
		<Debug public="1" set="null" static="1">
			<x path="vscode.TestRunProfileKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Debug` test profile kind.</haxe_doc>
		</Debug>
		<Coverage public="1" set="null" static="1">
			<x path="vscode.TestRunProfileKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The `Coverage` test profile kind.</haxe_doc>
		</Coverage>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TestRunProfileKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.TestRunRequest" params="" file="src/vscode/TestRunRequest.hx" extern="1">
		<include public="1" set="null">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x></x>
			<haxe_doc>* A filter for specific tests to run. If given, the extension should run
	 * all of the included tests and all their children, excluding any tests
	 * that appear in {@link TestRunRequest.exclude}. If this property is
	 * undefined, then the extension should simply run all tests.
	 *
	 * The process of running tests should resolve the children of any test
	 * items who have not yet been resolved.</haxe_doc>
		</include>
		<exclude public="1" set="null">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x></x>
			<haxe_doc>* An array of tests the user has marked as excluded from the test included
	 * in this run; exclusions should apply after inclusions.
	 *
	 * May be omitted if no exclusions were requested. Test controllers should
	 * not run excluded tests or any children of excluded tests.</haxe_doc>
		</exclude>
		<profile public="1" set="null">
			<x path="Null"><t path="vscode.TestRunProfile"/></x>
			<haxe_doc>* The profile used for this request. This will always be defined
	 * for requests issued from the editor UI, though extensions may
	 * programmatically create requests not associated with any profile.</haxe_doc>
		</profile>
		<continuous public="1" set="null">
			<x path="Null"><x path="Bool"/></x>
			<haxe_doc>* Whether the profile should run continuously as source code changes. Only
	 * relevant for profiles that set {@link TestRunProfile.supportsContinuousRun}.</haxe_doc>
		</continuous>
		<preserveFocus public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Controls how test Test Results view is focused.  If true, the editor
	 * will keep the maintain the user's focus. If false, the editor will
	 * prefer to move focus into the Test Results view, although
	 * this may be configured by users.</haxe_doc>
		</preserveFocus>
		<new public="1" set="method">
			<f a="?include:?exclude:?profile">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x>
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TestItem"/></x>
				<x path="Null"><t path="vscode.TestRunProfile"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param include Array of specific tests to run, or undefined to run all tests
	 * @param exclude An array of tests to exclude from the run.
	 * @param profile The run profile used for this request.
	 * @param continuous Whether to run tests continuously as source changes.
	 * @param preserveFocus Whether to preserve the user's focus when the run is started</haxe_doc>
		</new>
		<haxe_doc>* A TestRunRequest is a precursor to a {@link TestRun}, which in turn is
 * created by passing a request to {@link TestController.createTestRun}. The
 * TestRunRequest contains information about which tests should be run, which
 * should not be run, and how they are run (via the {@link TestRunRequest.profile profile}).
 *
 * In general, TestRunRequests are created by the editor and pass to
 * {@link TestRunProfile.runHandler}, however you can also create test
 * requests and runs outside of the `runHandler`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TestRunRequest"</e>
</m></meta>
	</class>
	<class path="vscode.TestTag" params="" file="src/vscode/TestTag.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* ID of the test tag. `TestTag` instances with the same ID are considered
	 * to be identical.</haxe_doc>
		</id>
		<new public="1" set="method">
			<f a="id">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new TestTag instance.
	 * @param id ID of the test tag.</haxe_doc>
		</new>
		<haxe_doc>* Tags can be associated with {@link TestItem TestItems} and
 * {@link TestRunProfile TestRunProfiles}. A profile with a tag can only
 * execute tests that include that tag in their {@link TestItem.tags} array.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TestTag"</e>
</m></meta>
	</class>
	<class path="vscode.TextDocument" params="" file="src/vscode/TextDocument.hx" extern="1">
		<uri public="1" set="null">
			<c path="vscode.Uri"/>
			<haxe_doc>* The associated uri for this document.
	 *
	 * *Note* that most documents use the `file`-scheme, which means they are files on disk. However, **not** all documents are
	 * saved on disk and therefore the `scheme` must be checked before trying to access the underlying file or siblings on disk.
	 *
	 * @see {@link FileSystemProvider}
	 * @see {@link TextDocumentContentProvider}</haxe_doc>
		</uri>
		<fileName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The file system path of the associated resource. Shorthand
	 * notation for {@link TextDocument.uri TextDocument.uri.fsPath}. Independent of the uri scheme.</haxe_doc>
		</fileName>
		<isUntitled public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* Is this document representing an untitled file which has never been saved yet. *Note* that
	 * this does not mean the document will be saved to disk, use {@linkcode Uri.scheme}
	 * to figure out where a document will be {@link FileSystemProvider saved}, e.g. `file`, `ftp` etc.</haxe_doc>
		</isUntitled>
		<languageId public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The identifier of the language associated with this document.</haxe_doc>
		</languageId>
		<version public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The version number of this document (it will strictly increase after each
	 * change, including undo/redo).</haxe_doc>
		</version>
		<isDirty public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* `true` if there are unpersisted changes.</haxe_doc>
		</isDirty>
		<isClosed public="1" set="null">
			<x path="Bool"/>
			<haxe_doc>* `true` if the document has been closed. A closed document isn't synchronized anymore
	 * and won't be re-used when the same resource is opened again.</haxe_doc>
		</isClosed>
		<save public="1" set="method">
			<f a=""><x path="js.lib.Thenable"><x path="Bool"/></x></f>
			<haxe_doc>* Save the underlying file.
	 *
	 * @returns A promise that will resolve to `true` when the file
	 * has been saved. If the save failed, will return `false`.</haxe_doc>
		</save>
		<eol public="1" set="null">
			<x path="vscode.EndOfLine"/>
			<haxe_doc>* The {@link EndOfLine end of line} sequence that is predominately
	 * used in this document.</haxe_doc>
		</eol>
		<lineCount public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The number of lines in this document.</haxe_doc>
		</lineCount>
		<lineAt public="1" set="method">
			<f a="line">
				<x path="Int"/>
				<t path="vscode.TextLine"/>
			</f>
			<haxe_doc>* Returns a text line denoted by the line number. Note
	 * that the returned object is *not* live and changes to the
	 * document are not reflected.
	 *
	 * @param line A line number in `[0, lineCount)`.
	 * @returns A {@link TextLine line}.</haxe_doc>
			<overloads><lineAt public="1" set="method">
	<f a="position">
		<c path="vscode.Position"/>
		<t path="vscode.TextLine"/>
	</f>
	<haxe_doc>* Returns a text line denoted by the position. Note
	 * that the returned object is *not* live and changes to the
	 * document are not reflected.
	 *
	 * The position will be {@link TextDocument.validatePosition adjusted}.
	 *
	 * @see {@link TextDocument.lineAt}
	 *
	 * @param position A position.
	 * @returns A {@link TextLine line}.</haxe_doc>
</lineAt></overloads>
		</lineAt>
		<offsetAt public="1" set="method">
			<f a="position">
				<c path="vscode.Position"/>
				<x path="Int"/>
			</f>
			<haxe_doc>* Converts the position to a zero-based offset.
	 *
	 * The position will be {@link TextDocument.validatePosition adjusted}.
	 *
	 * @param position A position.
	 * @returns A valid zero-based offset.</haxe_doc>
		</offsetAt>
		<positionAt public="1" set="method">
			<f a="offset">
				<x path="Int"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Converts a zero-based offset to a position.
	 *
	 * @param offset A zero-based offset.
	 * @returns A valid {@link Position}.</haxe_doc>
		</positionAt>
		<getText public="1" set="method">
			<f a="?range">
				<c path="vscode.Range"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Get the text of this document. A substring can be retrieved by providing
	 * a range. The range will be {@link TextDocument.validateRange adjusted}.
	 *
	 * @param range Include only the text included by the range.
	 * @returns The text inside the provided range or the entire text.</haxe_doc>
		</getText>
		<getWordRangeAtPosition public="1" set="method">
			<f a="position:?regex">
				<c path="vscode.Position"/>
				<c path="js.lib.RegExp"/>
				<x path="Null"><c path="vscode.Range"/></x>
			</f>
			<haxe_doc>* Get a word-range at the given position. By default words are defined by
	 * common separators, like space, -, _, etc. In addition, per language custom
	 * [word definitions] can be defined. It
	 * is also possible to provide a custom regular expression.
	 *
	 * * *Note 1:* A custom regular expression must not match the empty string and
	 * if it does, it will be ignored.
	 * * *Note 2:* A custom regular expression will fail to match multiline strings
	 * and in the name of speed regular expressions should not match words with
	 * spaces. Use {@linkcode TextLine.text} for more complex, non-wordy, scenarios.
	 *
	 * The position will be {@link TextDocument.validatePosition adjusted}.
	 *
	 * @param position A position.
	 * @param regex Optional regular expression that describes what a word is.
	 * @returns A range spanning a word, or `undefined`.</haxe_doc>
		</getWordRangeAtPosition>
		<validateRange public="1" set="method">
			<f a="range">
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
			</f>
			<haxe_doc>* Ensure a range is completely contained in this document.
	 *
	 * @param range A range.
	 * @returns The given range or a new, adjusted range.</haxe_doc>
		</validateRange>
		<validatePosition public="1" set="method">
			<f a="position">
				<c path="vscode.Position"/>
				<c path="vscode.Position"/>
			</f>
			<haxe_doc>* Ensure a position is contained in the range of this document.
	 *
	 * @param position A position.
	 * @returns The given position or a new, adjusted position.</haxe_doc>
		</validatePosition>
		<haxe_doc>* Represents a text document, such as a source file. Text documents have
 * {@link TextLine lines} and knowledge about an underlying resource like a file.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TextDocument"</e>
</m></meta>
	</class>
	<typedef path="vscode.TextDocumentChangeEvent" params="" file="src/vscode/TextDocumentChangeEvent.hx">
		<a>
			<reason set="null">
				<x path="Null"><x path="vscode.TextDocumentChangeReason"/></x>
				<haxe_doc>* The reason why the document was changed.
	 * Is `undefined` if the reason is not known.</haxe_doc>
			</reason>
			<document set="null">
				<c path="vscode.TextDocument"/>
				<haxe_doc>* The affected document.</haxe_doc>
			</document>
			<contentChanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.TextDocumentContentChangeEvent"/></x>
				<haxe_doc>* An array of content changes.</haxe_doc>
			</contentChanges>
		</a>
		<haxe_doc>* An event describing a transactional {@link TextDocument document} change.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextDocumentChangeReason" params="" file="src/vscode/TextDocumentChangeReason.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Reasons for why a text document has changed.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentChangeReason"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextDocumentChangeReason.TextDocumentChangeReason_Impl_" params="" file="src/vscode/TextDocumentChangeReason.hx" private="1" module="vscode.TextDocumentChangeReason" extern="1" final="1">
	<Undo public="1" set="null" static="1">
		<x path="vscode.TextDocumentChangeReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>The text change is caused by an undo operation.</haxe_doc>
	</Undo>
	<Redo public="1" set="null" static="1">
		<x path="vscode.TextDocumentChangeReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>The text change is caused by an redo operation.</haxe_doc>
	</Redo>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextDocumentChangeReason"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextDocumentChangeReason.TextDocumentChangeReason_Impl_" params="" file="src/vscode/TextDocumentChangeReason.hx" private="1" module="vscode.TextDocumentChangeReason" extern="1" final="1">
		<Undo public="1" set="null" static="1">
			<x path="vscode.TextDocumentChangeReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>The text change is caused by an undo operation.</haxe_doc>
		</Undo>
		<Redo public="1" set="null" static="1">
			<x path="vscode.TextDocumentChangeReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>The text change is caused by an redo operation.</haxe_doc>
		</Redo>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentChangeReason"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextDocumentContentChangeEvent" params="" file="src/vscode/TextDocumentContentChangeEvent.hx">
		<a>
			<text set="null">
				<c path="String"/>
				<haxe_doc>* The new text for the range.</haxe_doc>
			</text>
			<rangeOffset set="null">
				<x path="Int"/>
				<haxe_doc>* The offset of the range that got replaced.</haxe_doc>
			</rangeOffset>
			<rangeLength set="null">
				<x path="Int"/>
				<haxe_doc>* The length of the range that got replaced.</haxe_doc>
			</rangeLength>
			<range set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range that got replaced.</haxe_doc>
			</range>
		</a>
		<haxe_doc>* An event describing an individual change in the text of a {@link TextDocument document}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextDocumentContentProvider" params="" file="src/vscode/TextDocumentContentProvider.hx">
		<a>
			<provideTextDocumentContent set="method">
				<f a="uri:token">
					<c path="vscode.Uri"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="String"/></t>
				</f>
				<haxe_doc>* Provide textual content for a given uri.
	 *
	 * The editor will use the returned string-content to create a readonly
	 * {@link TextDocument document}. Resources allocated should be released when
	 * the corresponding document has been {@link workspace.onDidCloseTextDocument closed}.
	 *
	 * **Note**: The contents of the created {@link TextDocument document} might not be
	 * identical to the provided text due to end-of-line-sequence normalization.
	 *
	 * @param uri An uri which scheme matches the scheme this provider was {@link workspace.registerTextDocumentContentProvider registered} for.
	 * @param token A cancellation token.
	 * @returns A string or a thenable that resolves to such.</haxe_doc>
			</provideTextDocumentContent>
			<onDidChange set="null">
				<x path="Null"><t path="vscode.Event"><c path="vscode.Uri"/></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An event to signal a resource has changed.</haxe_doc>
			</onDidChange>
		</a>
		<haxe_doc>* A text document content provider allows to add readonly documents
 * to the editor, such as source from a dll or generated html from md.
 *
 * Content providers are {@link workspace.registerTextDocumentContentProvider registered}
 * for a {@link Uri.scheme uri-scheme}. When a uri with that scheme is to
 * be {@link workspace.openTextDocument loaded} the content provider is
 * asked.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextDocumentSaveReason" params="" file="src/vscode/TextDocumentSaveReason.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents reasons why a text document is saved.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentSaveReason"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextDocumentSaveReason.TextDocumentSaveReason_Impl_" params="" file="src/vscode/TextDocumentSaveReason.hx" private="1" module="vscode.TextDocumentSaveReason" extern="1" final="1">
	<Manual public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Manually triggered, e.g. by the user pressing save, by starting debugging,
	 * or by an API call.</haxe_doc>
	</Manual>
	<AfterDelay public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Automatic after a delay.</haxe_doc>
	</AfterDelay>
	<FocusOut public="1" set="null" static="1">
		<x path="vscode.TextDocumentSaveReason"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* When the editor lost focus.</haxe_doc>
	</FocusOut>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextDocumentSaveReason"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextDocumentSaveReason.TextDocumentSaveReason_Impl_" params="" file="src/vscode/TextDocumentSaveReason.hx" private="1" module="vscode.TextDocumentSaveReason" extern="1" final="1">
		<Manual public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Manually triggered, e.g. by the user pressing save, by starting debugging,
	 * or by an API call.</haxe_doc>
		</Manual>
		<AfterDelay public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Automatic after a delay.</haxe_doc>
		</AfterDelay>
		<FocusOut public="1" set="null" static="1">
			<x path="vscode.TextDocumentSaveReason"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* When the editor lost focus.</haxe_doc>
		</FocusOut>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextDocumentSaveReason"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextDocumentShowOptions" params="" file="src/vscode/TextDocumentShowOptions.hx">
		<a>
			<viewColumn>
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional view column in which the {@link TextEditor editor} should be shown.
	 * The default is the {@link ViewColumn.Active active}. Columns that do not exist
	 * will be created as needed up to the maximum of {@linkcode ViewColumn.Nine}.
	 * Use {@linkcode ViewColumn.Beside} to open the editor to the side of the currently
	 * active one.</haxe_doc>
			</viewColumn>
			<selection>
				<x path="Null"><c path="vscode.Range"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional selection to apply for the document in the {@link TextEditor editor}.</haxe_doc>
			</selection>
			<preview>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that controls if an {@link TextEditor editor}-tab shows as preview. Preview tabs will
	 * be replaced and reused until set to stay - either explicitly or through editing.
	 *
	 * *Note* that the flag is ignored if a user has disabled preview editors in settings.</haxe_doc>
			</preview>
			<preserveFocus>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional flag that when `true` will stop the {@link TextEditor editor} from taking focus.</haxe_doc>
			</preserveFocus>
		</a>
		<haxe_doc>* Represents options to configure the behavior of showing a {@link TextDocument document} in an {@link TextEditor editor}.</haxe_doc>
	</typedef>
	<class path="vscode.TextDocumentWillSaveEvent" params="" file="src/vscode/TextDocumentWillSaveEvent.hx" extern="1">
		<document public="1" set="null">
			<c path="vscode.TextDocument"/>
			<haxe_doc>* The document that will be saved.</haxe_doc>
		</document>
		<reason public="1" set="null">
			<x path="vscode.TextDocumentSaveReason"/>
			<haxe_doc>* The reason why save was triggered.</haxe_doc>
		</reason>
		<waitUntil public="1" set="method">
			<f a="thenable">
				<x path="js.lib.Thenable"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.TextEdit"/></x></x>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Allows to pause the event loop and to apply {@link TextEdit pre-save-edits}.
	 * Edits of subsequent calls to this function will be applied in order. The
	 * edits will be *ignored* if concurrent modifications of the document happened.
	 *
	 * *Note:* This function can only be called during event dispatch and not
	 * in an asynchronous manner:
	 *
	 * ```ts
	 * workspace.onWillSaveTextDocument(event => {
	 * 	// async, will *throw* an error
	 * 	setTimeout(() => event.waitUntil(promise));
	 *
	 * 	// sync, OK
	 * 	event.waitUntil(promise);
	 * })
	 * ```
	 *
	 * @param thenable A thenable that resolves to {@link TextEdit pre-save-edits}.]]></haxe_doc>
			<overloads><waitUntil public="1" set="method">
	<f a="thenable">
		<x path="js.lib.Thenable"><d/></x>
		<x path="Void"/>
	</f>
	<haxe_doc>* Allows to pause the event loop until the provided thenable resolved.
	 *
	 * *Note:* This function can only be called during event dispatch.
	 *
	 * @param thenable A thenable that delays saving.</haxe_doc>
</waitUntil></overloads>
		</waitUntil>
		<haxe_doc>* An event that is fired when a {@link TextDocument document} will be saved.
 *
 * To make modifications to the document before it is being saved, call the
 * {@linkcode TextDocumentWillSaveEvent.waitUntil waitUntil}-function with a thenable
 * that resolves to an array of {@link TextEdit text edits}.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TextDocumentWillSaveEvent"</e>
</m></meta>
	</class>
	<class path="vscode.TextEdit" params="" file="src/vscode/TextEdit.hx" extern="1">
		<replace public="1" set="method" static="1">
			<f a="range:newText">
				<c path="vscode.Range"/>
				<c path="String"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create a replace edit.
	 *
	 * @param range A range.
	 * @param newText A string.
	 * @returns A new text edit object.</haxe_doc>
		</replace>
		<insert public="1" set="method" static="1">
			<f a="position:newText">
				<c path="vscode.Position"/>
				<c path="String"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create an insert edit.
	 *
	 * @param position A position, will become an empty range.
	 * @param newText A string.
	 * @returns A new text edit object.</haxe_doc>
		</insert>
		<delete public="1" set="method" static="1">
			<f a="range">
				<c path="vscode.Range"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create a delete edit.
	 *
	 * @param range A range.
	 * @returns A new text edit object.</haxe_doc>
		</delete>
		<setEndOfLine public="1" set="method" static="1">
			<f a="eol">
				<x path="vscode.EndOfLine"/>
				<c path="vscode.TextEdit"/>
			</f>
			<haxe_doc>* Utility to create an eol-edit.
	 *
	 * @param eol An eol-sequence
	 * @returns A new text edit object.</haxe_doc>
		</setEndOfLine>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range this edit applies to.</haxe_doc>
		</range>
		<newText public="1">
			<c path="String"/>
			<haxe_doc>* The string this edit will insert.</haxe_doc>
		</newText>
		<newEol public="1">
			<x path="Null"><x path="vscode.EndOfLine"/></x>
			<haxe_doc>* The eol-sequence used in the document.
	 *
	 * *Note* that the eol-sequence will be applied to the
	 * whole document.</haxe_doc>
		</newEol>
		<new public="1" set="method">
			<f a="range:newText">
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a new TextEdit.
	 *
	 * @param range A range.
	 * @param newText A string.</haxe_doc>
		</new>
		<haxe_doc>* A text edit represents edits that should be applied
 * to a document.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TextEdit"</e>
</m></meta>
	</class>
	<typedef path="vscode.TextEditor" params="" file="src/vscode/TextEditor.hx">
		<a>
			<visibleRanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
				<haxe_doc>* The current visible ranges in the editor (vertically).
	 * This accounts only for vertical scrolling, and not for horizontal scrolling.</haxe_doc>
			</visibleRanges>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<haxe_doc>* The column in which this editor shows. Will be `undefined` in case this
	 * isn't one of the main editors, e.g. an embedded editor, or when the editor
	 * column is larger than three.</haxe_doc>
			</viewColumn>
			<show set="method">
				<f a="?column">
					<x path="vscode.ViewColumn"/>
					<x path="Void"/>
				</f>
				<meta><m n=":deprecated"><e>"Use `window.showTextDocument` instead."</e></m></meta>
				<haxe_doc>* Show the text editor.
	 *
	 * @deprecated Use {@link window.showTextDocument} instead.
	 *
	 * @param column The {@link ViewColumn column} in which to show this editor.
	 * This method shows unexpected behavior and will be removed in the next major update.</haxe_doc>
			</show>
			<setDecorations set="method">
				<f a="decorationType:rangesOrOptions">
					<t path="vscode.TextEditorDecorationType"/>
					<x path="haxe.extern.EitherType">
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
						<x path="haxe.ds.ReadOnlyArray"><t path="vscode.DecorationOptions"/></x>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Adds a set of decorations to the text editor. If a set of decorations already exists with
	 * the given {@link TextEditorDecorationType decoration type}, they will be replaced. If
	 * `rangesOrOptions` is empty, the existing decorations with the given {@link TextEditorDecorationType decoration type}
	 * will be removed.
	 *
	 * @see {@link window.createTextEditorDecorationType createTextEditorDecorationType}.
	 *
	 * @param decorationType A decoration type.
	 * @param rangesOrOptions Either {@link Range ranges} or more detailed {@link DecorationOptions options}.</haxe_doc>
			</setDecorations>
			<selections>
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Selection"/></x>
				<haxe_doc>* The selections in this text editor. The primary selection is always at index 0.</haxe_doc>
			</selections>
			<selection>
				<c path="vscode.Selection"/>
				<haxe_doc>* The primary selection on this text editor. Shorthand for `TextEditor.selections[0]`.</haxe_doc>
			</selection>
			<revealRange set="method">
				<f a="range:?revealType">
					<c path="vscode.Range"/>
					<x path="vscode.TextEditorRevealType"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Scroll as indicated by `revealType` in order to reveal the given range.
	 *
	 * @param range A range.
	 * @param revealType The scrolling strategy for revealing `range`.</haxe_doc>
			</revealRange>
			<options>
				<t path="vscode.TextEditorOptions"/>
				<haxe_doc>* Text editor options.</haxe_doc>
			</options>
			<insertSnippet set="method">
				<f a="snippet:?location:?options">
					<c path="vscode.SnippetString"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.Position"/>
						<x path="haxe.extern.EitherType">
							<c path="vscode.Range"/>
							<x path="haxe.extern.EitherType">
								<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Position"/></x>
								<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
							</x>
						</x>
					</x>
					<a>
						<undoStopBefore><x path="Bool"/></undoStopBefore>
						<undoStopAfter><x path="Bool"/></undoStopAfter>
					</a>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Insert a {@link SnippetString snippet} and put the editor into snippet mode. "Snippet mode"
	 * means the editor adds placeholders and additional cursors so that the user can complete
	 * or accept the snippet.
	 *
	 * @param snippet The snippet to insert in this edit.
	 * @param location Position or range at which to insert the snippet, defaults to the current editor selection or selections.
	 * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.
	 * @returns A promise that resolves with a value indicating if the snippet could be inserted. Note that the promise does not signal
	 * that the snippet is completely filled-in or accepted.</haxe_doc>
			</insertSnippet>
			<hide set="method">
				<f a=""><x path="Void"/></f>
				<meta><m n=":deprecated"><e>"Use the command `workbench.action.closeActiveEditor` instead."</e></m></meta>
				<haxe_doc>* Hide the text editor.
	 *
	 * @deprecated Use the command `workbench.action.closeActiveEditor` instead.
	 * This method shows unexpected behavior and will be removed in the next major update.</haxe_doc>
			</hide>
			<edit set="method">
				<f a="callback:?options">
					<f a="">
						<t path="vscode.TextEditorEdit"/>
						<x path="Void"/>
					</f>
					<a>
						<undoStopBefore><x path="Bool"/></undoStopBefore>
						<undoStopAfter><x path="Bool"/></undoStopAfter>
					</a>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Perform an edit on the document associated with this text editor.
	 *
	 * The given callback-function is invoked with an {@link TextEditorEdit edit-builder} which must
	 * be used to make edits. Note that the edit-builder is only valid while the
	 * callback executes.
	 *
	 * @param callback A function which can create edits using an {@link TextEditorEdit edit-builder}.
	 * @param options The undo/redo behavior around this edit. By default, undo stops will be created before and after this edit.
	 * @returns A promise that resolves with a value indicating if the edits could be applied.</haxe_doc>
			</edit>
			<document set="null">
				<c path="vscode.TextDocument"/>
				<haxe_doc>* The document associated with this text editor. The document will be the same for the entire lifetime of this text editor.</haxe_doc>
			</document>
		</a>
		<haxe_doc>* Represents an editor that is attached to a {@link TextDocument document}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorCursorStyle" params="" file="src/vscode/TextEditorCursorStyle.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Rendering style of the cursor.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorCursorStyle"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorCursorStyle.TextEditorCursorStyle_Impl_" params="" file="src/vscode/TextEditorCursorStyle.hx" private="1" module="vscode.TextEditorCursorStyle" extern="1" final="1">
	<Line public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a vertical thick line.</haxe_doc>
	</Line>
	<Block public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a block filled.</haxe_doc>
	</Block>
	<Underline public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a thick horizontal line.</haxe_doc>
	</Underline>
	<LineThin public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a vertical thin line.</haxe_doc>
	</LineThin>
	<BlockOutline public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a block outlined.</haxe_doc>
	</BlockOutline>
	<UnderlineThin public="1" set="null" static="1">
		<x path="vscode.TextEditorCursorStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the cursor as a thin horizontal line.</haxe_doc>
	</UnderlineThin>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorCursorStyle"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorCursorStyle.TextEditorCursorStyle_Impl_" params="" file="src/vscode/TextEditorCursorStyle.hx" private="1" module="vscode.TextEditorCursorStyle" extern="1" final="1">
		<Line public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a vertical thick line.</haxe_doc>
		</Line>
		<Block public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a block filled.</haxe_doc>
		</Block>
		<Underline public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a thick horizontal line.</haxe_doc>
		</Underline>
		<LineThin public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a vertical thin line.</haxe_doc>
		</LineThin>
		<BlockOutline public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a block outlined.</haxe_doc>
		</BlockOutline>
		<UnderlineThin public="1" set="null" static="1">
			<x path="vscode.TextEditorCursorStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the cursor as a thin horizontal line.</haxe_doc>
		</UnderlineThin>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorCursorStyle"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorDecorationType" params="" file="src/vscode/TextEditorDecorationType.hx">
		<a>
			<key set="null">
				<c path="String"/>
				<haxe_doc>* Internal representation of the handle.</haxe_doc>
			</key>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Remove this decoration type and all decorations on all text editors using it.</haxe_doc>
			</dispose>
		</a>
		<haxe_doc>* Represents a handle to a set of decorations
 * sharing the same {@link DecorationRenderOptions styling options} in a {@link TextEditor text editor}.
 *
 * To get an instance of a `TextEditorDecorationType` use
 * {@link window.createTextEditorDecorationType createTextEditorDecorationType}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorEdit" params="" file="src/vscode/TextEditorEdit.hx">
		<a>
			<setEndOfLine set="method">
				<f a="endOfLine">
					<x path="vscode.EndOfLine"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Set the end of line sequence.
	 *
	 * @param endOfLine The new end of line for the {@link TextDocument document}.</haxe_doc>
			</setEndOfLine>
			<replace set="method">
				<f a="location:value">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Position"/>
						<x path="haxe.extern.EitherType">
							<c path="vscode.Range"/>
							<c path="vscode.Selection"/>
						</x>
					</x>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Replace a certain text region with a new value.
	 * You can use `\r\n` or `\n` in `value` and they will be normalized to the current {@link TextDocument document}.
	 *
	 * @param location The range this operation should remove.
	 * @param value The new text this operation should insert after removing `location`.</haxe_doc>
			</replace>
			<insert set="method">
				<f a="location:value">
					<c path="vscode.Position"/>
					<c path="String"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Insert text at a location.
	 * You can use `\r\n` or `\n` in `value` and they will be normalized to the current {@link TextDocument document}.
	 * Although the equivalent text edit can be made with {@link TextEditorEdit.replace replace}, `insert` will produce a different resulting selection (it will get moved).
	 *
	 * @param location The position where the new text should be inserted.
	 * @param value The new text this operation should insert.</haxe_doc>
			</insert>
			<delete set="method">
				<f a="location">
					<x path="haxe.extern.EitherType">
						<c path="vscode.Range"/>
						<c path="vscode.Selection"/>
					</x>
					<x path="Void"/>
				</f>
				<haxe_doc>* Delete a certain text region.
	 *
	 * @param location The range this operation should remove.</haxe_doc>
			</delete>
		</a>
		<haxe_doc>* A complex edit that will be applied in one transaction on a TextEditor.
 * This holds a description of the edits and if the edits are valid (i.e. no overlapping regions, document was not changed in the meantime, etc.)
 * they can be applied on a {@link TextDocument document} associated with a {@link TextEditor text editor}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorLineNumbersStyle" params="" file="src/vscode/TextEditorLineNumbersStyle.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Rendering style of the line numbers.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorLineNumbersStyle"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorLineNumbersStyle.TextEditorLineNumbersStyle_Impl_" params="" file="src/vscode/TextEditorLineNumbersStyle.hx" private="1" module="vscode.TextEditorLineNumbersStyle" extern="1" final="1">
	<Off public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Do not render the line numbers.</haxe_doc>
	</Off>
	<On public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the line numbers.</haxe_doc>
	</On>
	<Relative public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the line numbers with values relative to the primary cursor location.</haxe_doc>
	</Relative>
	<Interval public="1" set="null" static="1">
		<x path="vscode.TextEditorLineNumbersStyle"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Render the line numbers on every 10th line number.</haxe_doc>
	</Interval>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorLineNumbersStyle"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorLineNumbersStyle.TextEditorLineNumbersStyle_Impl_" params="" file="src/vscode/TextEditorLineNumbersStyle.hx" private="1" module="vscode.TextEditorLineNumbersStyle" extern="1" final="1">
		<Off public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Do not render the line numbers.</haxe_doc>
		</Off>
		<On public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the line numbers.</haxe_doc>
		</On>
		<Relative public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the line numbers with values relative to the primary cursor location.</haxe_doc>
		</Relative>
		<Interval public="1" set="null" static="1">
			<x path="vscode.TextEditorLineNumbersStyle"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Render the line numbers on every 10th line number.</haxe_doc>
		</Interval>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorLineNumbersStyle"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorOptions" params="" file="src/vscode/TextEditorOptions.hx">
		<a>
			<tabSize>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The size in spaces a tab takes. This is used for two purposes:
	 *  - the rendering width of a tab character;
	 *  - the number of spaces to insert when {@link TextEditorOptions.insertSpaces insertSpaces} is true
	 *    and `indentSize` is set to `"tabSize"`.
	 *
	 * When getting a text editor's options, this property will always be a number (resolved).
	 * When setting a text editor's options, this property is optional and it can be a number or `"auto"`.</haxe_doc>
			</tabSize>
			<lineNumbers>
				<x path="Null"><x path="vscode.TextEditorLineNumbersStyle"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Render relative line numbers w.r.t. the current line number.
	 * When getting a text editor's options, this property will always be present.
	 * When setting a text editor's options, this property is optional.</haxe_doc>
			</lineNumbers>
			<insertSpaces>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* When pressing Tab insert {@link TextEditorOptions.tabSize n} spaces.
	 * When getting a text editor's options, this property will always be a boolean (resolved).
	 * When setting a text editor's options, this property is optional and it can be a boolean or `"auto"`.</haxe_doc>
			</insertSpaces>
			<indentSize>
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Int"/>
	<c path="String"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The number of spaces to insert when {@link TextEditorOptions.insertSpaces insertSpaces} is true.
	 *
	 * When getting a text editor's options, this property will always be a number (resolved).
	 * When setting a text editor's options, this property is optional and it can be a number or `"tabSize"`.</haxe_doc>
			</indentSize>
			<cursorStyle>
				<x path="Null"><x path="vscode.TextEditorCursorStyle"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The rendering style of the cursor in this editor.
	 * When getting a text editor's options, this property will always be present.
	 * When setting a text editor's options, this property is optional.</haxe_doc>
			</cursorStyle>
		</a>
		<haxe_doc>* Represents a {@link TextEditor text editor}'s {@link TextEditor.options options}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorOptionsChangeEvent" params="" file="src/vscode/TextEditorOptionsChangeEvent.hx">
		<a>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The {@link TextEditor text editor} for which the options have changed.</haxe_doc>
			</textEditor>
			<options set="null">
				<t path="vscode.TextEditorOptions"/>
				<haxe_doc>* The new value for the {@link TextEditor.options text editor's options}.</haxe_doc>
			</options>
		</a>
		<haxe_doc>* Represents an event describing the change in a {@link TextEditor.options text editor's options}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorRevealType" params="" file="src/vscode/TextEditorRevealType.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents different {@link TextEditor.revealRange reveal} strategies in a text editor.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorRevealType"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorRevealType.TextEditorRevealType_Impl_" params="" file="src/vscode/TextEditorRevealType.hx" private="1" module="vscode.TextEditorRevealType" extern="1" final="1">
	<Default public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
	</Default>
	<InCenter public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
	</InCenter>
	<InCenterIfOutsideViewport public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
	</InCenterIfOutsideViewport>
	<AtTop public="1" set="null" static="1">
		<x path="vscode.TextEditorRevealType"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
	</AtTop>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorRevealType"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorRevealType.TextEditorRevealType_Impl_" params="" file="src/vscode/TextEditorRevealType.hx" private="1" module="vscode.TextEditorRevealType" extern="1" final="1">
		<Default public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will be revealed with as little scrolling as possible.</haxe_doc>
		</Default>
		<InCenter public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will always be revealed in the center of the viewport.</haxe_doc>
		</InCenter>
		<InCenterIfOutsideViewport public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* If the range is outside the viewport, it will be revealed in the center of the viewport.
	 * Otherwise, it will be revealed with as little scrolling as possible.</haxe_doc>
		</InCenterIfOutsideViewport>
		<AtTop public="1" set="null" static="1">
			<x path="vscode.TextEditorRevealType"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The range will always be revealed at the top of the viewport.</haxe_doc>
		</AtTop>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorRevealType"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorSelectionChangeEvent" params="" file="src/vscode/TextEditorSelectionChangeEvent.hx">
		<a>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The {@link TextEditor text editor} for which the selections have changed.</haxe_doc>
			</textEditor>
			<selections set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Selection"/></x>
				<haxe_doc>* The new value for the {@link TextEditor.selections text editor's selections}.</haxe_doc>
			</selections>
			<kind set="null">
				<x path="Null"><x path="vscode.TextEditorSelectionChangeKind"/></x>
				<haxe_doc>* The {@link TextEditorSelectionChangeKind change kind} which has triggered this
	 * event. Can be `undefined`.</haxe_doc>
			</kind>
		</a>
		<haxe_doc>* Represents an event describing the change in a {@link TextEditor.selections text editor's selections}.</haxe_doc>
	</typedef>
	<abstract path="vscode.TextEditorSelectionChangeKind" params="" file="src/vscode/TextEditorSelectionChangeKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Represents sources that can cause {@link window.onDidChangeTextEditorSelection selection change events}.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorSelectionChangeKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._TextEditorSelectionChangeKind.TextEditorSelectionChangeKind_Impl_" params="" file="src/vscode/TextEditorSelectionChangeKind.hx" private="1" module="vscode.TextEditorSelectionChangeKind" extern="1" final="1">
	<Keyboard public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Selection changed due to typing in the editor.</haxe_doc>
	</Keyboard>
	<Mouse public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Selection change due to clicking in the editor.</haxe_doc>
	</Mouse>
	<Command public="1" set="null" static="1">
		<x path="vscode.TextEditorSelectionChangeKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Selection changed because a command ran.</haxe_doc>
	</Command>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TextEditorSelectionChangeKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TextEditorSelectionChangeKind.TextEditorSelectionChangeKind_Impl_" params="" file="src/vscode/TextEditorSelectionChangeKind.hx" private="1" module="vscode.TextEditorSelectionChangeKind" extern="1" final="1">
		<Keyboard public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Selection changed due to typing in the editor.</haxe_doc>
		</Keyboard>
		<Mouse public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Selection change due to clicking in the editor.</haxe_doc>
		</Mouse>
		<Command public="1" set="null" static="1">
			<x path="vscode.TextEditorSelectionChangeKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Selection changed because a command ran.</haxe_doc>
		</Command>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TextEditorSelectionChangeKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TextEditorViewColumnChangeEvent" params="" file="src/vscode/TextEditorViewColumnChangeEvent.hx">
		<a>
			<viewColumn set="null">
				<x path="vscode.ViewColumn"/>
				<haxe_doc>* The new value for the {@link TextEditor.viewColumn text editor's view column}.</haxe_doc>
			</viewColumn>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The {@link TextEditor text editor} for which the view column has changed.</haxe_doc>
			</textEditor>
		</a>
		<haxe_doc>* Represents an event describing the change of a {@link TextEditor.viewColumn text editor's view column}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextEditorVisibleRangesChangeEvent" params="" file="src/vscode/TextEditorVisibleRangesChangeEvent.hx">
		<a>
			<visibleRanges set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.Range"/></x>
				<haxe_doc>* The new value for the {@link TextEditor.visibleRanges text editor's visible ranges}.</haxe_doc>
			</visibleRanges>
			<textEditor set="null">
				<t path="vscode.TextEditor"/>
				<haxe_doc>* The {@link TextEditor text editor} for which the visible ranges have changed.</haxe_doc>
			</textEditor>
		</a>
		<haxe_doc>* Represents an event describing the change in a {@link TextEditor.visibleRanges text editor's visible ranges}.</haxe_doc>
	</typedef>
	<typedef path="vscode.TextLine" params="" file="src/vscode/TextLine.hx">
		<a>
			<text set="null">
				<c path="String"/>
				<haxe_doc>* The text of this line without the line separator characters.</haxe_doc>
			</text>
			<rangeIncludingLineBreak set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range this line covers with the line separator characters.</haxe_doc>
			</rangeIncludingLineBreak>
			<range set="null">
				<c path="vscode.Range"/>
				<haxe_doc>* The range this line covers without the line separator characters.</haxe_doc>
			</range>
			<lineNumber set="null">
				<x path="Int"/>
				<haxe_doc>* The zero-based line number.</haxe_doc>
			</lineNumber>
			<isEmptyOrWhitespace set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether this line is whitespace only, shorthand
	 * for {@link TextLine.firstNonWhitespaceCharacterIndex} === {@link TextLine.text TextLine.text.length}.</haxe_doc>
			</isEmptyOrWhitespace>
			<firstNonWhitespaceCharacterIndex set="null">
				<x path="Int"/>
				<haxe_doc>* The offset of the first character which is not a whitespace character as defined
	 * by `/\s/`. **Note** that if a line is all whitespace the length of the line is returned.</haxe_doc>
			</firstNonWhitespaceCharacterIndex>
		</a>
		<haxe_doc>* Represents a line of text, such as a line of source code.
 *
 * TextLine objects are __immutable__. When a {@link TextDocument document} changes,
 * previously retrieved lines will not represent the latest state.</haxe_doc>
	</typedef>
	<typedef path="vscode.ThemableDecorationAttachmentRenderOptions" params="" file="src/vscode/ThemableDecorationAttachmentRenderOptions.hx">
		<a>
			<width>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</width>
			<textDecoration>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</textDecoration>
			<margin>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</margin>
			<height>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</height>
			<fontWeight>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</fontWeight>
			<fontStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</fontStyle>
			<contentText>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines a text content that is shown in the attachment. Either an icon or a text can be shown, but not both.</haxe_doc>
			</contentText>
			<contentIconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the attachment. Either an icon
	 * or a text can be shown, but not both.</haxe_doc>
			</contentIconPath>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</color>
			<borderColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</borderColor>
			<border>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</border>
			<backgroundColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to the decoration attachment.</haxe_doc>
			</backgroundColor>
		</a>
		<haxe_doc>* Represents theme specific rendering styles for {@link ThemableDecorationRenderOptions.before before} and
 * {@link ThemableDecorationRenderOptions.after after} the content of text decorations.</haxe_doc>
	</typedef>
	<typedef path="vscode.ThemableDecorationInstanceRenderOptions" params="" file="src/vscode/ThemableDecorationInstanceRenderOptions.hx">
		<a>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents themable render options for decoration instances.</haxe_doc>
	</typedef>
	<typedef path="vscode.ThemableDecorationRenderOptions" params="" file="src/vscode/ThemableDecorationRenderOptions.hx">
		<a>
			<textDecoration>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</textDecoration>
			<overviewRulerColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The color of the decoration in the overview ruler. Use rgba() and define transparent colors to play well with other decorations.</haxe_doc>
			</overviewRulerColor>
			<outlineWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineWidth>
			<outlineStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineStyle>
			<outlineColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'outline' for setting one or more of the individual outline properties.</haxe_doc>
			</outlineColor>
			<outline>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</outline>
			<opacity>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</opacity>
			<letterSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</letterSpacing>
			<gutterIconSize>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Specifies the size of the gutter icon.
	 * Available values are 'auto', 'contain', 'cover' and any percentage value.
	 * For further information: https://msdn.microsoft.com/en-us/library/jj127316(v=vs.85).aspx</haxe_doc>
			</gutterIconSize>
			<gutterIconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.Uri"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An **absolute path** or an URI to an image to be rendered in the gutter.</haxe_doc>
			</gutterIconPath>
			<fontWeight>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontWeight>
			<fontStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</fontStyle>
			<cursor>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</cursor>
			<color>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</color>
			<borderWidth>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderWidth>
			<borderStyle>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderStyle>
			<borderSpacing>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderSpacing>
			<borderRadius>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderRadius>
			<borderColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.
	 * Better use 'border' for setting one or more of the individual border properties.</haxe_doc>
			</borderColor>
			<border>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* CSS styling property that will be applied to text enclosed by a decoration.</haxe_doc>
			</border>
			<before>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted before the decorated text.</haxe_doc>
			</before>
			<backgroundColor>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.ThemeColor"/>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Background color of the decoration. Use rgba() and define transparent background colors to play well with other decorations.
	 * Alternatively a color from the color registry can be {@link ThemeColor referenced}.</haxe_doc>
			</backgroundColor>
			<after>
				<x path="Null"><t path="vscode.ThemableDecorationAttachmentRenderOptions"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Defines the rendering options of the attachment that is inserted after the decorated text.</haxe_doc>
			</after>
		</a>
		<haxe_doc>* Represents theme specific rendering styles for a {@link TextEditorDecorationType text editor decoration}.</haxe_doc>
	</typedef>
	<class path="vscode.ThemeColor" params="" file="src/vscode/ThemeColor.hx" extern="1">
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The id of this color.</haxe_doc>
		</id>
		<new public="1" set="method">
			<f a="id">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a reference to a theme color.
	 * @param id of the color. The available colors are listed in https://code.visualstudio.com/api/references/theme-color.</haxe_doc>
		</new>
		<haxe_doc>* A reference to one of the workbench colors as defined in https://code.visualstudio.com/docs/getstarted/theme-color-reference.
 * Using a theme color is preferred over a custom color as it gives theme authors and users the possibility to change the color.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ThemeColor"</e>
</m></meta>
	</class>
	<class path="vscode.ThemeIcon" params="" file="src/vscode/ThemeIcon.hx" extern="1">
		<File public="1" set="null" static="1">
			<c path="vscode.ThemeIcon"/>
			<haxe_doc>* Reference to an icon representing a file. The icon is taken from the current file icon theme or a placeholder icon.</haxe_doc>
		</File>
		<Folder public="1" set="null" static="1">
			<c path="vscode.ThemeIcon"/>
			<haxe_doc>* Reference to an icon representing a folder. The icon is taken from the current file icon theme or a placeholder icon.</haxe_doc>
		</Folder>
		<id public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.</haxe_doc>
		</id>
		<color public="1" set="null">
			<x path="Null"><c path="vscode.ThemeColor"/></x>
			<haxe_doc>* The optional ThemeColor of the icon. The color is currently only used in {@link TreeItem}.</haxe_doc>
		</color>
		<new public="1" set="method">
			<f a="id:?color">
				<c path="String"/>
				<c path="vscode.ThemeColor"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a reference to a theme icon.
	 * @param id id id of the icon. The available icons are listed in https://code.visualstudio.com/api/references/icons-in-labels#icon-listing.
	 * @param color optional `ThemeColor` for the icon. The color is currently only used in {@link TreeItem}.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A reference to a named icon. Currently, {@link ThemeIcon.File File}, {@link ThemeIcon.Folder Folder},
 * and [ThemeIcon ids](https://code.visualstudio.com/api/references/icons-in-labels#icon-listing) are supported.
 * Using a theme icon is preferred over a custom icon as it gives product theme authors the possibility to change the icons.
 *
 * *Note* that theme icons can also be rendered inside labels and descriptions. Places that support theme icons spell this out
 * and they use the `$(<name>)`-syntax, for instance `quickPick.label = "Hello World $(globe)"`.]]></haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"ThemeIcon"</e>
</m></meta>
	</class>
	<typedef path="vscode.TreeCheckboxChangeEvent" params="T" file="src/vscode/TreeCheckboxChangeEvent.hx">
		<a><items set="null">
	<x path="haxe.ds.ReadOnlyArray"><x path="vscode.TreeCheckboxChangeEventItemsTuple"><c path="vscode.TreeCheckboxChangeEvent.T"/></x></x>
	<haxe_doc>* The items that were checked or unchecked.</haxe_doc>
</items></a>
		<haxe_doc>* An event describing the change in a tree item's checkbox state.</haxe_doc>
	</typedef>
	<abstract path="vscode.TreeCheckboxChangeEventItemsTuple" params="T" file="src/vscode/TreeCheckboxChangeEvent.hx" module="vscode.TreeCheckboxChangeEvent">
		<this><c path="Array"><d/></c></this>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._TreeCheckboxChangeEvent.TreeCheckboxChangeEventItemsTuple_Impl_" params="" file="src/vscode/TreeCheckboxChangeEvent.hx" private="1" module="vscode.TreeCheckboxChangeEvent" final="1">
	<t public="1" get="accessor" set="null" static="1"><c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/></t>
	<state public="1" get="accessor" set="null" static="1"><x path="vscode.TreeItemCheckboxState"/></state>
	<_new public="1" get="inline" set="null" line="18" static="1">
		<f a="t:state">
			<c path="String"/>
			<x path="vscode.FileType"/>
			<x path="vscode.TreeCheckboxChangeEventItemsTuple"><c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/></x>
		</f>
		<meta><m n=":noCompletion"/></meta>
	</_new>
	<get_t get="inline" set="null" line="23" static="1"><f a="this">
	<c path="Array"><d/></c>
	<c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/>
</f></get_t>
	<get_state get="inline" set="null" line="26" static="1"><f a="this">
	<c path="Array"><d/></c>
	<x path="vscode.TreeItemCheckboxState"/>
</f></get_state>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TreeCheckboxChangeEvent.TreeCheckboxChangeEventItemsTuple_Impl_" params="" file="src/vscode/TreeCheckboxChangeEvent.hx" private="1" module="vscode.TreeCheckboxChangeEvent" final="1">
		<t public="1" get="accessor" set="null" static="1"><c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/></t>
		<state public="1" get="accessor" set="null" static="1"><x path="vscode.TreeItemCheckboxState"/></state>
		<_new public="1" get="inline" set="null" line="18" static="1">
			<f a="t:state">
				<c path="String"/>
				<x path="vscode.FileType"/>
				<x path="vscode.TreeCheckboxChangeEventItemsTuple"><c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/></x>
			</f>
			<meta><m n=":noCompletion"/></meta>
		</_new>
		<get_t get="inline" set="null" line="23" static="1"><f a="this">
	<c path="Array"><d/></c>
	<c path="vscode.TreeCheckboxChangeEventItemsTuple.T"/>
</f></get_t>
		<get_state get="inline" set="null" line="26" static="1"><f a="this">
	<c path="Array"><d/></c>
	<x path="vscode.TreeItemCheckboxState"/>
</f></get_state>
		<meta>
			<m n=":keep"/>
			<m n=":dce"/>
			<m n=":dce"/>
		</meta>
	</class>
	<typedef path="vscode.TreeDataProvider" params="T" file="src/vscode/TreeDataProvider.hx">
		<a>
			<resolveTreeItem set="method">
				<f a="item:element:token">
					<c path="vscode.TreeItem"/>
					<c path="vscode.TreeDataProvider.T"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="vscode.TreeItem"/></t>
				</f>
				<haxe_doc>* Called on hover to resolve the {@link TreeItem.tooltip TreeItem} property if it is undefined.
	 * Called on tree item click/open to resolve the {@link TreeItem.command TreeItem} property if it is undefined.
	 * Only properties that were undefined can be resolved in `resolveTreeItem`.
	 * Functionality may be expanded later to include being called to resolve other missing
	 * properties on selection and/or on open.
	 *
	 * Will only ever be called once per TreeItem.
	 *
	 * onDidChangeTreeData should not be triggered from within resolveTreeItem.
	 *
	 * *Note* that this function is called when tree items are already showing in the UI.
	 * Because of that, no property that changes the presentation (label, description, etc.)
	 * can be changed.
	 *
	 * @param item Undefined properties of `item` should be set then `item` should be returned.
	 * @param element The object associated with the TreeItem.
	 * @param token A cancellation token.
	 * @returns The resolved tree item or a thenable that resolves to such. It is OK to return the given
	 * `item`. When no result is returned, the given `item` will be used.</haxe_doc>
			</resolveTreeItem>
			<onDidChangeTreeData>
				<x path="Null"><t path="vscode.Event"><x path="Null"><c path="vscode.TreeDataProvider.T"/></x></t></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional event to signal that an element or root has changed.
	 * This will trigger the view to update the changed element/root and its children recursively (if shown).
	 * To signal that root has changed, do not pass any argument or pass `undefined` or `null`.</haxe_doc>
			</onDidChangeTreeData>
			<getTreeItem set="method">
				<f a="element">
					<c path="vscode.TreeDataProvider.T"/>
					<x path="haxe.extern.EitherType">
						<c path="vscode.TreeItem"/>
						<x path="js.lib.Thenable"><c path="vscode.TreeItem"/></x>
					</x>
				</f>
				<haxe_doc>* Get {@link TreeItem} representation of the `element`
	 *
	 * @param element The element for which {@link TreeItem} representation is asked for.
	 * @returns TreeItem representation of the element.</haxe_doc>
			</getTreeItem>
			<getParent set="method">
				<f a="element">
					<c path="vscode.TreeDataProvider.T"/>
					<t path="vscode.ProviderResult"><c path="vscode.TreeDataProvider.T"/></t>
				</f>
				<haxe_doc>* Optional method to return the parent of `element`.
	 * Return `null` or `undefined` if `element` is a child of root.
	 *
	 * **NOTE:** This method should be implemented in order to access {@link TreeView.reveal reveal} API.
	 *
	 * @param element The element for which the parent has to be returned.
	 * @returns Parent of `element`.</haxe_doc>
			</getParent>
			<getChildren set="method">
				<f a="?element">
					<c path="vscode.TreeDataProvider.T"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TreeDataProvider.T"/></c></t>
				</f>
				<haxe_doc>* Get the children of `element` or root if no element is passed.
	 *
	 * @param element The element from which the provider gets children. Can be `undefined`.
	 * @returns Children of `element` or root if no element is passed.</haxe_doc>
			</getChildren>
		</a>
		<haxe_doc>* A data provider that provides tree data</haxe_doc>
	</typedef>
	<class path="vscode.TreeDragAndDropController" params="T" file="src/vscode/TreeDragAndDropController.hx" extern="1">
		<dropMimeTypes public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
			<haxe_doc><![CDATA[* The mime types that the {@link TreeDragAndDropController.handleDrop `handleDrop`} method of this `DragAndDropController` supports.
	 * This could be well-defined, existing, mime types, and also mime types defined by the extension.
	 *
	 * To support drops from trees, you will need to add the mime type of that tree.
	 * This includes drops from within the same tree.
	 * The mime type of a tree is recommended to be of the format `application/vnd.code.tree.<treeidlowercase>`.
	 *
	 * Use the special `files` mime type to support all types of dropped files {@link DataTransferFile files}, regardless of the file's actual mime type.
	 *
	 * To learn the mime type of a dragged item:
	 * 1. Set up your `DragAndDropController`
	 * 2. Use the Developer: Set Log Level... command to set the level to "Debug"
	 * 3. Open the developer tools and drag the item with unknown mime type over your tree. The mime types will be logged to the developer console
	 *
	 * Note that mime types that cannot be sent to the extension will be omitted.]]></haxe_doc>
		</dropMimeTypes>
		<dragMimeTypes public="1" set="null">
			<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
			<haxe_doc><![CDATA[* The mime types that the {@link TreeDragAndDropController.handleDrag `handleDrag`} method of this `TreeDragAndDropController` may add to the tree data transfer.
	 * This could be well-defined, existing, mime types, and also mime types defined by the extension.
	 *
	 * The recommended mime type of the tree (`application/vnd.code.tree.<treeidlowercase>`) will be automatically added.]]></haxe_doc>
		</dragMimeTypes>
		<handleDrag public="1" set="method">
			<f a="source:dataTransfer:token">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TreeDragAndDropController.T"/></x>
				<c path="vscode.DataTransfer"/>
				<t path="vscode.CancellationToken"/>
				<x path="Null"><x path="js.lib.Thenable"><x path="Void"/></x></x>
			</f>
			<haxe_doc><![CDATA[* When the user starts dragging items from this `DragAndDropController`, `handleDrag` will be called.
	 * Extensions can use `handleDrag` to add their {@link DataTransferItem `DataTransferItem`} items to the drag and drop.
	 *
	 * When the items are dropped on **another tree item** in **the same tree**, your `DataTransferItem` objects
	 * will be preserved. Use the recommended mime type for the tree (`application/vnd.code.tree.<treeidlowercase>`) to add
	 * tree objects in a data transfer. See the documentation for `DataTransferItem` for how best to take advantage of this.
	 *
	 * To add a data transfer item that can be dragged into the editor, use the application specific mime type "text/uri-list".
	 * The data for "text/uri-list" should be a string with `toString()`ed Uris separated by `\r\n`. To specify a cursor position in the file,
	 * set the Uri's fragment to `L3,5`, where 3 is the line number and 5 is the column number.
	 *
	 * @param source The source items for the drag and drop operation.
	 * @param dataTransfer The data transfer associated with this drag.
	 * @param token A cancellation token indicating that drag has been cancelled.]]></haxe_doc>
			<overloads><handleDrag public="1" set="method">
	<f a="target:dataTransfer:token">
		<x path="Null"><c path="vscode.TreeDragAndDropController.T"/></x>
		<c path="vscode.DataTransfer"/>
		<t path="vscode.CancellationToken"/>
		<x path="Null"><x path="js.lib.Thenable"><x path="Void"/></x></x>
	</f>
	<haxe_doc>* Called when a drag and drop action results in a drop on the tree that this `DragAndDropController` belongs to.
	 *
	 * Extensions should fire {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} for any elements that need to be refreshed.
	 *
	 * @param target The target tree element that the drop is occurring on. When undefined, the target is the root.
	 * @param dataTransfer The data transfer items of the source of the drag.
	 * @param token A cancellation token indicating that the drop has been cancelled.</haxe_doc>
</handleDrag></overloads>
		</handleDrag>
		<haxe_doc>* Provides support for drag and drop in `TreeView`.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TreeDragAndDropController"</e>
</m></meta>
	</class>
	<class path="vscode.TreeItem" params="" file="src/vscode/TreeItem.hx" extern="1">
		<label public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.TreeItemLabel"/>
</x></x>
			<haxe_doc>* A human-readable string describing this item. When `falsy`, it is derived from {@link TreeItem.resourceUri resourceUri}.</haxe_doc>
		</label>
		<id public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Optional id for the tree item that has to be unique across tree. The id is used to preserve the selection and expansion state of the tree item.
	 *
	 * If not provided, an id is generated using the tree item's label. **Note** that when labels change, ids will change and that selection and expansion state cannot be kept stable anymore.</haxe_doc>
		</id>
		<iconPath public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<t path="vscode.IconPath"/>
</x></x>
			<haxe_doc>* The icon path or {@link ThemeIcon} for the tree item.
	 * When `falsy`, {@link ThemeIcon.Folder Folder Theme Icon} is assigned, if item is collapsible otherwise {@link ThemeIcon.File File Theme Icon}.
	 * When a file or folder {@link ThemeIcon} is specified, icon is derived from the current file icon theme for the specified theme icon using {@link TreeItem.resourceUri resourceUri} (if provided).</haxe_doc>
		</iconPath>
		<description public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<x path="Bool"/>
</x></x>
			<haxe_doc>* A human-readable string which is rendered less prominent.
	 * When `true`, it is derived from {@link TreeItem.resourceUri resourceUri} and when `falsy`, it is not shown.</haxe_doc>
		</description>
		<resourceUri public="1">
			<x path="Null"><c path="vscode.Uri"/></x>
			<haxe_doc>* The {@link Uri} of the resource representing this item.
	 *
	 * Will be used to derive the {@link TreeItem.label label}, when it is not provided.
	 * Will be used to derive the icon from current file icon theme, when {@link TreeItem.iconPath iconPath} has {@link ThemeIcon} value.</haxe_doc>
		</resourceUri>
		<tooltip public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<c path="String"/>
	<c path="vscode.MarkdownString"/>
</x></x>
			<haxe_doc>* The tooltip text when you hover over this item.</haxe_doc>
		</tooltip>
		<command public="1">
			<x path="Null"><t path="vscode.Command"/></x>
			<haxe_doc>* The {@link Command} that should be executed when the tree item is selected.
	 *
	 * Please use `vscode.open` or `vscode.diff` as command IDs when the tree item is opening
	 * something in the editor. Using these commands ensures that the resulting editor will
	 * appear consistent with how other built-in trees open editors.</haxe_doc>
		</command>
		<collapsibleState public="1">
			<x path="Null"><x path="vscode.TreeItemCollapsibleState"/></x>
			<haxe_doc>* {@link TreeItemCollapsibleState} of the tree item.</haxe_doc>
		</collapsibleState>
		<contextValue public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* Context value of the tree item. This can be used to contribute item specific actions in the tree.
	 * For example, a tree item is given a context value as `folder`. When contributing actions to `view/item/context`
	 * using `menus` extension point, you can specify context value for key `viewItem` in `when` expression like `viewItem == folder`.
	 * ```json
	 * "contributes": {
	 *   "menus": {
	 *     "view/item/context": [
	 *       {
	 *         "command": "extension.deleteFolder",
	 *         "when": "viewItem == folder"
	 *       }
	 *     ]
	 *   }
	 * }
	 * ```
	 * This will show action `extension.deleteFolder` only for items with `contextValue` is `folder`.</haxe_doc>
		</contextValue>
		<accessibilityInformation public="1">
			<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
			<haxe_doc>* Accessibility information used when screen reader interacts with this tree item.
	 * Generally, a TreeItem has no need to set the `role` of the accessibilityInformation;
	 * however, there are cases where a TreeItem is not displayed in a tree-like way where setting the `role` may make sense.</haxe_doc>
		</accessibilityInformation>
		<checkboxState public="1">
			<x path="Null"><x path="haxe.extern.EitherType">
	<x path="vscode.TreeItemCheckboxState"/>
	<a>
		<tooltip>
			<x path="Null"><c path="String"/></x>
			<meta><m n=":optional"/></meta>
		</tooltip>
		<state><x path="vscode.TreeItemCheckboxState"/></state>
		<accessibilityInformation>
			<x path="Null"><t path="vscode.AccessibilityInformation"/></x>
			<meta><m n=":optional"/></meta>
		</accessibilityInformation>
	</a>
</x></x>
			<haxe_doc>* {@link TreeItemCheckboxState TreeItemCheckboxState} of the tree item.
	 * {@link TreeDataProvider.onDidChangeTreeData onDidChangeTreeData} should be fired when {@link TreeItem.checkboxState checkboxState} changes.</haxe_doc>
		</checkboxState>
		<new public="1" set="method">
			<f a="label:?collapsibleState">
				<x path="haxe.extern.EitherType">
					<c path="String"/>
					<t path="vscode.TreeItemLabel"/>
				</x>
				<x path="vscode.TreeItemCollapsibleState"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* @param label A human-readable string describing this item
	 * @param resourceUri The {@link Uri} of the resource representing this item.
	 * @param collapsibleState {@link TreeItemCollapsibleState} of the tree item. Default is {@link TreeItemCollapsibleState.None}</haxe_doc>
			<overloads><new public="1" set="method">
	<f a="resourceUri:?collapsibleState">
		<c path="vscode.Uri"/>
		<x path="vscode.TreeItemCollapsibleState"/>
		<x path="Void"/>
	</f>
	<haxe_doc>* @param label A human-readable string describing this item
	 * @param resourceUri The {@link Uri} of the resource representing this item.
	 * @param collapsibleState {@link TreeItemCollapsibleState} of the tree item. Default is {@link TreeItemCollapsibleState.None}</haxe_doc>
</new></overloads>
		</new>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TreeItem"</e>
</m></meta>
	</class>
	<abstract path="vscode.TreeItemCheckboxState" params="" file="src/vscode/TreeItemCheckboxState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Checkbox state of the tree item</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCheckboxState"</e>
			</m>
		</meta>
		<impl><class path="vscode._TreeItemCheckboxState.TreeItemCheckboxState_Impl_" params="" file="src/vscode/TreeItemCheckboxState.hx" private="1" module="vscode.TreeItemCheckboxState" extern="1" final="1">
	<Unchecked public="1" set="null" static="1">
		<x path="vscode.TreeItemCheckboxState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is unchecked</haxe_doc>
	</Unchecked>
	<Checked public="1" set="null" static="1">
		<x path="vscode.TreeItemCheckboxState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is checked</haxe_doc>
	</Checked>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TreeItemCheckboxState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TreeItemCheckboxState.TreeItemCheckboxState_Impl_" params="" file="src/vscode/TreeItemCheckboxState.hx" private="1" module="vscode.TreeItemCheckboxState" extern="1" final="1">
		<Unchecked public="1" set="null" static="1">
			<x path="vscode.TreeItemCheckboxState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is unchecked</haxe_doc>
		</Unchecked>
		<Checked public="1" set="null" static="1">
			<x path="vscode.TreeItemCheckboxState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is checked</haxe_doc>
		</Checked>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCheckboxState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<abstract path="vscode.TreeItemCollapsibleState" params="" file="src/vscode/TreeItemCollapsibleState.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Collapsible state of the tree item</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCollapsibleState"</e>
			</m>
		</meta>
		<impl><class path="vscode._TreeItemCollapsibleState.TreeItemCollapsibleState_Impl_" params="" file="src/vscode/TreeItemCollapsibleState.hx" private="1" module="vscode.TreeItemCollapsibleState" extern="1" final="1">
	<None public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item can be neither collapsed nor expanded. Implies it has no children.</haxe_doc>
	</None>
	<Collapsed public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is collapsed</haxe_doc>
	</Collapsed>
	<Expanded public="1" set="null" static="1">
		<x path="vscode.TreeItemCollapsibleState"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Determines an item is expanded</haxe_doc>
	</Expanded>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"TreeItemCollapsibleState"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._TreeItemCollapsibleState.TreeItemCollapsibleState_Impl_" params="" file="src/vscode/TreeItemCollapsibleState.hx" private="1" module="vscode.TreeItemCollapsibleState" extern="1" final="1">
		<None public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item can be neither collapsed nor expanded. Implies it has no children.</haxe_doc>
		</None>
		<Collapsed public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is collapsed</haxe_doc>
		</Collapsed>
		<Expanded public="1" set="null" static="1">
			<x path="vscode.TreeItemCollapsibleState"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Determines an item is expanded</haxe_doc>
		</Expanded>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"TreeItemCollapsibleState"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.TreeItemLabel" params="" file="src/vscode/TreeItemLabel.hx">
		<a>
			<label>
				<c path="String"/>
				<haxe_doc>* A human-readable string describing the {@link TreeItem Tree item}.</haxe_doc>
			</label>
			<highlights>
				<x path="Null"><c path="Array"><c path="Array"><x path="Int"/></c></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Ranges in the label to highlight. A range is defined as a tuple of two number where the
	 * first is the inclusive start index and the second the exclusive end index</haxe_doc>
			</highlights>
		</a>
		<haxe_doc>* Label describing the {@link TreeItem Tree item}</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeView" params="T" file="src/vscode/TreeView.hx">
		<a>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* `true` if the {@link TreeView tree view} is visible otherwise `false`.</haxe_doc>
			</visible>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The tree view title is initially taken from the extension package.json
	 * Changes to the title property will be properly reflected in the UI in the title of the view.</haxe_doc>
			</title>
			<selection set="null">
				<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TreeView.T"/></x>
				<haxe_doc>* Currently selected elements.</haxe_doc>
			</selection>
			<reveal set="method">
				<f a="element:?options">
					<c path="vscode.TreeView.T"/>
					<a>
						<select>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</select>
						<focus>
							<x path="Null"><x path="Bool"/></x>
							<meta><m n=":optional"/></meta>
						</focus>
						<exapnd>
							<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="Int"/>
</x></x>
							<meta><m n=":optional"/></meta>
						</exapnd>
					</a>
					<x path="js.lib.Thenable"><x path="Void"/></x>
				</f>
				<haxe_doc>* Reveals the given element in the tree view.
	 * If the tree view is not visible then the tree view is shown and element is revealed.
	 *
	 * By default revealed element is selected.
	 * In order to not to select, set the option `select` to `false`.
	 * In order to focus, set the option `focus` to `true`.
	 * In order to expand the revealed element, set the option `expand` to `true`. To expand recursively set `expand` to the number of levels to expand.
	 *
	 * * *NOTE:* You can expand only to 3 levels maximum.
	 * * *NOTE:* The {@link TreeDataProvider} that the `TreeView` {@link window.createTreeView is registered with} with must implement {@link TreeDataProvider.getParent getParent} method to access this API.</haxe_doc>
			</reveal>
			<onDidExpandElement set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewExpansionEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when an element is expanded</haxe_doc>
			</onDidExpandElement>
			<onDidCollapseElement set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewExpansionEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when an element is collapsed</haxe_doc>
			</onDidCollapseElement>
			<onDidChangeVisibility set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewVisibilityChangeEvent"/></t>
				<haxe_doc>* Event that is fired when {@link TreeView.visible visibility} has changed</haxe_doc>
			</onDidChangeVisibility>
			<onDidChangeSelection set="null">
				<t path="vscode.Event"><t path="vscode.TreeViewSelectionChangeEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* Event that is fired when the {@link TreeView.selection selection} has changed</haxe_doc>
			</onDidChangeSelection>
			<onDidChangeCheckboxState set="null">
				<t path="vscode.Event"><t path="vscode.TreeCheckboxChangeEvent"><c path="vscode.TreeView.T"/></t></t>
				<haxe_doc>* An event to signal that an element or root has either been checked or unchecked.</haxe_doc>
			</onDidChangeCheckboxState>
			<message>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional human-readable message that will be rendered in the view.
	 * Setting the message to null, undefined, or empty string will remove the message from the view.</haxe_doc>
			</message>
			<dispose set="method">
				<f a=""><x path="Void"/></f>
				<haxe_doc>* Dispose this object.</haxe_doc>
			</dispose>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional human-readable description which is rendered less prominently in the title of the view.
	 * Setting the title description to null, undefined, or empty string will remove the description from the view.</haxe_doc>
			</description>
			<badge>
				<x path="Null"><t path="vscode.ViewBadge"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The badge to display for this TreeView.
	 * To remove the badge, set to undefined.</haxe_doc>
			</badge>
		</a>
		<haxe_doc>* Represents a Tree view</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewExpansionEvent" params="T" file="src/vscode/TreeViewExpansionEvent.hx">
		<a><element set="null">
	<c path="vscode.TreeViewExpansionEvent.T"/>
	<haxe_doc>* Element that is expanded or collapsed.</haxe_doc>
</element></a>
		<haxe_doc>* The event that is fired when an element in the {@link TreeView} is expanded or collapsed</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewOptions" params="T" file="src/vscode/TreeViewOptions.hx">
		<a>
			<treeDataProvider>
				<t path="vscode.TreeDataProvider"><c path="vscode.TreeViewOptions.T"/></t>
				<haxe_doc>* A data provider that provides tree data.</haxe_doc>
			</treeDataProvider>
			<showCollapseAll>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether to show collapse all action or not.</haxe_doc>
			</showCollapseAll>
			<manageCheckboxStateManually>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* By default, when the children of a tree item have already been fetched, child checkboxes are automatically managed based on the checked state of the parent tree item.
	 * If the tree item is collapsed by default (meaning that the children haven't yet been fetched) then child checkboxes will not be updated.
	 * To override this behavior and manage child and parent checkbox state in the extension, set this to `true`.
	 *
	 * Examples where {@link TreeViewOptions.manageCheckboxStateManually} is false, the default behavior:
	 *
	 * 1. A tree item is checked, then its children are fetched. The children will be checked.
	 *
	 * 2. A tree item's parent is checked. The tree item and all of it's siblings will be checked.
	 *   - [ ] Parent
	 *     - [ ] Child 1
	 *     - [ ] Child 2
	 *   When the user checks Parent, the tree will look like this:
	 *   - [x] Parent
	 *     - [x] Child 1
	 *     - [x] Child 2
	 *
	 * 3. A tree item and all of it's siblings are checked. The parent will be checked.
	 *   - [ ] Parent
	 *     - [ ] Child 1
	 *     - [ ] Child 2
	 *   When the user checks Child 1 and Child 2, the tree will look like this:
	 *   - [x] Parent
	 *     - [x] Child 1
	 *     - [x] Child 2
	 *
	 * 4. A tree item is unchecked. The parent will be unchecked.
	 *   - [x] Parent
	 *     - [x] Child 1
	 *     - [x] Child 2
	 *   When the user unchecks Child 1, the tree will look like this:
	 *   - [ ] Parent
	 *     - [ ] Child 1
	 *     - [x] Child 2</haxe_doc>
			</manageCheckboxStateManually>
			<dragAndDropController>
				<x path="Null"><c path="vscode.TreeDragAndDropController"><c path="vscode.TreeViewOptions.T"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional interface to implement drag and drop in the tree view.</haxe_doc>
			</dragAndDropController>
			<canSelectMany>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Whether the tree supports multi-select. When the tree supports multi-select and a command is executed from the tree,
	 * the first argument to the command is the tree item that the command was executed on and the second argument is an
	 * array containing all selected tree items.</haxe_doc>
			</canSelectMany>
		</a>
		<haxe_doc>* Options for creating a {@link TreeView}</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewSelectionChangeEvent" params="T" file="src/vscode/TreeViewSelectionChangeEvent.hx">
		<a><selection set="null">
	<x path="haxe.ds.ReadOnlyArray"><c path="vscode.TreeViewSelectionChangeEvent.T"/></x>
	<haxe_doc>* Selected elements.</haxe_doc>
</selection></a>
		<haxe_doc>* The event that is fired when there is a change in {@link TreeView.selection tree view's selection}</haxe_doc>
	</typedef>
	<typedef path="vscode.TreeViewVisibilityChangeEvent" params="" file="src/vscode/TreeViewVisibilityChangeEvent.hx">
		<a><visible set="null">
	<x path="Bool"/>
	<haxe_doc>* `true` if the {@link TreeView tree view} is visible otherwise `false`.</haxe_doc>
</visible></a>
		<haxe_doc>* The event that is fired when there is a change in {@link TreeView.visible tree view's visibility}</haxe_doc>
	</typedef>
	<typedef path="vscode.TypeDefinitionProvider" params="" file="src/vscode/TypeDefinitionProvider.hx">
		<a><provideTypeDefinition set="method">
	<f a="document:position:token">
		<c path="vscode.TextDocument"/>
		<c path="vscode.Position"/>
		<t path="vscode.CancellationToken"/>
		<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<t path="vscode.Definition"/>
	<c path="Array"><t path="vscode.DefinitionLink"/></c>
</x></t>
	</f>
	<haxe_doc>* Provide the type definition of the symbol at the given position and document.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns A definition or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
</provideTypeDefinition></a>
		<haxe_doc>* The type definition provider defines the contract between extensions and
 * the go to type definition feature.</haxe_doc>
	</typedef>
	<class path="vscode.TypeHierarchyItem" params="" file="src/vscode/TypeHierarchyItem.hx" extern="1">
		<name public="1">
			<c path="String"/>
			<haxe_doc>* The name of this item.</haxe_doc>
		</name>
		<kind public="1">
			<x path="vscode.SymbolKind"/>
			<haxe_doc>* The kind of this item.</haxe_doc>
		</kind>
		<tags public="1">
			<x path="Null"><x path="haxe.ds.ReadOnlyArray"><x path="vscode.SymbolTag"/></x></x>
			<haxe_doc>* Tags for this item.</haxe_doc>
		</tags>
		<detail public="1">
			<x path="Null"><c path="String"/></x>
			<haxe_doc>* More detail for this item, e.g. the signature of a function.</haxe_doc>
		</detail>
		<uri public="1">
			<c path="vscode.Uri"/>
			<haxe_doc>* The resource identifier of this item.</haxe_doc>
		</uri>
		<range public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range enclosing this symbol not including leading/trailing whitespace
	 * but everything else, e.g. comments and code.</haxe_doc>
		</range>
		<selectionRange public="1">
			<c path="vscode.Range"/>
			<haxe_doc>* The range that should be selected and revealed when this symbol is being
	 * picked, e.g. the name of a class. Must be contained by the {@link TypeHierarchyItem.range range}-property.</haxe_doc>
		</selectionRange>
		<new public="1" set="method">
			<f a="kind:name:detail:uri:range:selectionRange">
				<x path="vscode.SymbolKind"/>
				<c path="String"/>
				<c path="String"/>
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<c path="vscode.Range"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Creates a new type hierarchy item.
	 *
	 * @param kind The kind of the item.
	 * @param name The name of the item.
	 * @param detail The details of the item.
	 * @param uri The Uri of the item.
	 * @param range The whole range of the item.
	 * @param selectionRange The selection range of the item.</haxe_doc>
		</new>
		<haxe_doc>* Represents an item of a type hierarchy, like a class or an interface.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"TypeHierarchyItem"</e>
</m></meta>
	</class>
	<typedef path="vscode.TypeHierarchyProvider" params="" file="src/vscode/TypeHierarchyProvider.hx">
		<a>
			<provideTypeHierarchySupertypes set="method">
				<f a="item:token">
					<c path="vscode.TypeHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TypeHierarchyItem"/></c></t>
				</f>
				<haxe_doc>* Provide all supertypes for an item, e.g all types from which a type is derived/inherited. In graph terms this describes directed
	 * and annotated edges inside the type graph, e.g the given item is the starting node and the result is the nodes
	 * that can be reached.
	 *
	 * @param item The hierarchy item for which super types should be computed.
	 * @param token A cancellation token.
	 * @returns A set of direct supertypes or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideTypeHierarchySupertypes>
			<provideTypeHierarchySubtypes set="method">
				<f a="item:token">
					<c path="vscode.TypeHierarchyItem"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.TypeHierarchyItem"/></c></t>
				</f>
				<haxe_doc>* Provide all subtypes for an item, e.g all types which are derived/inherited from the given item. In
	 * graph terms this describes directed and annotated edges inside the type graph, e.g the given item is the starting
	 * node and the result is the nodes that can be reached.
	 *
	 * @param item The hierarchy item for which subtypes should be computed.
	 * @param token A cancellation token.
	 * @returns A set of direct subtypes or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined` or `null`.</haxe_doc>
			</provideTypeHierarchySubtypes>
			<prepareTypeHierarchy set="method">
				<f a="document:position:token">
					<c path="vscode.TextDocument"/>
					<c path="vscode.Position"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><x path="haxe.extern.EitherType">
	<c path="vscode.TypeHierarchyItem"/>
	<c path="Array"><c path="vscode.TypeHierarchyItem"/></c>
</x></t>
				</f>
				<haxe_doc>* Bootstraps type hierarchy by returning the item that is denoted by the given document
	 * and position. This item will be used as entry into the type graph. Providers should
	 * return `undefined` or `null` when there is no item at the given location.
	 *
	 * @param document The document in which the command was invoked.
	 * @param position The position at which the command was invoked.
	 * @param token A cancellation token.
	 * @returns One or multiple type hierarchy items or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</prepareTypeHierarchy>
		</a>
		<haxe_doc>* The type hierarchy provider interface describes the contract between extensions
 * and the type hierarchy feature.</haxe_doc>
	</typedef>
	<abstract path="vscode.UIKind" params="" file="src/vscode/UIKind.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Possible kinds of UI that can use extensions.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"UIKind"</e>
			</m>
		</meta>
		<impl><class path="vscode._UIKind.UIKind_Impl_" params="" file="src/vscode/UIKind.hx" private="1" module="vscode.UIKind" extern="1" final="1">
	<Desktop public="1" set="null" static="1">
		<x path="vscode.UIKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Extensions are accessed from a desktop application.</haxe_doc>
	</Desktop>
	<Web public="1" set="null" static="1">
		<x path="vscode.UIKind"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* Extensions are accessed from a web browser.</haxe_doc>
	</Web>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"UIKind"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._UIKind.UIKind_Impl_" params="" file="src/vscode/UIKind.hx" private="1" module="vscode.UIKind" extern="1" final="1">
		<Desktop public="1" set="null" static="1">
			<x path="vscode.UIKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Extensions are accessed from a desktop application.</haxe_doc>
		</Desktop>
		<Web public="1" set="null" static="1">
			<x path="vscode.UIKind"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* Extensions are accessed from a web browser.</haxe_doc>
		</Web>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"UIKind"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<class path="vscode.Uri" params="" file="src/vscode/Uri.hx" extern="1">
		<parse public="1" set="method" static="1">
			<f a="value:?strict">
				<c path="String"/>
				<x path="Bool"/>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create an URI from a string, e.g. `http://www.example.com/some/path`,
	 * `file:///usr/home`, or `scheme:with/path`.
	 *
	 * *Note* that for a while uris without a `scheme` were accepted. That is not correct
	 * as all uris should have a scheme. To avoid breakage of existing code the optional
	 * `strict`-argument has been added. We *strongly* advise to use it, e.g. `Uri.parse('my:uri', true)`
	 *
	 * @see {@link Uri.toString}
	 * @param value The string value of an Uri.
	 * @param strict Throw an error when `value` is empty or when no `scheme` can be parsed.
	 * @returns A new Uri instance.</haxe_doc>
		</parse>
		<file public="1" set="method" static="1">
			<f a="path">
				<c path="String"/>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create an URI from a file system path. The {@link Uri.scheme scheme}
	 * will be `file`.
	 *
	 * The *difference* between {@link Uri.parse} and {@link Uri.file} is that the latter treats the argument
	 * as path, not as stringified-uri. E.g. `Uri.file(path)` is *not* the same as
	 * `Uri.parse('file://' + path)` because the path might contain characters that are
	 * interpreted (# and ?). See the following sample:
	 * ```ts
	 * const good = URI.file('/coding/c#/project1');
	 * good.scheme === 'file';
	 * good.path === '/coding/c#/project1';
	 * good.fragment === '';
	 *
	 * const bad = URI.parse('file://' + '/coding/c#/project1');
	 * bad.scheme === 'file';
	 * bad.path === '/coding/c'; // path is now broken
	 * bad.fragment === '/project1';
	 * ```
	 *
	 * @param path A file system or UNC path.
	 * @returns A new Uri instance.</haxe_doc>
		</file>
		<joinPath public="1" set="method" static="1">
			<f a="base:pathSegments">
				<c path="vscode.Uri"/>
				<t path="haxe.extern.Rest"><c path="String"/></t>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create a new uri which path is the result of joining
	 * the path of the base uri with the provided path segments.
	 *
	 * - Note 1: `joinPath` only affects the path component
	 * and all other components (scheme, authority, query, and fragment) are
	 * left as they are.
	 * - Note 2: The base uri must have a path; an error is thrown otherwise.
	 *
	 * The path segments are normalized in the following ways:
	 * - sequences of path separators (`/` or `\`) are replaced with a single separator
	 * - for `file`-uris on windows, the backslash-character (`\`) is considered a path-separator
	 * - the `..`-segment denotes the parent segment, the `.` denotes the current segment
	 * - paths have a root which always remains, for instance on windows drive-letters are roots
	 * so that is true: `joinPath(Uri.file('file:///c:/root'), '../../other').fsPath === 'c:/other'`
	 *
	 * @param base An uri. Must have a path.
	 * @param pathSegments One more more path fragments
	 * @returns A new uri which path is joined with the given fragments</haxe_doc>
		</joinPath>
		<from public="1" set="method" static="1">
			<f a="components">
				<a>
					<scheme><c path="String"/></scheme>
					<query>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</query>
					<path>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</path>
					<fragment>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</fragment>
					<authority>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</authority>
				</a>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Create an URI from its component parts
	 *
	 * @see {@link Uri.toString}
	 * @param components The component parts of an Uri.
	 * @returns A new Uri instance.</haxe_doc>
		</from>
		<scheme public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Scheme is the `http` part of `http://www.example.com/some/path?query#fragment`.
	 * The part before the first colon.</haxe_doc>
		</scheme>
		<authority public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Authority is the `www.example.com` part of `http://www.example.com/some/path?query#fragment`.
	 * The part between the first double slashes and the next slash.</haxe_doc>
		</authority>
		<path public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Path is the `/some/path` part of `http://www.example.com/some/path?query#fragment`.</haxe_doc>
		</path>
		<query public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Query is the `query` part of `http://www.example.com/some/path?query#fragment`.</haxe_doc>
		</query>
		<fragment public="1" set="null">
			<c path="String"/>
			<haxe_doc>* Fragment is the `fragment` part of `http://www.example.com/some/path?query#fragment`.</haxe_doc>
		</fragment>
		<fsPath public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The string representing the corresponding file system path of this Uri.
	 *
	 * Will handle UNC paths and normalize windows drive letters to lower-case. Also
	 * uses the platform specific path separator.
	 *
	 * * Will *not* validate the path for invalid characters and semantics.
	 * * Will *not* look at the scheme of this Uri.
	 * * The resulting string shall *not* be used for display purposes but
	 * for disk operations, like `readFile` et al.
	 *
	 * The *difference* to the {@linkcode Uri.path path}-property is the use of the platform specific
	 * path separator and the handling of UNC paths. The sample below outlines the difference:
	 * ```ts
	 * const u = URI.parse('file://server/c$/folder/file.txt')
	 * u.authority === 'server'
	 * u.path === '/c$/folder/file.txt'
	 * u.fsPath === '\\server\c$\folder\file.txt'
	 * ```</haxe_doc>
		</fsPath>
		<with public="1" set="method">
			<f a="change">
				<a>
					<scheme>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</scheme>
					<query>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</query>
					<path>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</path>
					<fragment>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</fragment>
					<authority>
						<x path="Null"><c path="String"/></x>
						<meta><m n=":optional"/></meta>
					</authority>
				</a>
				<c path="vscode.Uri"/>
			</f>
			<haxe_doc>* Derive a new Uri from this Uri.
	 *
	 * ```haxe
	 * var file = Uri.parse('before:some/file/path');
	 * var other = file.with({scheme: 'after'});
	 * Assert.ok(other.toString() == 'after:some/file/path');
	 * ```
	 *
	 * @param change An object that describes a change to this Uri. To unset components use `null` or
	 *  the empty string.
	 * @returns A new Uri that reflects the given change. Will return `this` Uri if the change
	 *  is not changing anything.</haxe_doc>
		</with>
		<toString public="1" set="method">
			<f a="?skipEncoding">
				<x path="Bool"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Returns a string representation of this Uri. The representation and normalization
	 * of a URI depends on the scheme.
	 *
	 * * The resulting string can be safely used with {@link Uri.parse}.
	 * * The resulting string shall *not* be used for display purposes.
	 *
	 * *Note* that the implementation will encode _aggressive_ which often leads to unexpected,
	 * but not incorrect, results. For instance, colons are encoded to `%3A` which might be unexpected
	 * in file-uri. Also `&` and `=` will be encoded which might be unexpected for http-uris. For stability
	 * reasons this cannot be changed anymore. If you suffer from too aggressive encoding you should use
	 * the `skipEncoding`-argument: `uri.toString(true)`.
	 *
	 * @param skipEncoding Do not percentage-encode the result, defaults to `false`. Note that
	 *	the `#` and `?` characters occurring in the path will always be encoded.
	 * @returns A string representation of this Uri.]]></haxe_doc>
		</toString>
		<toJSON public="1" set="method">
			<f a=""><x path="Any"/></f>
			<haxe_doc>* Returns a JSON representation of this Uri.
	 *
	 * @returns An object.</haxe_doc>
		</toJSON>
		<new set="method">
			<f a="scheme:authority:path:query:fragment">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>* Use the `file` and `parse` factory functions to create new `Uri` objects.</haxe_doc>
		</new>
		<haxe_doc>* A universal resource identifier representing either a file on disk
 * or another resource, like untitled resources.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"Uri"</e>
</m></meta>
	</class>
	<typedef path="vscode.UriHandler" params="" file="src/vscode/UriHandler.hx">
		<a><handleUri set="method">
	<f a="uri">
		<c path="vscode.Uri"/>
		<t path="vscode.ProviderResult"><x path="Void"/></t>
	</f>
	<haxe_doc>* Handle the provided system-wide {@link Uri}.
	 *
	 * @see {@link window.registerUriHandler}.</haxe_doc>
</handleUri></a>
		<haxe_doc>* A uri handler is responsible for handling system-wide {@link Uri uris}.
 *
 * @see {@link window.registerUriHandler}.</haxe_doc>
	</typedef>
	<typedef path="vscode.ViewBadge" params="" file="src/vscode/ViewBadge.hx">
		<a>
			<value set="null">
				<x path="Int"/>
				<haxe_doc>* The value to present in the badge.</haxe_doc>
			</value>
			<tooltip set="null">
				<c path="String"/>
				<haxe_doc>* A label to present in tooltip for the badge.</haxe_doc>
			</tooltip>
		</a>
		<haxe_doc>* A badge presenting a value for a view</haxe_doc>
	</typedef>
	<abstract path="vscode.ViewColumn" params="" file="src/vscode/ViewColumn.hx">
		<this><x path="Int"/></this>
		<haxe_doc>* Denotes a location of an editor in the window. Editors can be arranged in a grid
 * and each column represents one editor location in that grid by counting the editors
 * in order of their appearance.</haxe_doc>
		<meta>
			<m n=":enum"/>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ViewColumn"</e>
			</m>
		</meta>
		<impl><class path="vscode._ViewColumn.ViewColumn_Impl_" params="" file="src/vscode/ViewColumn.hx" private="1" module="vscode.ViewColumn" extern="1" final="1">
	<Active public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A *symbolic* editor column representing the currently active column. This value
	 * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.</haxe_doc>
	</Active>
	<Beside public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* A *symbolic* editor column representing the column to the side of the active one. This value
	 * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.</haxe_doc>
	</Beside>
	<One public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The first editor column.</haxe_doc>
	</One>
	<Two public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The second editor column.</haxe_doc>
	</Two>
	<Three public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The third editor column.</haxe_doc>
	</Three>
	<Four public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The fourth editor column.</haxe_doc>
	</Four>
	<Five public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The fifth editor column.</haxe_doc>
	</Five>
	<Six public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The sixth editor column.</haxe_doc>
	</Six>
	<Seven public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The seventh editor column.</haxe_doc>
	</Seven>
	<Eight public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The eighth editor column.</haxe_doc>
	</Eight>
	<Nine public="1" set="null" static="1">
		<x path="vscode.ViewColumn"/>
		<meta><m n=":enum"/></meta>
		<haxe_doc>* The ninth editor column.</haxe_doc>
	</Nine>
	<meta>
		<m n=":jsRequire">
			<e>"vscode"</e>
			<e>"ViewColumn"</e>
		</m>
		<m n=":enum"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._ViewColumn.ViewColumn_Impl_" params="" file="src/vscode/ViewColumn.hx" private="1" module="vscode.ViewColumn" extern="1" final="1">
		<Active public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A *symbolic* editor column representing the currently active column. This value
	 * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Active`.</haxe_doc>
		</Active>
		<Beside public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* A *symbolic* editor column representing the column to the side of the active one. This value
	 * can be used when opening editors, but the *resolved* {@link TextEditor.viewColumn viewColumn}-value
	 * of editors will always be `One`, `Two`, `Three`,... or `undefined` but never `Beside`.</haxe_doc>
		</Beside>
		<One public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The first editor column.</haxe_doc>
		</One>
		<Two public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The second editor column.</haxe_doc>
		</Two>
		<Three public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The third editor column.</haxe_doc>
		</Three>
		<Four public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The fourth editor column.</haxe_doc>
		</Four>
		<Five public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The fifth editor column.</haxe_doc>
		</Five>
		<Six public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The sixth editor column.</haxe_doc>
		</Six>
		<Seven public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The seventh editor column.</haxe_doc>
		</Seven>
		<Eight public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The eighth editor column.</haxe_doc>
		</Eight>
		<Nine public="1" set="null" static="1">
			<x path="vscode.ViewColumn"/>
			<meta><m n=":enum"/></meta>
			<haxe_doc>* The ninth editor column.</haxe_doc>
		</Nine>
		<meta>
			<m n=":jsRequire">
				<e>"vscode"</e>
				<e>"ViewColumn"</e>
			</m>
			<m n=":enum"/>
		</meta>
	</class>
	<typedef path="vscode.Webview" params="" file="src/vscode/Webview.hx">
		<a>
			<postMessage set="method">
				<f a="message">
					<x path="Any"/>
					<x path="js.lib.Thenable"><x path="Bool"/></x>
				</f>
				<haxe_doc>* Post a message to the webview content.
	 *
	 * Messages are only delivered if the webview is live (either visible or in the
	 * background with `retainContextWhenHidden`).
	 *
	 * @param message Body of the message. This must be a string or other json serializable object.
	 *
	 *   For older versions of vscode, if an `ArrayBuffer` is included in `message`,
	 *   it will not be serialized properly and will not be received by the webview.
	 *   Similarly any TypedArrays, such as a `Uint8Array`, will be very inefficiently
	 *   serialized and will also not be recreated as a typed array inside the webview.
	 *
	 *   However if your extension targets vscode 1.57+ in the `engines` field of its
	 *   `package.json`, any `ArrayBuffer` values that appear in `message` will be more
	 *   efficiently transferred to the webview and will also be correctly recreated inside
	 *   of the webview.
	 *
	 * @returns A promise that resolves when the message is posted to a webview or when it is
	 * dropped because the message was not deliverable.
	 *
	 *   Returns `true` if the message was posted to the webview. Messages can only be posted to
	 * live webviews (i.e. either visible webviews or hidden webviews that set `retainContextWhenHidden`).
	 *
	 *   A response of `true` does not mean that the message was actually received by the webview.
	 *   For example, no message listeners may be have been hooked up inside the webview or the webview may
	 *   have been destroyed after the message was posted but before it was received.
	 *
	 *   If you want confirm that a message as actually received, you can try having your webview posting a
	 *   confirmation message back to your extension.</haxe_doc>
			</postMessage>
			<options>
				<t path="vscode.WebviewOptions"/>
				<haxe_doc>* Content settings for the webview.</haxe_doc>
			</options>
			<onDidReceiveMessage set="null">
				<t path="vscode.Event"><x path="Any"/></t>
				<haxe_doc>* Fired when the webview content posts a message.
	 *
	 * Webview content can post strings or json serializable objects back to an extension. They cannot
	 * post `Blob`, `File`, `ImageData` and other DOM specific objects since the extension that receives the
	 * message does not run in a browser environment.</haxe_doc>
			</onDidReceiveMessage>
			<html>
				<c path="String"/>
				<haxe_doc><![CDATA[* HTML contents of the webview.
	 *
	 * This should be a complete, valid html document. Changing this property causes the webview to be reloaded.
	 *
	 * Webviews are sandboxed from normal extension process, so all communication with the webview must use
	 * message passing. To send a message from the extension to the webview, use {@linkcode Webview.postMessage postMessage}.
	 * To send message from the webview back to an extension, use the `acquireVsCodeApi` function inside the webview
	 * to get a handle to the editor's api and then call `.postMessage()`:
	 *
	 * ```html
	 * <script>
	 *     const vscode = acquireVsCodeApi(); // acquireVsCodeApi can only be invoked once
	 *     vscode.postMessage({ message: 'hello!' });
	 * </script>
	 * ```
	 *
	 * To load a resources from the workspace inside a webview, use the {@linkcode Webview.asWebviewUri asWebviewUri} method
	 * and ensure the resource's directory is listed in {@linkcode WebviewOptions.localResourceRoots}.
	 *
	 * Keep in mind that even though webviews are sandboxed, they still allow running scripts and loading arbitrary content,
	 * so extensions must follow all standard web security best practices when working with webviews. This includes
	 * properly sanitizing all untrusted input (including content from the workspace) and
	 * setting a [content security policy](https://aka.ms/vscode-api-webview-csp).]]></haxe_doc>
			</html>
			<cspSource set="null">
				<c path="String"/>
				<haxe_doc>* Content security policy source for webview resources.
	 *
	 * This is the origin that should be used in a content security policy rule:
	 *
	 * ```ts
	 * `img-src https: ${webview.cspSource} ...;`
	 * ```</haxe_doc>
			</cspSource>
			<asWebviewUri set="method">
				<f a="localResource">
					<c path="vscode.Uri"/>
					<c path="vscode.Uri"/>
				</f>
				<haxe_doc><![CDATA[* Convert a uri for the local file system to one that can be used inside webviews.
	 *
	 * Webviews cannot directly load resources from the workspace or local file system using `file:` uris. The
	 * `asWebviewUri` function takes a local `file:` uri and converts it into a uri that can be used inside of
	 * a webview to load the same resource:
	 *
	 * ```ts
	 * webview.html = `<img src="${webview.asWebviewUri(vscode.Uri.file('/Users/codey/workspace/cat.gif'))}">`
	 * ```]]></haxe_doc>
			</asWebviewUri>
		</a>
		<haxe_doc>* Displays html content, similarly to an iframe.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewOptions" params="" file="src/vscode/WebviewOptions.hx">
		<a>
			<portMapping set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><t path="vscode.WebviewPortMapping"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Mappings of localhost ports used inside the webview.
	 *
	 * Port mapping allow webviews to transparently define how localhost ports are resolved. This can be used
	 * to allow using a static localhost port inside the webview that is resolved to random port that a service is
	 * running on.
	 *
	 * If a webview accesses localhost content, we recommend that you specify port mappings even if
	 * the `webviewPort` and `extensionHostPort` ports are the same.
	 *
	 * *Note* that port mappings only work for `http` or `https` urls. Websocket urls (e.g. `ws://localhost:3000`)
	 * cannot be mapped to another port.</haxe_doc>
			</portMapping>
			<localResourceRoots set="null">
				<x path="Null"><x path="haxe.ds.ReadOnlyArray"><c path="vscode.Uri"/></x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Root paths from which the webview can load local (filesystem) resources using the `vscode-resource:` scheme.
	 *
	 * Default to the root folders of the current workspace plus the extension's install directory.
	 *
	 * Pass in an empty array to disallow access to any local resources.</haxe_doc>
			</localResourceRoots>
			<enableScripts set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether scripts are enabled in the webview content or not.
	 *
	 * Defaults to false (scripts-disabled).</haxe_doc>
			</enableScripts>
			<enableForms set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether forms are enabled in the webview content or not.
	 *
	 * Defaults to true if {@link WebviewOptions.enableScripts scripts are enabled}. Otherwise defaults to false.
	 * Explicitly setting this property to either true or false overrides the default.</haxe_doc>
			</enableForms>
			<enableCommandUris set="null">
				<x path="Null"><x path="haxe.extern.EitherType">
	<x path="Bool"/>
	<x path="haxe.ds.ReadOnlyArray"><c path="String"/></x>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls whether command uris are enabled in webview content or not.
	 *
	 * Defaults to `false` (command uris are disabled).
	 *
	 * If you pass in an array, only the commands in the array are allowed.</haxe_doc>
			</enableCommandUris>
		</a>
		<haxe_doc>* Content settings for a webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanel" params="" file="src/vscode/WebviewPanel.hx">
		<a>
			<webview set="null">
				<t path="vscode.Webview"/>
				<haxe_doc>* {@linkcode Webview} belonging to the panel.</haxe_doc>
			</webview>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the panel is visible.</haxe_doc>
			</visible>
			<viewType set="null">
				<c path="String"/>
				<haxe_doc>* Identifies the type of the webview panel, such as `'markdown.preview'`.</haxe_doc>
			</viewType>
			<viewColumn set="null">
				<x path="Null"><x path="vscode.ViewColumn"/></x>
				<haxe_doc>* Editor position of the panel. This property is only set if the webview is in
	 * one of the editor view columns.</haxe_doc>
			</viewColumn>
			<title>
				<c path="String"/>
				<haxe_doc>* Title of the panel shown in UI.</haxe_doc>
			</title>
			<reveal set="method">
				<f a="?viewColumn:?preserveFocus">
					<x path="vscode.ViewColumn"/>
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Show the webview panel in a given column.
	 *
	 * A webview panel may only show in a single column at a time. If it is already showing, this
	 * method moves it to a new column.
	 *
	 * @param viewColumn View column to show the panel in. Shows in the current `viewColumn` if undefined.
	 * @param preserveFocus When `true`, the webview will not take focus.</haxe_doc>
			</reveal>
			<options set="null">
				<t path="vscode.WebviewPanelOptions"/>
				<haxe_doc>* Content settings for the webview panel.</haxe_doc>
			</options>
			<onDidDispose set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Fired when the panel is disposed.
	 *
	 * This may be because the user closed the panel or because `.dispose()` was
	 * called on it.
	 *
	 * Trying to use the panel after it has been disposed throws an exception.</haxe_doc>
			</onDidDispose>
			<onDidChangeViewState set="null">
				<t path="vscode.Event"><t path="vscode.WebviewPanelOnDidChangeViewStateEvent"/></t>
				<haxe_doc>* Fired when the panel's view state changes.</haxe_doc>
			</onDidChangeViewState>
			<iconPath>
				<x path="Null"><x path="haxe.extern.EitherType">
	<c path="vscode.Uri"/>
	<a>
		<light><c path="vscode.Uri"/></light>
		<dark><c path="vscode.Uri"/></dark>
	</a>
</x></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Icon for the panel shown in UI.</haxe_doc>
			</iconPath>
			<dispose set="method">
				<f a=""><x path="Any"/></f>
				<haxe_doc>* Dispose of the webview panel.
	 *
	 * This closes the panel if it showing and disposes of the resources owned by the webview.
	 * Webview panels are also disposed when the user closes the webview panel. Both cases
	 * fire the `onDispose` event.</haxe_doc>
			</dispose>
			<active set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the panel is active (focused by the user).</haxe_doc>
			</active>
		</a>
		<haxe_doc>* A panel that contains a webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelOnDidChangeViewStateEvent" params="" file="src/vscode/WebviewPanelOnDidChangeViewStateEvent.hx">
		<a><webviewPanel set="null">
	<t path="vscode.WebviewPanel"/>
	<haxe_doc>* Webview panel whose view state changed.</haxe_doc>
</webviewPanel></a>
		<haxe_doc>* Event fired when a webview panel's view state changes.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelOptions" params="" file="src/vscode/WebviewPanelOptions.hx">
		<a>
			<retainContextWhenHidden set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the webview panel's content (iframe) is kept around even when the panel
	 * is no longer visible.
	 *
	 * Normally the webview panel's html context is created when the panel becomes visible
	 * and destroyed when it is hidden. Extensions that have complex state
	 * or UI can set the `retainContextWhenHidden` to make the editor keep the webview
	 * context around, even when the webview moves to a background tab. When a webview using
	 * `retainContextWhenHidden` becomes hidden, its scripts and other dynamic content are suspended.
	 * When the panel becomes visible again, the context is automatically restored
	 * in the exact same state it was in originally. You cannot send messages to a
	 * hidden webview, even with `retainContextWhenHidden` enabled.
	 *
	 * `retainContextWhenHidden` has a high memory overhead and should only be used if
	 * your panel's context cannot be quickly saved and restored.</haxe_doc>
			</retainContextWhenHidden>
			<enableFindWidget set="null">
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Controls if the find widget is enabled in the panel.
	 *
	 * Defaults to `false`.</haxe_doc>
			</enableFindWidget>
		</a>
		<haxe_doc>* Content settings for a webview panel.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPanelSerializer" params="T" file="src/vscode/WebviewPanelSerializer.hx">
		<a><deserializeWebviewPanel set="method">
	<f a="webviewPanel:state">
		<t path="vscode.WebviewPanel"/>
		<c path="vscode.WebviewPanelSerializer.T"/>
		<x path="js.lib.Thenable"><x path="Void"/></x>
	</f>
	<haxe_doc>* Restore a webview panel from its serialized `state`.
	 *
	 * Called when a serialized webview first becomes visible.
	 *
	 * @param webviewPanel Webview panel to restore. The serializer should take ownership of this panel. The
	 * serializer must restore the webview's `.html` and hook up all webview events.
	 * @param state Persisted state from the webview content.
	 *
	 * @returns Thenable indicating that the webview has been fully restored.</haxe_doc>
</deserializeWebviewPanel></a>
		<haxe_doc>* Restore webview panels that have been persisted when vscode shuts down.
 *
 * There are two types of webview persistence:
 *
 * - Persistence within a session.
 * - Persistence across sessions (across restarts of the editor).
 *
 * A `WebviewPanelSerializer` is only required for the second case: persisting a webview across sessions.
 *
 * Persistence within a session allows a webview to save its state when it becomes hidden
 * and restore its content from this state when it becomes visible again. It is powered entirely
 * by the webview content itself. To save off a persisted state, call `acquireVsCodeApi().setState()` with
 * any json serializable object. To restore the state again, call `getState()`
 *
 * ```js
 * // Within the webview
 * const vscode = acquireVsCodeApi();
 *
 * // Get existing state
 * const oldState = vscode.getState() || { value: 0 };
 *
 * // Update state
 * setState({ value: oldState.value + 1 })
 * ```
 *
 * A `WebviewPanelSerializer` extends this persistence across restarts of the editor. When the editor is shutdown,
 * it will save off the state from `setState` of all webviews that have a serializer. When the
 * webview first becomes visible after the restart, this state is passed to `deserializeWebviewPanel`.
 * The extension can then restore the old `WebviewPanel` from this state.
 *
 * @param T Type of the webview's state.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewPortMapping" params="" file="src/vscode/WebviewPortMapping.hx">
		<a>
			<webviewPort set="null">
				<x path="Int"/>
				<haxe_doc>* Localhost port to remap inside the webview.</haxe_doc>
			</webviewPort>
			<extensionHostPort set="null">
				<x path="Int"/>
				<haxe_doc>* Destination port. The `webviewPort` is resolved to this port.</haxe_doc>
			</extensionHostPort>
		</a>
		<haxe_doc>* Defines a port mapping used for localhost inside the webview.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewView" params="" file="src/vscode/WebviewView.hx">
		<a>
			<webview set="null">
				<t path="vscode.Webview"/>
				<haxe_doc>* The underlying webview for the view.</haxe_doc>
			</webview>
			<visible set="null">
				<x path="Bool"/>
				<haxe_doc>* Tracks if the webview is currently visible.
	 *
	 * Views are visible when they are on the screen and expanded.</haxe_doc>
			</visible>
			<viewType set="null">
				<c path="String"/>
				<haxe_doc>* Identifies the type of the webview view, such as `'hexEditor.dataView'`.</haxe_doc>
			</viewType>
			<title>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* View title displayed in the UI.
	 *
	 * The view title is initially taken from the extension `package.json` contribution.</haxe_doc>
			</title>
			<show set="method">
				<f a="?preserveFocus">
					<x path="Bool"/>
					<x path="Void"/>
				</f>
				<haxe_doc>* Reveal the view in the UI.
	 *
	 * If the view is collapsed, this will expand it.
	 *
	 * @param preserveFocus When `true` the view will not take focus.</haxe_doc>
			</show>
			<onDidDispose set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Event fired when the view is disposed.
	 *
	 * Views are disposed when they are explicitly hidden by a user (this happens when a user
	 * right clicks in a view and unchecks the webview view).
	 *
	 * Trying to use the view after it has been disposed throws an exception.</haxe_doc>
			</onDidDispose>
			<onDidChangeVisibility set="null">
				<t path="vscode.Event"><x path="Void"/></t>
				<haxe_doc>* Event fired when the visibility of the view changes.
	 *
	 * Actions that trigger a visibility change:
	 *
	 * - The view is collapsed or expanded.
	 * - The user switches to a different view group in the sidebar or panel.
	 *
	 * Note that hiding a view using the context menu instead disposes of the view and fires `onDidDispose`.</haxe_doc>
			</onDidChangeVisibility>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Human-readable string which is rendered less prominently in the title.</haxe_doc>
			</description>
			<badge>
				<x path="Null"><t path="vscode.ViewBadge"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The badge to display for this webview view.
	 * To remove the badge, set to undefined.</haxe_doc>
			</badge>
		</a>
		<haxe_doc>* A webview based view.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewViewProvider" params="" file="src/vscode/WebviewViewProvider.hx">
		<a><resolveWebviewView params="T" set="method">
	<f a="webviewView:context:token">
		<t path="vscode.WebviewView"/>
		<t path="vscode.WebviewViewResolveContext"><c path="resolveWebviewView.T"/></t>
		<t path="vscode.CancellationToken"/>
		<x path="Null"><x path="js.lib.Thenable"><x path="Void"/></x></x>
	</f>
	<haxe_doc>* Resolves a webview view.
	 *
	 * `resolveWebviewView` is called when a view first becomes visible. This may happen when the view is
	 * first loaded or when the user hides and then shows a view again.
	 *
	 * @param webviewView Webview view to restore. The provider should take ownership of this view. The
	 *    provider must set the webview's `.html` and hook up all webview events it is interested in.
	 * @param context Additional metadata about the view being resolved.
	 * @param token Cancellation token indicating that the view being provided is no longer needed.
	 *
	 * @returns Optional thenable indicating that the view has been fully resolved.</haxe_doc>
</resolveWebviewView></a>
		<haxe_doc>* Provider for creating `WebviewView` elements.</haxe_doc>
	</typedef>
	<typedef path="vscode.WebviewViewResolveContext" params="T" file="src/vscode/WebviewViewResolveContext.hx">
		<a><state set="null">
	<x path="Null"><c path="vscode.WebviewViewResolveContext.T"/></x>
	<haxe_doc>* Persisted state from the webview content.
	 *
	 * To save resources, the editor normally deallocates webview documents (the iframe content) that are not visible.
	 * For example, when the user collapse a view or switches to another top level activity in the sidebar, the
	 * `WebviewView` itself is kept alive but the webview's underlying document is deallocated. It is recreated when
	 * the view becomes visible again.
	 *
	 * You can prevent this behavior by setting `retainContextWhenHidden` in the `WebviewOptions`. However this
	 * increases resource usage and should be avoided wherever possible. Instead, you can use persisted state to
	 * save off a webview's state so that it can be quickly recreated as needed.
	 *
	 * To save off a persisted state, inside the webview call `acquireVsCodeApi().setState()` with
	 * any json serializable object. To restore the state again, call `getState()`. For example:
	 *
	 * ```js
	 * // Within the webview
	 * const vscode = acquireVsCodeApi();
	 *
	 * // Get existing state
	 * const oldState = vscode.getState() || { value: 0 };
	 *
	 * // Update state
	 * setState({ value: oldState.value + 1 })
	 * ```
	 *
	 * The editor ensures that the persisted state is saved correctly when a webview is hidden and across
	 * editor restarts.</haxe_doc>
</state></a>
		<haxe_doc>* Additional information the webview view being resolved.
 *
 * @param T Type of the webview's state.</haxe_doc>
	</typedef>
	<typedef path="vscode.WindowState" params="" file="src/vscode/WindowState.hx">
		<a>
			<focused set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the current window is focused.</haxe_doc>
			</focused>
			<active set="null">
				<x path="Bool"/>
				<haxe_doc>* Whether the window has been interacted with recently. This will change
	 * immediately on activity, or after a short time of user inactivity.</haxe_doc>
			</active>
		</a>
		<haxe_doc>* Represents the state of a window.</haxe_doc>
	</typedef>
	<class path="vscode.WorkspaceConfiguration" params="" file="src/vscode/WorkspaceConfiguration.hx" extern="1">
		<get public="1" params="T" set="method">
			<f a="section">
				<c path="String"/>
				<x path="Null"><c path="get.T"/></x>
			</f>
			<haxe_doc>* Return a value from this configuration.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @returns The value `section` denotes or `undefined`.</haxe_doc>
			<overloads><get public="1" params="T" set="method">
	<f a="section:defaultValue">
		<c path="String"/>
		<c path="get.T"/>
		<c path="get.T"/>
	</f>
	<haxe_doc>* Return a value from this configuration.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @param defaultValue A value should be returned when no value could be found, is `undefined`.
	 * @returns The value `section` denotes or the default.</haxe_doc>
</get></overloads>
		</get>
		<has public="1" set="method">
			<f a="section">
				<c path="String"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if this configuration has a certain value.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @returns `true` if the section doesn't resolve to `undefined`.</haxe_doc>
		</has>
		<inspect public="1" params="T" set="method">
			<f a="section">
				<c path="String"/>
				<x path="Null"><a>
	<workspaceValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceValue>
	<workspaceLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceLanguageValue>
	<workspaceFolderValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceFolderValue>
	<workspaceFolderLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</workspaceFolderLanguageValue>
	<languageIds>
		<x path="Null"><c path="Array"><c path="String"/></c></x>
		<meta><m n=":optional"/></meta>
	</languageIds>
	<key><c path="String"/></key>
	<globalValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</globalValue>
	<globalLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</globalLanguageValue>
	<defaultValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</defaultValue>
	<defaultLanguageValue>
		<x path="Null"><c path="inspect.T"/></x>
		<meta><m n=":optional"/></meta>
	</defaultLanguageValue>
</a></x>
			</f>
			<haxe_doc>* Retrieve all information about a configuration setting. A configuration value
	 * often consists of a *default* value, a global or installation-wide value,
	 * a workspace-specific value, folder-specific value
	 * and language-specific values (if {@link WorkspaceConfiguration} is scoped to a language).
	 *
	 * Also provides all language ids under which the given configuration setting is defined.
	 *
	 * *Note:* The configuration name must denote a leaf in the configuration tree
	 * (`editor.fontSize` vs `editor`) otherwise no result is returned.
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @returns Information about a configuration setting or `undefined`.</haxe_doc>
		</inspect>
		<update public="1" set="method">
			<f a="section:value:?configurationTarget:?overrideInLanguage">
				<c path="String"/>
				<x path="Any"/>
				<x path="haxe.extern.EitherType">
					<x path="vscode.ConfigurationTarget"/>
					<x path="Bool"/>
				</x>
				<x path="Bool"/>
				<x path="js.lib.Thenable"><x path="Void"/></x>
			</f>
			<haxe_doc>* Update a configuration value. The updated configuration values are persisted.
	 *
	 * A value can be changed in
	 *
	 * - {@link ConfigurationTarget.Global Global settings}: Changes the value for all instances of the editor.
	 * - {@link ConfigurationTarget.Workspace Workspace settings}: Changes the value for current workspace, if available.
	 * - {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings}: Changes the value for settings from one of the {@link workspace.workspaceFolders Workspace Folders} under which the requested resource belongs to.
	 * - Language settings: Changes the value for the requested languageId.
	 *
	 * *Note:* To remove a configuration value use `undefined`, like so: `config.update('somekey', undefined)`
	 *
	 * @param section Configuration name, supports _dotted_ names.
	 * @param value The new value.
	 * @param configurationTarget The {@link ConfigurationTarget configuration target} or a boolean value.
	 *	- If `true` updates {@link ConfigurationTarget.Global Global settings}.
	 *	- If `false` updates {@link ConfigurationTarget.Workspace Workspace settings}.
	 *	- If `undefined` or `null` updates to {@link ConfigurationTarget.WorkspaceFolder Workspace folder settings} if configuration is resource specific,
	 * 	otherwise to {@link ConfigurationTarget.Workspace Workspace settings}.
	 * @param overrideInLanguage Whether to update the value in the scope of requested languageId or not.
	 *	- If `true` updates the value under the requested languageId.
	 *	- If `undefined` updates the value under the requested languageId only if the configuration is defined for the language.
	 * @throws error while updating
	 *	- configuration which is not registered.
	 *	- window configuration to workspace folder
	 *	- configuration to workspace or workspace folder when no workspace is opened.
	 *	- configuration to workspace folder when there is no workspace folder settings.
	 *	- configuration to workspace folder when {@link WorkspaceConfiguration} is not scoped to a resource.</haxe_doc>
		</update>
		<haxe_doc>* Represents the configuration. It is a merged view of
 *
 * - *Default Settings*
 * - *Global (User) Settings*
 * - *Workspace settings*
 * - *Workspace Folder settings* - From one of the {@link workspace.workspaceFolders Workspace Folders} under which requested resource belongs to.
 * - *Language settings* - Settings defined under requested language.
 *
 * The *effective* value (returned by {@linkcode WorkspaceConfiguration.get get}) is computed by overriding or merging the values in the following order:
 *
 * 1. `defaultValue` (if defined in `package.json` otherwise derived from the value's type)
 * 1. `globalValue` (if defined)
 * 1. `workspaceValue` (if defined)
 * 1. `workspaceFolderValue` (if defined)
 * 1. `defaultLanguageValue` (if defined)
 * 1. `globalLanguageValue` (if defined)
 * 1. `workspaceLanguageValue` (if defined)
 * 1. `workspaceFolderLanguageValue` (if defined)
 *
 * **Note:** Only `object` value types are merged and all other value types are overridden.
 *
 * Example 1: Overriding
 *
 * ```ts
 * defaultValue = 'on';
 * globalValue = 'relative'
 * workspaceFolderValue = 'off'
 * value = 'off'
 * ```
 *
 * Example 2: Language Values
 *
 * ```ts
 * defaultValue = 'on';
 * globalValue = 'relative'
 * workspaceFolderValue = 'off'
 * globalLanguageValue = 'on'
 * value = 'on'
 * ```
 *
 * Example 3: Object Values
 *
 * ```ts
 * defaultValue = { "a": 1, "b": 2 };
 * globalValue = { "b": 3, "c": 4 };
 * value = { "a": 1, "b": 3, "c": 4 };
 * ```
 *
 * *Note:* Workspace and Workspace Folder configurations contains `launch` and `tasks` settings. Their basename will be
 * part of the section identifier. The following snippets shows how to retrieve all configurations
 * from `launch.json`:
 *
 * ```ts
 * // launch.json configuration
 * const config = workspace.getConfiguration('launch', vscode.workspace.workspaceFolders[0].uri);
 *
 * // retrieve values
 * const values = config.get('configurations');
 * ```
 *
 * Refer to [Settings](https://code.visualstudio.com/docs/getstarted/settings) for more information.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"WorkspaceConfiguration"</e>
</m></meta>
	</class>
	<class path="vscode.WorkspaceEdit" params="" file="src/vscode/WorkspaceEdit.hx" extern="1">
		<size public="1" set="null">
			<x path="Int"/>
			<haxe_doc>* The number of affected resources of textual or resource changes.</haxe_doc>
		</size>
		<replace public="1" set="method">
			<f a="uri:range:newText:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<c path="String"/>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Replace the given range with given text for the given resource.
	 *
	 * @param uri A resource identifier.
	 * @param range A range.
	 * @param newText A string.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</replace>
		<insert public="1" set="method">
			<f a="uri:position:newText:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Position"/>
				<c path="String"/>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Insert the given text at the given position.
	 *
	 * @param uri A resource identifier.
	 * @param position A position.
	 * @param newText A string.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</insert>
		<delete public="1" set="method">
			<f a="uri:range:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Range"/>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Delete the text at the given range.
	 *
	 * @param uri A resource identifier.
	 * @param range A range.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</delete>
		<has public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>* Check if a text edit for a resource exists.
	 *
	 * @param uri A resource identifier.
	 * @returns `true` if the given resource will be touched by this edit.</haxe_doc>
		</has>
		<set public="1" set="method">
			<f a="uri:edits">
				<c path="vscode.Uri"/>
				<x path="haxe.ds.ReadOnlyArray"><x path="haxe.extern.EitherType">
	<c path="vscode.TextEdit"/>
	<c path="vscode.SnippetTextEdit"/>
</x></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Set (and replace) text edits or snippet edits for a resource.
	 *
	 * @param uri A resource identifier.
	 * @param edits An array of edits.</haxe_doc>
			<overloads>
				<set public="1" set="method">
					<f a="uri:edits">
						<c path="vscode.Uri"/>
						<x path="haxe.ds.ReadOnlyArray"><x path="vscode.WorkspaceEditNotebookMetadataTuple"/></x>
						<x path="Void"/>
					</f>
					<haxe_doc>* Set (and replace) notebook edits with metadata for a resource.
	 *
	 * @param uri A resource identifier.
	 * @param edits An array of edits.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="uri:edits">
						<c path="vscode.Uri"/>
						<x path="haxe.ds.ReadOnlyArray"><c path="vscode.NotebookEdit"/></x>
						<x path="Void"/>
					</f>
					<haxe_doc>* Set (and replace) notebook edits for a resource.
	 *
	 * @param uri A resource identifier.
	 * @param edits An array of edits.</haxe_doc>
				</set>
				<set public="1" set="method">
					<f a="uri:edits">
						<c path="vscode.Uri"/>
						<x path="haxe.ds.ReadOnlyArray"><x path="vscode.WorkspaceEditMetadataTuple"/></x>
						<x path="Void"/>
					</f>
					<haxe_doc>* Set (and replace) text edits or snippet edits with metadata for a resource.
	 *
	 * @param uri A resource identifier.
	 * @param edits An array of edits.</haxe_doc>
				</set>
			</overloads>
		</set>
		<get public="1" set="method">
			<f a="uri">
				<c path="vscode.Uri"/>
				<c path="Array"><c path="vscode.TextEdit"/></c>
			</f>
			<haxe_doc>* Get the text edits for a resource.
	 *
	 * @param uri A resource identifier.
	 * @returns An array of text edits.</haxe_doc>
		</get>
		<createFile public="1" set="method">
			<f a="uri:?options:?metadata">
				<c path="vscode.Uri"/>
				<a>
					<overwrite>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</overwrite>
					<ignoreIfExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfExists>
					<contents>
						<x path="Null"><x path="haxe.extern.EitherType">
	<c path="js.lib.Uint8Array"/>
	<t path="vscode.DataTransferFile"/>
</x></x>
						<meta><m n=":optional"/></meta>
					</contents>
				</a>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Create a regular file.
	 *
	 * @param uri Uri of the new file.
	 * @param options Defines if an existing file should be overwritten or be
	 * ignored. When `overwrite` and `ignoreIfExists` are both set `overwrite` wins.
	 * When both are unset and when the file already exists then the edit cannot
	 * be applied successfully. The `content`-property allows to set the initial contents
	 * the file is being created with.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</createFile>
		<deleteFile public="1" set="method">
			<f a="uri:?options:?metadata">
				<c path="vscode.Uri"/>
				<a>
					<recursive>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</recursive>
					<ignoreIfNotExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfNotExists>
				</a>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Delete a file or folder.
	 *
	 * @param uri The uri of the file that is to be deleted.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</deleteFile>
		<renameFile public="1" set="method">
			<f a="oldUri:newUri:?options:?metadata">
				<c path="vscode.Uri"/>
				<c path="vscode.Uri"/>
				<a>
					<overwrite>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</overwrite>
					<ignoreIfExists>
						<x path="Null"><x path="Bool"/></x>
						<meta><m n=":optional"/></meta>
					</ignoreIfExists>
				</a>
				<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
				<x path="Void"/>
			</f>
			<haxe_doc>* Rename a file or folder.
	 *
	 * @param oldUri The existing file.
	 * @param newUri The new location.
	 * @param options Defines if existing files should be overwritten or be
	 * ignored. When overwrite and ignoreIfExists are both set overwrite wins.
	 * @param metadata Optional metadata for the entry.</haxe_doc>
		</renameFile>
		<entries public="1" set="method">
			<f a=""><c path="Array"><x path="vscode.WorkspaceEditEntriesTuple"/></c></f>
			<haxe_doc>* Get all text edits grouped by resource.
	 *
	 * @returns A shallow copy of `[Uri, TextEdit[]]`-tuples.</haxe_doc>
		</entries>
		<new public="1" set="method"><f a=""><x path="Void"/></f></new>
		<haxe_doc>* A workspace edit is a collection of textual and files changes for
 * multiple resources and documents.
 *
 * Use the {@link workspace.applyEdit applyEdit}-function to apply a workspace edit.</haxe_doc>
		<meta><m n=":jsRequire">
	<e>"vscode"</e>
	<e>"WorkspaceEdit"</e>
</m></meta>
	</class>
	<abstract path="vscode.WorkspaceEditEntriesTuple" params="" file="src/vscode/WorkspaceEdit.hx" module="vscode.WorkspaceEdit">
		<this><c path="Array"><x path="Any"/></c></this>
		<to><icast><c path="Array"><x path="Any"/></c></icast></to>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._WorkspaceEdit.WorkspaceEditEntriesTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
	<uri public="1" get="accessor" set="null" static="1"><c path="vscode.Uri"/></uri>
	<edits public="1" get="accessor" set="null" static="1"><c path="Array"><c path="vscode.TextEdit"/></c></edits>
	<get_uri get="inline" set="null" line="177" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="vscode.Uri"/>
</f></get_uri>
	<get_edits get="inline" set="null" line="180" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="Array"><c path="vscode.TextEdit"/></c>
</f></get_edits>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._WorkspaceEdit.WorkspaceEditEntriesTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
		<uri public="1" get="accessor" set="null" static="1"><c path="vscode.Uri"/></uri>
		<edits public="1" get="accessor" set="null" static="1"><c path="Array"><c path="vscode.TextEdit"/></c></edits>
		<get_uri get="inline" set="null" line="177" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="vscode.Uri"/>
</f></get_uri>
		<get_edits get="inline" set="null" line="180" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="Array"><c path="vscode.TextEdit"/></c>
</f></get_edits>
		<meta>
			<m n=":keep"/>
			<m n=":dce"/>
			<m n=":dce"/>
		</meta>
	</class>
	<abstract path="vscode.WorkspaceEditMetadataTuple" params="" file="src/vscode/WorkspaceEdit.hx" module="vscode.WorkspaceEdit">
		<this><c path="Array"><x path="Any"/></c></this>
		<to><icast><c path="Array"><x path="Any"/></c></icast></to>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._WorkspaceEdit.WorkspaceEditMetadataTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
	<edit public="1" get="accessor" set="null" static="1"><x path="haxe.extern.EitherType">
	<c path="vscode.TextEdit"/>
	<c path="vscode.SnippetTextEdit"/>
</x></edit>
	<meta public="1" get="accessor" set="null" static="1"><x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x></meta>
	<get_edit get="inline" set="null" line="189" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="haxe.extern.EitherType">
		<c path="vscode.TextEdit"/>
		<c path="vscode.SnippetTextEdit"/>
	</x>
</f></get_edit>
	<get_meta get="inline" set="null" line="192" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
</f></get_meta>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._WorkspaceEdit.WorkspaceEditMetadataTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
		<edit public="1" get="accessor" set="null" static="1"><x path="haxe.extern.EitherType">
	<c path="vscode.TextEdit"/>
	<c path="vscode.SnippetTextEdit"/>
</x></edit>
		<meta public="1" get="accessor" set="null" static="1"><x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x></meta>
		<get_edit get="inline" set="null" line="189" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="haxe.extern.EitherType">
		<c path="vscode.TextEdit"/>
		<c path="vscode.SnippetTextEdit"/>
	</x>
</f></get_edit>
		<get_meta get="inline" set="null" line="192" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
</f></get_meta>
		<meta>
			<m n=":keep"/>
			<m n=":dce"/>
			<m n=":dce"/>
		</meta>
	</class>
	<abstract path="vscode.WorkspaceEditNotebookMetadataTuple" params="" file="src/vscode/WorkspaceEdit.hx" module="vscode.WorkspaceEdit">
		<this><c path="Array"><x path="Any"/></c></this>
		<to><icast><c path="Array"><x path="Any"/></c></icast></to>
		<meta><m n=":dce"/></meta>
		<impl><class path="vscode._WorkspaceEdit.WorkspaceEditNotebookMetadataTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
	<edit public="1" get="accessor" set="null" static="1"><c path="vscode.NotebookEdit"/></edit>
	<meta public="1" get="accessor" set="null" static="1"><x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x></meta>
	<get_edit get="inline" set="null" line="201" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="vscode.NotebookEdit"/>
</f></get_edit>
	<get_meta get="inline" set="null" line="204" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
</f></get_meta>
	<meta>
		<m n=":keep"/>
		<m n=":dce"/>
		<m n=":dce"/>
	</meta>
</class></impl>
	</abstract>
	<class path="vscode._WorkspaceEdit.WorkspaceEditNotebookMetadataTuple_Impl_" params="" file="src/vscode/WorkspaceEdit.hx" private="1" module="vscode.WorkspaceEdit" final="1">
		<edit public="1" get="accessor" set="null" static="1"><c path="vscode.NotebookEdit"/></edit>
		<meta public="1" get="accessor" set="null" static="1"><x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x></meta>
		<get_edit get="inline" set="null" line="201" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<c path="vscode.NotebookEdit"/>
</f></get_edit>
		<get_meta get="inline" set="null" line="204" static="1"><f a="this">
	<c path="Array"><x path="Any"/></c>
	<x path="Null"><t path="vscode.WorkspaceEditEntryMetadata"/></x>
</f></get_meta>
		<meta>
			<m n=":keep"/>
			<m n=":dce"/>
			<m n=":dce"/>
		</meta>
	</class>
	<typedef path="vscode.WorkspaceEditEntryMetadata" params="" file="src/vscode/WorkspaceEditEntryMetadata.hx">
		<a>
			<needsConfirmation>
				<x path="Bool"/>
				<haxe_doc>* A flag which indicates that user confirmation is needed.</haxe_doc>
			</needsConfirmation>
			<label>
				<c path="String"/>
				<haxe_doc>* A human-readable string which is rendered prominent.</haxe_doc>
			</label>
			<iconPath>
				<x path="Null"><t path="vscode.IconPath"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* The icon path or {@link ThemeIcon} for the edit.</haxe_doc>
			</iconPath>
			<description>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* A human-readable string which is rendered less prominent on the same line.</haxe_doc>
			</description>
		</a>
		<haxe_doc>* Additional data for entries of a workspace edit. Supports to label entries and marks entries
 * as needing confirmation by the user. The editor groups edits with equal labels into tree nodes,
 * for instance all edits labelled with "Changes in Strings" would be a tree node.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceEditMetadata" params="" file="src/vscode/WorkspaceEditMetadata.hx">
		<a><isRefactoring>
	<x path="Null"><x path="Bool"/></x>
	<meta><m n=":optional"/></meta>
	<haxe_doc>* Signal to the editor that this edit is a refactoring.</haxe_doc>
</isRefactoring></a>
		<haxe_doc>* Additional data about a workspace edit.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFolder" params="" file="src/vscode/WorkspaceFolder.hx">
		<a>
			<uri set="null">
				<c path="vscode.Uri"/>
				<haxe_doc>* The associated uri for this workspace folder.
	 *
	 * *Note:* The {@link Uri}-type was intentionally chosen such that future releases of the editor can support
	 * workspace folders that are not stored on the local disk, e.g. `ftp://server/workspaces/foo`.</haxe_doc>
			</uri>
			<name set="null">
				<c path="String"/>
				<haxe_doc>* The name of this workspace folder. Defaults to
	 * the basename of its {@link Uri.path uri-path}</haxe_doc>
			</name>
			<index set="null">
				<x path="Int"/>
				<haxe_doc>* The ordinal number of this workspace folder.</haxe_doc>
			</index>
		</a>
		<haxe_doc>* A workspace folder is one of potentially many roots opened by the editor. All workspace folders
 * are equal which means there is no notion of an active or primary workspace folder.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFolderPickOptions" params="" file="src/vscode/WorkspaceFolderPickOptions.hx">
		<a>
			<placeHolder>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* An optional string to show as placeholder in the input box to guide the user what to pick on.</haxe_doc>
			</placeHolder>
			<ignoreFocusOut>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Set to `true` to keep the picker open when focus moves to another part of the editor or to another window.
	 * This setting is ignored on iPad and is always false.</haxe_doc>
			</ignoreFocusOut>
		</a>
		<haxe_doc>* Options to configure the behaviour of the {@link WorkspaceFolder workspace folder} pick UI.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceFoldersChangeEvent" params="" file="src/vscode/WorkspaceFoldersChangeEvent.hx">
		<a>
			<removed set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x>
				<haxe_doc>* Removed workspace folders.</haxe_doc>
			</removed>
			<added set="null">
				<x path="haxe.ds.ReadOnlyArray"><t path="vscode.WorkspaceFolder"/></x>
				<haxe_doc>* Added workspace folders.</haxe_doc>
			</added>
		</a>
		<haxe_doc>* An event describing a change to the set of {@link workspace.workspaceFolders workspace folders}.</haxe_doc>
	</typedef>
	<typedef path="vscode.WorkspaceSymbolProvider" params="T" file="src/vscode/WorkspaceSymbolProvider.hx">
		<a>
			<resolveWorkspaceSymbol>
				<x path="Null"><f a="symbol:token">
	<c path="vscode.WorkspaceSymbolProvider.T"/>
	<t path="vscode.CancellationToken"/>
	<t path="vscode.ProviderResult"><c path="vscode.WorkspaceSymbolProvider.T"/></t>
</f></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>* Given a symbol fill in its {@link SymbolInformation.location location}. This method is called whenever a symbol
	 * is selected in the UI. Providers can implement this method and return incomplete symbols from
	 * {@linkcode WorkspaceSymbolProvider.provideWorkspaceSymbols provideWorkspaceSymbols} which often helps to improve
	 * performance.
	 *
	 * @param symbol The symbol that is to be resolved. Guaranteed to be an instance of an object returned from an
	 * earlier call to `provideWorkspaceSymbols`.
	 * @param token A cancellation token.
	 * @returns The resolved symbol or a thenable that resolves to that. When no result is returned,
	 * the given `symbol` is used.</haxe_doc>
			</resolveWorkspaceSymbol>
			<provideWorkspaceSymbols set="method">
				<f a="query:token">
					<c path="String"/>
					<t path="vscode.CancellationToken"/>
					<t path="vscode.ProviderResult"><c path="Array"><c path="vscode.WorkspaceSymbolProvider.T"/></c></t>
				</f>
				<haxe_doc>* Project-wide search for a symbol matching the given query string.
	 *
	 * The `query`-parameter should be interpreted in a *relaxed way* as the editor will apply its own highlighting
	 * and scoring on the results. A good rule of thumb is to match case-insensitive and to simply check that the
	 * characters of *query* appear in their order in a candidate symbol. Don't use prefix, substring, or similar
	 * strict matching.
	 *
	 * To improve performance implementors can implement `resolveWorkspaceSymbol` and then provide symbols with partial
	 * {@link SymbolInformation.location location}-objects, without a `range` defined. The editor will then call
	 * `resolveWorkspaceSymbol` for selected symbols only, e.g. when opening a workspace symbol.
	 *
	 * @param query A query string, can be the empty string in which case all symbols should be returned.
	 * @param token A cancellation token.
	 * @returns An array of document highlights or a thenable that resolves to such. The lack of a result can be
	 * signaled by returning `undefined`, `null`, or an empty array.</haxe_doc>
			</provideWorkspaceSymbols>
		</a>
		<haxe_doc>* The workspace symbol provider interface defines the contract between extensions and
 * the [symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name)-feature.</haxe_doc>
	</typedef>
</haxe>